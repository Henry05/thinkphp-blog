O:9:"MagpieRSS":23:{s:6:"parser";i:0;s:12:"current_item";a:0:{}s:5:"items";a:10:{i:0;a:14:{s:5:"title";s:58:"CSS深入理解vertical-align和line-height的基友关系";s:4:"link";s:95:"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/";s:8:"comments";s:104:"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/#comments";s:7:"pubdate";s:31:"Sat, 29 Aug 2015 16:47:36 +0000";s:2:"dc";a:1:{s:7:"creator";s:10:"张 鑫旭";}s:8:"category";s:120:"css相关baselinedisplay:inline-blockinline box模型line-heighttext-align:justifyvertical-align两端对齐空白间隙";s:4:"guid";s:43:"http://www.zhangxinxu.com/wordpress/?p=4925";s:11:"description";s:602:"<a href="http://www.zhangxinxu.com/wordpress/?p=4925" title="点击查看本文"><img src="http://image.zhangxinxu.com/image/blog/201508/covers-line-height-vertical-align.jpg" width="550" height="170" class="imgpad mb10" alt="CSS深入理解vertical-align和line-height的基友关系"></a>
本文深入探讨vertical-align和line-height之间的关系，属于中长篇，有很多其他地方看不到的知识点。实例效果就在文章页面上，因此，请使用合适的浏览器查看本文。截图丰富，源代码展示详尽，相信本文的内容会对您的学习有所帮助的。";s:7:"content";a:1:{s:7:"encoded";s:35779:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4925">http://www.zhangxinxu.com/wordpress/?p=4925</a></p>
<h3>一、想死你们了</h3>
<p>几个星期没有写文章了，好忙好痒；个把月没有写长篇了，好忙好想；半个季度没在文章中唠嗑了，好痒好想。</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201508/fengong.jpg" width="300" height="199" class="alignnone" /></p>
<p>后面一栋楼有对夫妻在吵架，声音雄浑有力，交锋酣畅淋漓，还以为只有小乡镇才有这架势，哦，突然想起来，我就是住在上海郊外的小乡镇上。</p>
<p>刚刚买了几十股京东的股票，第一次玩这个，看好京东的发展。其实股价21的时候就打算入手了，但是，转外汇的时候，提示，要工作时间。然后一忙二忘，等现在入的时候，已经涨了20%多了，科科，肥皂弄人啊！写到这里的时候，忍不住拿出手机一看，哎呦，不错哦，盈利28刀，孩子的半罐奶粉钱有了，哈哈！<img src="http://mat1.gtimg.com/www/mb/images/face/28.gif" align="absmiddle" height="24"></p>
<p>说起肥皂，让我想起了《监狱学院》，科科~</p>
<p><img src="http://ww1.sinaimg.cn/bmiddle/9e6b7fdbjw1eui7bv9u8yg206y04dx6q.gif" width="250" height="157" alt="肥皂基友" class="alignnone" /></p>
<p>原来，肥皂和基友的传说已经传播到了11区。岂止啊，除了2次元，代码次元也深受其爱，比方说CSS届的<code>vertical-align</code>和<code>line-height</code>就是典型的表面上看上去大相径庭，实际上是大进后庭的断背好基友啊！</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201508/gouxue.jpg" width="320" height="209" class="alignnone" /></p>
<p>没错，就是这么狗血！</p>
<p>乡下人不打诳语，下面我就好好跟大家八卦下，<code>vertical-align</code>和<code>line-height</code>之间令人发指的基友关系！</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201508/enen.gif" width="100" height="100" alt="恩恩" class="alignnone" /></p>
<h3>二、表现明显的断背基情</h3>
<p>众所周知，<code>vertical-align</code>支持很多属性值，足足可以组成一个足球队了：</p>
<div class="zxx_code">
<pre><span style="color:green;">/* 关键字值 */</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> sub<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> super<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> text-top<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> text-bottom<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> bottom<span class="token punctuation">;</span>

<span style="color:green;">/* &lt;长度&gt; 值 */</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> 10em<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>

<span style="color:green;">/* &lt;百分比&gt; 值 */</span>
<span style="color:#cd0000;">vertical-align: 10%;</span>

<span style="color:green;">/* 全局值 */</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span></pre>
</div>
<p>其中，有个属性值暴露了<code>vertical-align</code>和<code>line-height</code>之间的基友关系，大家猜猜看是哪个属性值？</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201508/whats-s.png" width="240" height="156" alt="想不明白" class="alignnone" /></p>
<p>哇塞，好厉害！居然被大家一眼就看出来了，没错，就是“百分比值”。</p>
<p><code>vertical-align</code>的百分比值不是相对于字体大小或者其他什么属性计算的，而是相对于<code>line-height</code>计算的。举个简单的例子，如下CSS代码：</p>
<div class="zxx_code">
<pre>{
  line-height: 30px;
  vertical-align: -10%;
}</pre>
</div>
<p>实际上，等同于：</p>
<div class="zxx_code">
<pre>{
  line-height: 30px;
  vertical-align: <span style="color:#cd0000;">-3px;</span>    <span style="color:green;">/* = 30px <span class="fs">*</span> -10% */</span>  
}</pre>
</div>
<p>CSS属性何其多，偏偏跟<code>line-height</code>有一腿，这不是有基情那是什么？</p>
<p><span class="s">//zxx: IE6/IE7浏览器下的vertical-align的百分比值不支持小数line-height</span></p>
<h3>三、背地里无处不在的基友关系</h3>
<blockquote><p>//zxx: <strong>注意</strong>，<code>vertical-align</code>和<code>line-height</code>的地下基友关系从HTML5文档声明开始的，因此，以下探讨的现象，都是在页面为HTML5声明前提下，类似下面的doctype:</p>
<div class="zxx_code">
<pre>&lt;!doctype html>
&lt;html></pre>
</div>
<p>另外，下面很多效果直接就是真实演示，因此，请使用现代浏览器观摩下面的内容。如果发现某些行为与描述不匹配，且浏览器正常，那可能是因为你访问的并不是<a href="http://www.zhangxinxu.com/wordpress/?p=4925">原出处</a>。</p></blockquote>
<p><strong style="display:block;padding-top:10px;"><big>① 基本现象</big></strong></p>
<p>要八卦<code>vertical-align</code>和<code>line-height</code>之间的关系，我们不妨从一个极其简单的现象入手。假设，我们有一个<code>&lt;div&gt;</code>标签，然后，里面有一张<code>&lt;img&gt;</code>图片，我们的HTML代码就是这样子：</p>
<div class="zxx_code">
<pre>&lt;div>&lt;img src="mm1.jpg">&lt;/div></pre>
</div>
<p>然后，表现就是一张图片呈现，类似下面这样：</p>
<div><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191"></div>
<p>恩，看上去很正常，一切都是理所当然。然而，如果我们给这个<code>&lt;div&gt;</code>元素增加一个背景色，例如淡蓝色：</p>
<div class="zxx_code">
<pre>&lt;div style="background-color:#e5edff;">&lt;img src="mm1.jpg">&lt;/div></pre>
</div>
<p>则会是下面这样：</p>
<div style="background-color:#E5EDFF;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191"></div>
<p>会发现图片下面有一段空白空间：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-29_085105.png" width="341" height="81" alt="图片与空白" class="alignnone" /></p>
<p>想必大家都遇到过类似问题，不知大家有没有思考过，为什么图片下面有留有一段间隙呢？<img src="http://mat1.gtimg.com/www/mb/images/face/32.gif" align="absmiddle" height="24"></p>
<p>实际上，这段空白间隙就是<code>vertical-align</code>和<code>line-height</code>携手搞的鬼！</p>
<p>首先，大家一定要意识到这么一点：<strong>对于内联元素，vertical-align与line-height虽然看不见，但实际上「到处都是」！</strong></p>
<p><img src="http://image.zhangxinxu.com/image/blog/201508/anywhere.jpg" width="320" height="175" alt="到处都是" class="alignnone" /></p>
<p>因此，对于内联元素各种想得通或者想不通的行为表现，基本上都可以用<code>vertical-align</code>和<code>line-height</code>来解释，以及进行行为矫正，然而，要深入理解这些行为表现，还是需要狠花一番功夫的，因此，下面的内容，请确保你有半小时充足时间细细阅读，别的地方可是看不到的。<img src="http://mat1.gtimg.com/www/mb/images/face/14.gif" align="absmiddle" height="24"></p>
<p><strong style="display:block;padding-top:10px;"><big>② 幽灵空白节点</big></strong></p>
<p><strong>「幽灵空白节点」</strong>这个概念我自己命名的，注意，是我个人YY出来的，是我自己便于理解某些行为特征提出的概念。规范可能有类似的概念，但名称并非这个。 W3C规范虽然有很多行为的解释和说明，但是，毕竟官方的东西，要求严谨正式，但是，也会有太干太涩的感觉。如果快速掌握和理解这些行为表现呢？就我个人而言，从两方面入手：<strong>1.情感化认知</strong>；<strong>2. 具象化思维</strong>。</p>
<p>例如，我称<code>vertical-align</code>和<code>line-height</code>为好基友（包括以前称浮动和绝对定位是兄弟），就是“情感化认知”；而这里的「幽灵空白节点」就是“具象化思维”。</p>
<p>那「幽灵空白节点」是个什么意思呢？</p>
<p><strong>在HTML5文档声明下，块状元素内部的内联元素的行为表现，就好像块状元素内部还有一个（更有可能两个-前后）看不见摸不着没有宽度没有实体的空白节点，这个假想又似乎存在的空白节点，我称之为“幽灵空白节点”。</strong> <span class="s">//zxx: 自己捣腾的概念，不是权威，欢迎其他小伙伴反馈权威解释</span></p>
<p>抽象了这个概念，绝对定位与<code>text-align</code>的一些行为表现，以及这里的行为表现，就好理解了。</p>
<p>还是上面的图片下边缘留空隙的例子，实际上，这种行为表现，就跟图片前面或者后面有一个宽度为0的空格元素表现是一致的。但是，空格是透明的，为了便于大家理解，我就直接使用很明显的匿名inline box, 也就是字符代替。如下，大家会发现，图片下面的间隙，依旧是那个间隙。</p>
<div style="background-color:#E5EDFF;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191">zxx</div>
<p>下面要解释这个间隙就好解释了。下面，我们让新增的文本inline-block化，然后弄个白色背景，显示其占据的高度。</p>
<div style="background-color:#E5EDFF;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191"><span style="background-color:#fff;display:inline-block;">zxx</span></div>
<p>会发现，图片下面的间隙，依旧是那个间隙。但是，我们的理解就好理解了。回答下面几个问题，我们就知道表现的原因了：</p>
<ol>
<li><code>vertical-align</code>默认的对齐方式是？</li>
<li>后面zxx文字的高度从何而来？</li>
</ol>
<p>上面2个问题就很简单了：</p>
<ol>
<li><code>vertical-align</code>默认值是<code>baseline</code>, 也就是基线对齐。而基线是什么，基线就是字母X的下边缘（参见“<a href="http://www.zhangxinxu.com/wordpress/2015/06/about-letter-x-of-css/">字母’x’在CSS世界中的角色和故事</a>”一文）。所以，妹子图片的下边缘就和后面zxx中的字母<code>x</code>下边缘对齐（见下图）。而字符<code>zxx</code>本身是有高度的，对吧，于是，图片下面就留空了。<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-29_141809.png" width="522" height="340" alt="图片底边和字母x底边对齐" class="alignnone" /></li>
<li>而<code>zxx</code>文字的高度是由行高决定的。</li>
</ol>
<p>因此，简单的图片下面留白行为表现，本质上，就是<code>vertical-align</code>和<code>line-height</code>背地里搞基造成的。</p>
<p>知道了问题的原因，我们就可以对症下药，准确搞定图片下面我们不希望看到的间隙。怎么搞呢？一对基友，<code>vertical-align</code>和<code>line-height</code>我们随便搞定一个就可以了。</p>
<p>比方说<code>vertical-align</code>.</p>
<p><strong>1. 让vertical-align失效</strong><br />
图片默认是<code>inline</code>水平的，而<code>vertical-align</code>对块状水平的元素无感。因此，我们只要让图片<code>display</code>水平为<code>block</code>就可以了，我们可以直接设置<code>display</code>或者浮动、绝对定位等（如果布局允许）。例如：</p>
<div class="zxx_code">
<pre>img { display: block; }</pre>
</div>
<p>则妹子就会变这样：</p>
<div style="background-color:#E5EDFF;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" style="display:block;" height="191"></div>
<p>下面的空隙不见了。</p>
<p><strong>2. 使用其他vertical-align值</strong><br />
告别<code>baseline</code>, 取用其他属性值，比方说<code>bottom</code>/<code>middle</code>/<code>top</code>都是可以的。</p>
<p id="radioVT"> <input type="radio" id="radioBottom" value="bottom" name="radiovt" onclick="funImgVt(this)"><label for="radioBottom" class="mr20">vertical-align:bottom</label> <input type="radio" id="radioMiddle" value="middle" name="radiovt" onclick="funImgVt(this)"><label for="radioMiddle" class="mr20">vertical-align:middle</label> <input type="radio" id="radioTop" value="top" name="radiovt" onclick="funImgVt(this)"><label for="radioTop">vertical-align:top</label> </p>
<div style="background-color:#E5EDFF;"><img id="imgVt" src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191"><span style="background-color:#fff;display:inline-block;">zxx</span></div>
<p><strong>3. 直接修改line-height值</strong><br />
下面的空隙高度，实际上是文字计算后的行高值和字母x下边缘的距离。因此，只要行高足够小，实际文字占据的高度的底部就会在x的上面，下面没有了高度区域支撑，自然，图片就会有容器底边贴合在一起了。比方说，我们设置行高5像素：</p>
<div class="zxx_code">
<pre>div { line-height: 5px; }</pre>
</div>
<div style="background-color:#E5EDFF; line-height: 5px;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191"><span style="background-color:#fff;display:inline-block;">zxx</span></div>
<p><strong>4. line-height为相对单位，font-size间接控制</strong><br />
如果<code>line-height</code>是相对单位，例如<code>line-height:1.6</code>或者<code>line-height:160%</code>之类，也可以使用<code>font-size</code>间接控制，比方说来个狠的，<code>font-size</code>设为大鸡蛋<code>0</code>, 本质上还是改变<code>line-height</code>值.</p>
<div class="zxx_code">
<pre>div { font-size: 0; }</pre>
</div>
<div style="background-color:#E5EDFF; font-size: 0;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191"><span style="background-color:#fff;display:inline-block;">zxx</span></div>
<p><strong style="display:block;padding-top:10px;"><big>③ 基本现象衍生：垂直居中</big></strong></p>
<p>由于「幽灵空白节点」的存在，因此，我们可以进一步衍生，实现其他更实用的效果，比方说任意尺寸的图片（或者内联块状化的多行文字）的垂直居中效果。就是借助本文的两位男主角，<code>vertical-align</code>和<code>line-height</code>。</p>
<p>你想啊，图片后面（前面）有个类似空格字符的节点，然后就能响应<code>line-height</code>形成高度，此时，图片再来个<code>vertical-align:middle</code>，当当当当，就可以和这个被行高撑高的「幽灵空白节点」(近似)垂直对齐了。</p>
<p>例如：</p>
<div class="zxx_code">
<pre>div { line-height: 240px; }
img { vertical-align: middle; }</pre>
</div>
<p>然后就会这样子：</p>
<div style="background-color:#E5EDFF; line-height: 240px;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191" style="vertical-align: middle;"></div>
<p>不过上面的效果并不是完全的垂直居中，只是近似（稍微仔细看可以看出来）。为什么只是近似呢？那是因为「幽灵空白节点」高度行高撑开，其垂直中心是字符content area的中心，而对于字符<code>x</code>而言，都是比绝对中心位置要下沉的（不同字体下沉幅度不一样），换句更易懂的描述就是<code>x</code>的中心位置都是在字符内容区域高度中心点的下方，而这上下的偏差就是这里图片上下间距的偏差。</p>
<p>我特意把字符<code>x</code>使用大字号演示了下：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-31_130708.png" width="266" height="181" alt="中线位置并不是字符内容的绝对居中位置" class="alignnone" /></p>
<p>换句更简单的话说就是：middle中线位置(字符<code>x</code>的中心)并不是字符内容的绝对居中位置。两个位置的偏差就是图片近似居中的偏差。</p>
<p>嘛嘛，单纯的文字还是太苍白了，截个图示意下吧：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-29_214832-new.png" width="428" height="277" alt="近似垂直居中演示" class="alignnone" /></p>
<p>因此，要想完全垂直居中，最先想到的方法就是让后面的“幽灵字符”也是<code>vertical-align:middle</code>，然而，呵呵，既然称之为“幽灵”就表示不会受非继承特性的属性影响，所以，根本没法设置<code>vertical-align:middle</code>，除非你自己创建一个显示的内联元素。</p>
<p>我们就没有办法了吗？当然不是，“幽灵字符”可以受具有继承特性的CSS属性影响，于是，我们可以通过其他东西来做调整，让字符的中线和字符内容中心线在一起，或者说在一个位置上就可以了。有人可能要疑问了，这能行吗？啊，是可以的。</p>
<p>怎么搞？很简单，<code>font-size:0</code>, 因此此时content area高度是0，各种乱七八糟的线都在高度为0的这条线上，绝对中心线和中线重合。自然全垂直居中：</p>
<div class="zxx_code">
<pre>div { line-height: 240px; font-size: 0; }
img { vertical-align: middle; }</pre>
</div>
<p>结果是：</p>
<div style="background-color:#E5EDFF; line-height: 240px; font-size: 0;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191" style="vertical-align: middle;"></div>
<p>处女座的你，是不是看过去舒服多啦！？<img src="http://mat1.gtimg.com/www/mb/images/face/29.gif" align="absmiddle"  height="24"></p>
<p>这种通过<code>line-height</code>定高，元素<code>vertical-align:middle</code>垂直居中的方法不仅适用于现代浏览器，连IE7浏览器也是支持的：</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-29_222354.png" width="173" height="156" alt="IE7浏览器也支持" class="alignnone" /></p>
<p>不过和其他浏览器再使用上还是有些需要注意的地方，就是，HTML不能这样：</p>
<div class="zxx_code">
<pre><del>&lt;div>&lt;img src="mm1.jpg">&lt;/div></del></pre>
</div>
<p>而是需要在图片标签结束处留下空格后者换行：</p>
<div class="zxx_code">
<pre>&lt;div>&lt;img src="mm1.jpg"><span style="color:green;">&lt;!-- 这里要折行或空格 --&gt;</span>
&lt;/div></pre>
</div>
<p><strong style="display:block;padding-top:10px;"><big>④ 复杂现象</big></strong><br />
多年前曾分享过“<a href="http://www.zhangxinxu.com/wordpress/?p=1514">text-align:justify下列表的两端对齐布局</a>”的技术，其中，为了让任意个数的列表最后一行也是对齐排列，在列表最后会辅助列表等宽的空标签元素来占位，类似下面红色高亮HTML代码：</p>
<div class="zxx_code">
<pre>.justify-fix { display: inline-block; width: 128px; }</pre>
</div>
<div class="zxx_code">
<pre>&lt;div style="text-align: justify;">
    &lt;img src="img/mm1.jpg" width="128">
    &lt;img src="img/mm1.jpg" width="128">
    &lt;img src="img/mm1.jpg" width="128">
    &lt;img src="img/mm1.jpg" width="128">
    <span style="color:#cd0000;">&lt;i class="justify-fix">&lt;/i>
    &lt;i class="justify-fix">&lt;/i>
    &lt;i class="justify-fix">&lt;/i></span>
&lt;/div></pre>
</div>
<style>.justify-fix { display: inline-block; width: 128px; }.outline .justify-fix { outline: 1px dashed red; }</style>
<p>为了节约空间，我就使用小图示意：</p>
<div style="text-align: justify;max-width:500px;"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix"></i> <i class="justify-fix"></i> <i class="justify-fix"></i></div>
<p>同样的，在白色背景下，似乎看上去效果还不赖，但是，如果给<code>div</code>容器加个背景色~~</p>
<div style="text-align: justify;max-width:500px;background-color:#E5EDFF;"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix"></i> <i class="justify-fix"></i> <i class="justify-fix"></i></div>
<p>会惊讶的发现，下面多了很大一块间隙（如下截图）：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-29_230514.png" width="256" height="95" alt="大大的空白间隙" class="alignnone" /></p>
<p>为了便于大家看其究竟，我把占位<code>i</code>元素<code>outline</code>高亮下，于是，效果如下：</p>
<div style="text-align: justify;max-width:500px;background-color:#E5EDFF;" class="outline"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix"></i> <i class="justify-fix"></i> <i class="justify-fix"></i></div>
<p>结果会发现，上面巨大的空隙是由占位<code>i</code>元素上面和下面的间隙共同组成的。</p>
<p>下面问题来了：上面的间隙是如何产生的？下面的间隙是如何产生的？如果去除这些间隙呢？</p>
<p>很多时候，复杂问题是由简单问题组合而成的，实际上，这里的间隙现象的始作俑者和上面的简单现象一样，都是<code>vertical-align</code>和<code>line-height</code>搞基带来的不好的影响。</p>
<p>按照之前问题解决方法，我们可以直接来个<code>line-height:0</code>解决垂直间隙问题：</p>
<div class="zxx_code">
<pre>div { line-height: 0; }</pre>
</div>
<p>结果图片和图片之间的间隙是没有了，但是，图片和最后的占位元素之间依然有个几像素的间距，<img src="http://mat1.gtimg.com/www/mb/images/face/18.gif" align="absmiddle">，啊啊啊啊，这究竟是什么鬼？</p>
<div style="text-align: justify;max-width:500px;background-color:#E5EDFF;line-height:0;" class="outline"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix"></i> <i class="justify-fix"></i> <i class="justify-fix"></i></div>
<p>简单现象的背后往往有大的学问，接下来是本文的高潮了，究其原因，要说到inline-block元素和基线baseline之间的一些纠缠的关系。</p>
<p><strong style="display:block;padding-top:10px;"><big>⑤ inline-block和baseline</big></strong><br />
CSS2的可视化格式模型文档中有一么一段话：</p>
<blockquote><p>The baseline of an &#8216;inline-block&#8217; is the baseline of its last line box in the normal flow, unless it has either no in-flow line boxes or if its &#8216;overflow&#8217; property has a computed value other than &#8216;visible&#8217;, in which case the baseline is the bottom margin edge.</p></blockquote>
<p>英文看得眼睛大，于是我中文直译了下：</p>
<blockquote><p>&#8216;inline-block&#8217;的基线是正常流中最后一个line box的基线, 除非，这个line box里面既没有line boxes或者本身&#8217;overflow&#8217;属性的计算值而不是&#8217;visible&#8217;, 这种情况下基线是margin底边缘。</p></blockquote>
<p>这段文档中出现了很多专有名词<code>line box</code>, <code>line boxes</code>等，这些是内联盒子模型中的概念，是CSS进阶必备知识。我在“<a href="http://www.zhangxinxu.com/wordpress/?p=583">浮动深入理解(一)</a>”一文的中间穿插介绍了该模型。<span class="s">//zxx: 我现在后悔了，内联盒子模型当初应该直接独立成一篇文章，这样其他文章可以很干净地引用，所谓文章的模块化书写</span></p>
<p>如果大家没有足够精力去学习之，可以先看下面这张图：<br />
<img src="http://image.zhangxinxu.com/image/blog/201001/2010-01-20_230801.png" width="516" height="186" title="默认图文line boxes示意"></p>
<p>由于上面的译文是直译的，理解起来还是有些拗口，我使用通俗的话描述就是：<strong>一个inline-block元素，如果里面没有inline内联元素，或者overflow不是visible，则该元素的基线就是其margin底边缘，否则，其基线就是元素里面最后一行内联元素的基线。</strong></p>
<p>纳尼，还是没反应过来？</p>
<p>那我们看下面这个例子，应该就知道什么意思了。</p>
<p>两个同尺寸的<code>inline-block</code>水平元素，唯一区别就是一个空的，一个里面有字符，代码如下：</p>
<div class="zxx_code">
<pre>.dib-baseline {
  display: inline-block; width: 150px; height: 150px;
  border: 1px solid #cad5eb; background-color: #f0f3f9;
}</pre>
</div>
<div class="zxx_code">
<pre>&lt;span class="dib-baseline">&lt;/span>
&lt;span class="dib-baseline">x-baseline&lt;/span></pre>
</div>
<style>.dib-baseline { display: inline-block; width: 100px; height: 100px; border: 1px solid #cad5eb; background-color: #f0f3f9; }</style>
<p>结果，科科：</p>
<p><span class="dib-baseline"></span> <span class="dib-baseline" onClick="this.innerHTML=this.innerHTML? '': 'x-baseline'">x-baseline</span></p>
<p>会发现，明明尺寸、display水平都是一样的，结果呢，两个却不在一个水平线上对齐，为什么呢？哈哈，上面的规范已经说明了一切。第一个框框里面没有内联元素，因此，基线就是容器的margin下边缘，也就是下边框下面的位置；而第二个框框里面有字符，纯正的内联元素，因此，第二个框框就是这些字符的基线，也就是字母x的下边缘了。于是，我们就看到了框框1下边缘和框框2里面字符<code>x</code>底边对齐的好戏。框框2有个小彩蛋，点击可以toggle其<code>innerHTML</code>，会发现，如果框框2里面没文字，就和框框1举案齐眉了。</p>
<p><span class="dib-baseline"></span> <span class="dib-baseline"></span></p>
<p>下面我们要做一件很有必要的事情，用来帮助我们理解上面复杂例子在<code>line-height</code>值为<code>0</code>后的表现，什么事情呢？哈，同境界模拟，我们也设置框框2的<code>line-height</code>值为<code>0</code>，于是，就会是下面这样的表现：</p>
<p><span class="dib-baseline"></span> <span class="dib-baseline" style="line-height:0;">x-baseline</span></p>
<p>知道框框2为何又下沉了一点吗？</p>
<p>因为字符实际占据的高度是由行高决定的，当行高变成0的时候，字符占据的高度也是<code>0</code>，此时，高度的起始位置就变成了字符content area的垂直中心位置，于是，文字就一半落在看看2的外面了。<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-29_235428.png" width="148" height="63" alt="犹抱琵琶半遮面" class="alignnone" /></p>
<p>由于文字字符上移了，自然基线位置(字母<code>x</code>的底边缘)也往上移动了，于是，两个框框的垂直落差就更大了。</p>
<p>OK，明白了上面的简单例子，也就能明白上面的复杂例子。紧接着，如果我们在最后一个占位的<code>&lt;i&gt;</code>元素后面新增同样的<code>x-baseline</code>字符，则：</p>
<div style="text-align: justify;max-width:500px;background-color:#E5EDFF;line-height:0;" class="outline"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix"></i> <i class="justify-fix"></i> <i class="justify-fix"></i>x-baseline</div>
<p>大家是不是就可以明白原因所在啦！</p>
<p>额~居然还有小伙伴皱眉头，那我再用文字解释下：<br />
现在行高<code>line-height</code>是<code>0</code>, 则最后的<code>x-baseline</code>的垂直中线就和上面一列的图片对齐，而基线呢，就在中线下面差不多半个x的高度地方，而这个高度落差就是最后图片和容器的间隙高度值，因为前面的<code>&lt;i class="justify-fix"&gt;</code>是个空元素，基线是自身的底部，哈哈，造业啊！<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-30_000413.png" width="184" height="99" alt="基线对齐造成的间隙" class="alignnone" /></p>
<p>OK，一旦知道了现象的本质，我们就能轻松对症下药了！要么改造占位<code>&lt;i&gt;</code>元素的基线、要么改造“幽灵空白节点”的基线位置、要么使用其他<code>vertical-align</code>对齐方式~</p>
<p>首先，来个最有意思的方法，对吧，<strong>改造占位<code>&lt;i&gt;</code>元素的基线</strong>。这个很简单，对吧，只要在空的<code>&lt;i&gt;</code>元素里面随便放几个字符就可以了，例如，里面有个<code>x</code>：</p>
<div style="text-align: justify;max-width:500px;background-color:#E5EDFF;line-height:0;" class="outline"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix"></i> <i class="justify-fix"></i> <i class="justify-fix">x</i>x-baseline</div>
<p>会发现，间隙没有了！<img src="http://mat1.gtimg.com/www/mb/images/face/4.gif" align="absmiddle" height="24"> 为什么呢？哈哈，因为<code>&lt;i&gt;</code>元素的基线和“幽灵空白节点”的基线位置现在一致了，没有了错位，自然就不会有间隙啦！</p>
<p><strong>改造“幽灵空白节点”的基线位置</strong>，哈哈，使用<code>font-size</code>，字体足够小时，基线和中线会重合在一起，什么时候字体足够小呢，就是<code>0</code>. 于是，CSS代码(<code>line-height</code>如果是相对值，<code>line-height:0</code>也可以省掉)：</p>
<div class="zxx_code">
<pre>div { font-size: 0; }</pre>
</div>
<div style="text-align: justify;max-width:500px;background-color:#E5EDFF;font-size:0;" class="outline"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix"></i> <i class="justify-fix"></i> <i class="justify-fix"></i></div>
<p><strong>使用其他<code>vertical-align</code>对齐方式</strong>，就是让两端对齐的列表元素<code>vertical-align:top/bottom/...</code>之类。</p>
<div class="zxx_code">
<pre>div { <span style="color:#cd0000;">line-height: 0;</span> }
.justify-fix { display: inline-block; width: 128px; <span style="color:#cd0000;">vertical-align: top;</span> }</pre>
</div>
<p>最后的效果是：</p>
<div style="text-align: justify;max-width:500px;background-color:#E5EDFF;line-height:0;" class="outline"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix" style="vertical-align:top;"></i> <i class="justify-fix" style="vertical-align:top;"></i> <i class="justify-fix" style="vertical-align:top;"></i></div>
<p>恩恩，各种方法都完美解决了垂直间隙的问题，来，各个大大的赞！</p>
<h3>四、基友关系暴露之后</h3>
<p><img src="http://image.zhangxinxu.com/image/blog/201508/liuye-hujun.jpg" width="240" height="168" alt="好基友一辈子" class="alignnone" /></p>
<p>至此，<code>vertical-align</code>和<code>line-height</code>的断背基友关系算是彻底暴露了，而且，从行为表现上来看，<code>line-height</code>是攻，<code>vertical-align</code>是个受。而很多内联元素的行为表现，就是这对基友搞七搞八一起搞出来的。</p>
<p>以前，关系处于地下的时候，我们可能不会明白，为何男厕所的卷纸用得比女厕所还快；但是，现在关系暴露了，很多以前我们想不明白的事情一下子就豁然开朗了。</p>
<p>因此，我们要以正确地心态去看待这对好基友，毕竟，他们可以CSS届非常重要的两个主力大将。</p>
<p>本文牵扯的知识点甚多，建议大家如果想在重构领域有所造诣，很多基本的却很深入的东西是很有必要弄透的。篇幅有限，有不少知识点都是一笔带过的，大家若有疑问，可以自己去检索与研究，例如，<code>vertical-align</code>各个值的规范解释，内联盒子模型，等等。也欢迎各种方式交流。</p>
<p>文章都是周末熬夜写的，你知道的，现在不是当年，眼皮像灌了水银，因此，文章有表述或书写错误的地方在所难免，欢迎指正！</p>
<p>感谢阅读，周末愉快！另外祝贺中国队400米接力获得银牌。</p>
<p><script>var funImgVt = function(input) { var imgvt = document.getElementById("imgVt");if(imgvt) { imgvt.style.verticalAlign=input.value; } };</script><br />
本文为原创文章，包含脚本行为和样式控制，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4925">http://www.zhangxinxu.com/wordpress/?p=4925</a></p>
<p>（本篇完）</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:100:"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/feed/";}s:5:"slash";a:1:{s:8:"comments";s:2:"19";}s:7:"summary";s:602:"<a href="http://www.zhangxinxu.com/wordpress/?p=4925" title="点击查看本文"><img src="http://image.zhangxinxu.com/image/blog/201508/covers-line-height-vertical-align.jpg" width="550" height="170" class="imgpad mb10" alt="CSS深入理解vertical-align和line-height的基友关系"></a>
本文深入探讨vertical-align和line-height之间的关系，属于中长篇，有很多其他地方看不到的知识点。实例效果就在文章页面上，因此，请使用合适的浏览器查看本文。截图丰富，源代码展示详尽，相信本文的内容会对您的学习有所帮助的。";s:12:"atom_content";s:35779:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4925">http://www.zhangxinxu.com/wordpress/?p=4925</a></p>
<h3>一、想死你们了</h3>
<p>几个星期没有写文章了，好忙好痒；个把月没有写长篇了，好忙好想；半个季度没在文章中唠嗑了，好痒好想。</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201508/fengong.jpg" width="300" height="199" class="alignnone" /></p>
<p>后面一栋楼有对夫妻在吵架，声音雄浑有力，交锋酣畅淋漓，还以为只有小乡镇才有这架势，哦，突然想起来，我就是住在上海郊外的小乡镇上。</p>
<p>刚刚买了几十股京东的股票，第一次玩这个，看好京东的发展。其实股价21的时候就打算入手了，但是，转外汇的时候，提示，要工作时间。然后一忙二忘，等现在入的时候，已经涨了20%多了，科科，肥皂弄人啊！写到这里的时候，忍不住拿出手机一看，哎呦，不错哦，盈利28刀，孩子的半罐奶粉钱有了，哈哈！<img src="http://mat1.gtimg.com/www/mb/images/face/28.gif" align="absmiddle" height="24"></p>
<p>说起肥皂，让我想起了《监狱学院》，科科~</p>
<p><img src="http://ww1.sinaimg.cn/bmiddle/9e6b7fdbjw1eui7bv9u8yg206y04dx6q.gif" width="250" height="157" alt="肥皂基友" class="alignnone" /></p>
<p>原来，肥皂和基友的传说已经传播到了11区。岂止啊，除了2次元，代码次元也深受其爱，比方说CSS届的<code>vertical-align</code>和<code>line-height</code>就是典型的表面上看上去大相径庭，实际上是大进后庭的断背好基友啊！</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201508/gouxue.jpg" width="320" height="209" class="alignnone" /></p>
<p>没错，就是这么狗血！</p>
<p>乡下人不打诳语，下面我就好好跟大家八卦下，<code>vertical-align</code>和<code>line-height</code>之间令人发指的基友关系！</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201508/enen.gif" width="100" height="100" alt="恩恩" class="alignnone" /></p>
<h3>二、表现明显的断背基情</h3>
<p>众所周知，<code>vertical-align</code>支持很多属性值，足足可以组成一个足球队了：</p>
<div class="zxx_code">
<pre><span style="color:green;">/* 关键字值 */</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> sub<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> super<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> text-top<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> text-bottom<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> bottom<span class="token punctuation">;</span>

<span style="color:green;">/* &lt;长度&gt; 值 */</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> 10em<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>

<span style="color:green;">/* &lt;百分比&gt; 值 */</span>
<span style="color:#cd0000;">vertical-align: 10%;</span>

<span style="color:green;">/* 全局值 */</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span>
<span class="token property">vertical-align</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span></pre>
</div>
<p>其中，有个属性值暴露了<code>vertical-align</code>和<code>line-height</code>之间的基友关系，大家猜猜看是哪个属性值？</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201508/whats-s.png" width="240" height="156" alt="想不明白" class="alignnone" /></p>
<p>哇塞，好厉害！居然被大家一眼就看出来了，没错，就是“百分比值”。</p>
<p><code>vertical-align</code>的百分比值不是相对于字体大小或者其他什么属性计算的，而是相对于<code>line-height</code>计算的。举个简单的例子，如下CSS代码：</p>
<div class="zxx_code">
<pre>{
  line-height: 30px;
  vertical-align: -10%;
}</pre>
</div>
<p>实际上，等同于：</p>
<div class="zxx_code">
<pre>{
  line-height: 30px;
  vertical-align: <span style="color:#cd0000;">-3px;</span>    <span style="color:green;">/* = 30px <span class="fs">*</span> -10% */</span>  
}</pre>
</div>
<p>CSS属性何其多，偏偏跟<code>line-height</code>有一腿，这不是有基情那是什么？</p>
<p><span class="s">//zxx: IE6/IE7浏览器下的vertical-align的百分比值不支持小数line-height</span></p>
<h3>三、背地里无处不在的基友关系</h3>
<blockquote><p>//zxx: <strong>注意</strong>，<code>vertical-align</code>和<code>line-height</code>的地下基友关系从HTML5文档声明开始的，因此，以下探讨的现象，都是在页面为HTML5声明前提下，类似下面的doctype:</p>
<div class="zxx_code">
<pre>&lt;!doctype html>
&lt;html></pre>
</div>
<p>另外，下面很多效果直接就是真实演示，因此，请使用现代浏览器观摩下面的内容。如果发现某些行为与描述不匹配，且浏览器正常，那可能是因为你访问的并不是<a href="http://www.zhangxinxu.com/wordpress/?p=4925">原出处</a>。</p></blockquote>
<p><strong style="display:block;padding-top:10px;"><big>① 基本现象</big></strong></p>
<p>要八卦<code>vertical-align</code>和<code>line-height</code>之间的关系，我们不妨从一个极其简单的现象入手。假设，我们有一个<code>&lt;div&gt;</code>标签，然后，里面有一张<code>&lt;img&gt;</code>图片，我们的HTML代码就是这样子：</p>
<div class="zxx_code">
<pre>&lt;div>&lt;img src="mm1.jpg">&lt;/div></pre>
</div>
<p>然后，表现就是一张图片呈现，类似下面这样：</p>
<div><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191"></div>
<p>恩，看上去很正常，一切都是理所当然。然而，如果我们给这个<code>&lt;div&gt;</code>元素增加一个背景色，例如淡蓝色：</p>
<div class="zxx_code">
<pre>&lt;div style="background-color:#e5edff;">&lt;img src="mm1.jpg">&lt;/div></pre>
</div>
<p>则会是下面这样：</p>
<div style="background-color:#E5EDFF;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191"></div>
<p>会发现图片下面有一段空白空间：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-29_085105.png" width="341" height="81" alt="图片与空白" class="alignnone" /></p>
<p>想必大家都遇到过类似问题，不知大家有没有思考过，为什么图片下面有留有一段间隙呢？<img src="http://mat1.gtimg.com/www/mb/images/face/32.gif" align="absmiddle" height="24"></p>
<p>实际上，这段空白间隙就是<code>vertical-align</code>和<code>line-height</code>携手搞的鬼！</p>
<p>首先，大家一定要意识到这么一点：<strong>对于内联元素，vertical-align与line-height虽然看不见，但实际上「到处都是」！</strong></p>
<p><img src="http://image.zhangxinxu.com/image/blog/201508/anywhere.jpg" width="320" height="175" alt="到处都是" class="alignnone" /></p>
<p>因此，对于内联元素各种想得通或者想不通的行为表现，基本上都可以用<code>vertical-align</code>和<code>line-height</code>来解释，以及进行行为矫正，然而，要深入理解这些行为表现，还是需要狠花一番功夫的，因此，下面的内容，请确保你有半小时充足时间细细阅读，别的地方可是看不到的。<img src="http://mat1.gtimg.com/www/mb/images/face/14.gif" align="absmiddle" height="24"></p>
<p><strong style="display:block;padding-top:10px;"><big>② 幽灵空白节点</big></strong></p>
<p><strong>「幽灵空白节点」</strong>这个概念我自己命名的，注意，是我个人YY出来的，是我自己便于理解某些行为特征提出的概念。规范可能有类似的概念，但名称并非这个。 W3C规范虽然有很多行为的解释和说明，但是，毕竟官方的东西，要求严谨正式，但是，也会有太干太涩的感觉。如果快速掌握和理解这些行为表现呢？就我个人而言，从两方面入手：<strong>1.情感化认知</strong>；<strong>2. 具象化思维</strong>。</p>
<p>例如，我称<code>vertical-align</code>和<code>line-height</code>为好基友（包括以前称浮动和绝对定位是兄弟），就是“情感化认知”；而这里的「幽灵空白节点」就是“具象化思维”。</p>
<p>那「幽灵空白节点」是个什么意思呢？</p>
<p><strong>在HTML5文档声明下，块状元素内部的内联元素的行为表现，就好像块状元素内部还有一个（更有可能两个-前后）看不见摸不着没有宽度没有实体的空白节点，这个假想又似乎存在的空白节点，我称之为“幽灵空白节点”。</strong> <span class="s">//zxx: 自己捣腾的概念，不是权威，欢迎其他小伙伴反馈权威解释</span></p>
<p>抽象了这个概念，绝对定位与<code>text-align</code>的一些行为表现，以及这里的行为表现，就好理解了。</p>
<p>还是上面的图片下边缘留空隙的例子，实际上，这种行为表现，就跟图片前面或者后面有一个宽度为0的空格元素表现是一致的。但是，空格是透明的，为了便于大家理解，我就直接使用很明显的匿名inline box, 也就是字符代替。如下，大家会发现，图片下面的间隙，依旧是那个间隙。</p>
<div style="background-color:#E5EDFF;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191">zxx</div>
<p>下面要解释这个间隙就好解释了。下面，我们让新增的文本inline-block化，然后弄个白色背景，显示其占据的高度。</p>
<div style="background-color:#E5EDFF;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191"><span style="background-color:#fff;display:inline-block;">zxx</span></div>
<p>会发现，图片下面的间隙，依旧是那个间隙。但是，我们的理解就好理解了。回答下面几个问题，我们就知道表现的原因了：</p>
<ol>
<li><code>vertical-align</code>默认的对齐方式是？</li>
<li>后面zxx文字的高度从何而来？</li>
</ol>
<p>上面2个问题就很简单了：</p>
<ol>
<li><code>vertical-align</code>默认值是<code>baseline</code>, 也就是基线对齐。而基线是什么，基线就是字母X的下边缘（参见“<a href="http://www.zhangxinxu.com/wordpress/2015/06/about-letter-x-of-css/">字母’x’在CSS世界中的角色和故事</a>”一文）。所以，妹子图片的下边缘就和后面zxx中的字母<code>x</code>下边缘对齐（见下图）。而字符<code>zxx</code>本身是有高度的，对吧，于是，图片下面就留空了。<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-29_141809.png" width="522" height="340" alt="图片底边和字母x底边对齐" class="alignnone" /></li>
<li>而<code>zxx</code>文字的高度是由行高决定的。</li>
</ol>
<p>因此，简单的图片下面留白行为表现，本质上，就是<code>vertical-align</code>和<code>line-height</code>背地里搞基造成的。</p>
<p>知道了问题的原因，我们就可以对症下药，准确搞定图片下面我们不希望看到的间隙。怎么搞呢？一对基友，<code>vertical-align</code>和<code>line-height</code>我们随便搞定一个就可以了。</p>
<p>比方说<code>vertical-align</code>.</p>
<p><strong>1. 让vertical-align失效</strong><br />
图片默认是<code>inline</code>水平的，而<code>vertical-align</code>对块状水平的元素无感。因此，我们只要让图片<code>display</code>水平为<code>block</code>就可以了，我们可以直接设置<code>display</code>或者浮动、绝对定位等（如果布局允许）。例如：</p>
<div class="zxx_code">
<pre>img { display: block; }</pre>
</div>
<p>则妹子就会变这样：</p>
<div style="background-color:#E5EDFF;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" style="display:block;" height="191"></div>
<p>下面的空隙不见了。</p>
<p><strong>2. 使用其他vertical-align值</strong><br />
告别<code>baseline</code>, 取用其他属性值，比方说<code>bottom</code>/<code>middle</code>/<code>top</code>都是可以的。</p>
<p id="radioVT"> <input type="radio" id="radioBottom" value="bottom" name="radiovt" onclick="funImgVt(this)"><label for="radioBottom" class="mr20">vertical-align:bottom</label> <input type="radio" id="radioMiddle" value="middle" name="radiovt" onclick="funImgVt(this)"><label for="radioMiddle" class="mr20">vertical-align:middle</label> <input type="radio" id="radioTop" value="top" name="radiovt" onclick="funImgVt(this)"><label for="radioTop">vertical-align:top</label> </p>
<div style="background-color:#E5EDFF;"><img id="imgVt" src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191"><span style="background-color:#fff;display:inline-block;">zxx</span></div>
<p><strong>3. 直接修改line-height值</strong><br />
下面的空隙高度，实际上是文字计算后的行高值和字母x下边缘的距离。因此，只要行高足够小，实际文字占据的高度的底部就会在x的上面，下面没有了高度区域支撑，自然，图片就会有容器底边贴合在一起了。比方说，我们设置行高5像素：</p>
<div class="zxx_code">
<pre>div { line-height: 5px; }</pre>
</div>
<div style="background-color:#E5EDFF; line-height: 5px;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191"><span style="background-color:#fff;display:inline-block;">zxx</span></div>
<p><strong>4. line-height为相对单位，font-size间接控制</strong><br />
如果<code>line-height</code>是相对单位，例如<code>line-height:1.6</code>或者<code>line-height:160%</code>之类，也可以使用<code>font-size</code>间接控制，比方说来个狠的，<code>font-size</code>设为大鸡蛋<code>0</code>, 本质上还是改变<code>line-height</code>值.</p>
<div class="zxx_code">
<pre>div { font-size: 0; }</pre>
</div>
<div style="background-color:#E5EDFF; font-size: 0;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191"><span style="background-color:#fff;display:inline-block;">zxx</span></div>
<p><strong style="display:block;padding-top:10px;"><big>③ 基本现象衍生：垂直居中</big></strong></p>
<p>由于「幽灵空白节点」的存在，因此，我们可以进一步衍生，实现其他更实用的效果，比方说任意尺寸的图片（或者内联块状化的多行文字）的垂直居中效果。就是借助本文的两位男主角，<code>vertical-align</code>和<code>line-height</code>。</p>
<p>你想啊，图片后面（前面）有个类似空格字符的节点，然后就能响应<code>line-height</code>形成高度，此时，图片再来个<code>vertical-align:middle</code>，当当当当，就可以和这个被行高撑高的「幽灵空白节点」(近似)垂直对齐了。</p>
<p>例如：</p>
<div class="zxx_code">
<pre>div { line-height: 240px; }
img { vertical-align: middle; }</pre>
</div>
<p>然后就会这样子：</p>
<div style="background-color:#E5EDFF; line-height: 240px;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191" style="vertical-align: middle;"></div>
<p>不过上面的效果并不是完全的垂直居中，只是近似（稍微仔细看可以看出来）。为什么只是近似呢？那是因为「幽灵空白节点」高度行高撑开，其垂直中心是字符content area的中心，而对于字符<code>x</code>而言，都是比绝对中心位置要下沉的（不同字体下沉幅度不一样），换句更易懂的描述就是<code>x</code>的中心位置都是在字符内容区域高度中心点的下方，而这上下的偏差就是这里图片上下间距的偏差。</p>
<p>我特意把字符<code>x</code>使用大字号演示了下：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-31_130708.png" width="266" height="181" alt="中线位置并不是字符内容的绝对居中位置" class="alignnone" /></p>
<p>换句更简单的话说就是：middle中线位置(字符<code>x</code>的中心)并不是字符内容的绝对居中位置。两个位置的偏差就是图片近似居中的偏差。</p>
<p>嘛嘛，单纯的文字还是太苍白了，截个图示意下吧：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-29_214832-new.png" width="428" height="277" alt="近似垂直居中演示" class="alignnone" /></p>
<p>因此，要想完全垂直居中，最先想到的方法就是让后面的“幽灵字符”也是<code>vertical-align:middle</code>，然而，呵呵，既然称之为“幽灵”就表示不会受非继承特性的属性影响，所以，根本没法设置<code>vertical-align:middle</code>，除非你自己创建一个显示的内联元素。</p>
<p>我们就没有办法了吗？当然不是，“幽灵字符”可以受具有继承特性的CSS属性影响，于是，我们可以通过其他东西来做调整，让字符的中线和字符内容中心线在一起，或者说在一个位置上就可以了。有人可能要疑问了，这能行吗？啊，是可以的。</p>
<p>怎么搞？很简单，<code>font-size:0</code>, 因此此时content area高度是0，各种乱七八糟的线都在高度为0的这条线上，绝对中心线和中线重合。自然全垂直居中：</p>
<div class="zxx_code">
<pre>div { line-height: 240px; font-size: 0; }
img { vertical-align: middle; }</pre>
</div>
<p>结果是：</p>
<div style="background-color:#E5EDFF; line-height: 240px; font-size: 0;"><img src="http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg" height="191" style="vertical-align: middle;"></div>
<p>处女座的你，是不是看过去舒服多啦！？<img src="http://mat1.gtimg.com/www/mb/images/face/29.gif" align="absmiddle"  height="24"></p>
<p>这种通过<code>line-height</code>定高，元素<code>vertical-align:middle</code>垂直居中的方法不仅适用于现代浏览器，连IE7浏览器也是支持的：</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-29_222354.png" width="173" height="156" alt="IE7浏览器也支持" class="alignnone" /></p>
<p>不过和其他浏览器再使用上还是有些需要注意的地方，就是，HTML不能这样：</p>
<div class="zxx_code">
<pre><del>&lt;div>&lt;img src="mm1.jpg">&lt;/div></del></pre>
</div>
<p>而是需要在图片标签结束处留下空格后者换行：</p>
<div class="zxx_code">
<pre>&lt;div>&lt;img src="mm1.jpg"><span style="color:green;">&lt;!-- 这里要折行或空格 --&gt;</span>
&lt;/div></pre>
</div>
<p><strong style="display:block;padding-top:10px;"><big>④ 复杂现象</big></strong><br />
多年前曾分享过“<a href="http://www.zhangxinxu.com/wordpress/?p=1514">text-align:justify下列表的两端对齐布局</a>”的技术，其中，为了让任意个数的列表最后一行也是对齐排列，在列表最后会辅助列表等宽的空标签元素来占位，类似下面红色高亮HTML代码：</p>
<div class="zxx_code">
<pre>.justify-fix { display: inline-block; width: 128px; }</pre>
</div>
<div class="zxx_code">
<pre>&lt;div style="text-align: justify;">
    &lt;img src="img/mm1.jpg" width="128">
    &lt;img src="img/mm1.jpg" width="128">
    &lt;img src="img/mm1.jpg" width="128">
    &lt;img src="img/mm1.jpg" width="128">
    <span style="color:#cd0000;">&lt;i class="justify-fix">&lt;/i>
    &lt;i class="justify-fix">&lt;/i>
    &lt;i class="justify-fix">&lt;/i></span>
&lt;/div></pre>
</div>
<style>.justify-fix { display: inline-block; width: 128px; }.outline .justify-fix { outline: 1px dashed red; }</style>
<p>为了节约空间，我就使用小图示意：</p>
<div style="text-align: justify;max-width:500px;"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix"></i> <i class="justify-fix"></i> <i class="justify-fix"></i></div>
<p>同样的，在白色背景下，似乎看上去效果还不赖，但是，如果给<code>div</code>容器加个背景色~~</p>
<div style="text-align: justify;max-width:500px;background-color:#E5EDFF;"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix"></i> <i class="justify-fix"></i> <i class="justify-fix"></i></div>
<p>会惊讶的发现，下面多了很大一块间隙（如下截图）：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-29_230514.png" width="256" height="95" alt="大大的空白间隙" class="alignnone" /></p>
<p>为了便于大家看其究竟，我把占位<code>i</code>元素<code>outline</code>高亮下，于是，效果如下：</p>
<div style="text-align: justify;max-width:500px;background-color:#E5EDFF;" class="outline"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix"></i> <i class="justify-fix"></i> <i class="justify-fix"></i></div>
<p>结果会发现，上面巨大的空隙是由占位<code>i</code>元素上面和下面的间隙共同组成的。</p>
<p>下面问题来了：上面的间隙是如何产生的？下面的间隙是如何产生的？如果去除这些间隙呢？</p>
<p>很多时候，复杂问题是由简单问题组合而成的，实际上，这里的间隙现象的始作俑者和上面的简单现象一样，都是<code>vertical-align</code>和<code>line-height</code>搞基带来的不好的影响。</p>
<p>按照之前问题解决方法，我们可以直接来个<code>line-height:0</code>解决垂直间隙问题：</p>
<div class="zxx_code">
<pre>div { line-height: 0; }</pre>
</div>
<p>结果图片和图片之间的间隙是没有了，但是，图片和最后的占位元素之间依然有个几像素的间距，<img src="http://mat1.gtimg.com/www/mb/images/face/18.gif" align="absmiddle">，啊啊啊啊，这究竟是什么鬼？</p>
<div style="text-align: justify;max-width:500px;background-color:#E5EDFF;line-height:0;" class="outline"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix"></i> <i class="justify-fix"></i> <i class="justify-fix"></i></div>
<p>简单现象的背后往往有大的学问，接下来是本文的高潮了，究其原因，要说到inline-block元素和基线baseline之间的一些纠缠的关系。</p>
<p><strong style="display:block;padding-top:10px;"><big>⑤ inline-block和baseline</big></strong><br />
CSS2的可视化格式模型文档中有一么一段话：</p>
<blockquote><p>The baseline of an &#8216;inline-block&#8217; is the baseline of its last line box in the normal flow, unless it has either no in-flow line boxes or if its &#8216;overflow&#8217; property has a computed value other than &#8216;visible&#8217;, in which case the baseline is the bottom margin edge.</p></blockquote>
<p>英文看得眼睛大，于是我中文直译了下：</p>
<blockquote><p>&#8216;inline-block&#8217;的基线是正常流中最后一个line box的基线, 除非，这个line box里面既没有line boxes或者本身&#8217;overflow&#8217;属性的计算值而不是&#8217;visible&#8217;, 这种情况下基线是margin底边缘。</p></blockquote>
<p>这段文档中出现了很多专有名词<code>line box</code>, <code>line boxes</code>等，这些是内联盒子模型中的概念，是CSS进阶必备知识。我在“<a href="http://www.zhangxinxu.com/wordpress/?p=583">浮动深入理解(一)</a>”一文的中间穿插介绍了该模型。<span class="s">//zxx: 我现在后悔了，内联盒子模型当初应该直接独立成一篇文章，这样其他文章可以很干净地引用，所谓文章的模块化书写</span></p>
<p>如果大家没有足够精力去学习之，可以先看下面这张图：<br />
<img src="http://image.zhangxinxu.com/image/blog/201001/2010-01-20_230801.png" width="516" height="186" title="默认图文line boxes示意"></p>
<p>由于上面的译文是直译的，理解起来还是有些拗口，我使用通俗的话描述就是：<strong>一个inline-block元素，如果里面没有inline内联元素，或者overflow不是visible，则该元素的基线就是其margin底边缘，否则，其基线就是元素里面最后一行内联元素的基线。</strong></p>
<p>纳尼，还是没反应过来？</p>
<p>那我们看下面这个例子，应该就知道什么意思了。</p>
<p>两个同尺寸的<code>inline-block</code>水平元素，唯一区别就是一个空的，一个里面有字符，代码如下：</p>
<div class="zxx_code">
<pre>.dib-baseline {
  display: inline-block; width: 150px; height: 150px;
  border: 1px solid #cad5eb; background-color: #f0f3f9;
}</pre>
</div>
<div class="zxx_code">
<pre>&lt;span class="dib-baseline">&lt;/span>
&lt;span class="dib-baseline">x-baseline&lt;/span></pre>
</div>
<style>.dib-baseline { display: inline-block; width: 100px; height: 100px; border: 1px solid #cad5eb; background-color: #f0f3f9; }</style>
<p>结果，科科：</p>
<p><span class="dib-baseline"></span> <span class="dib-baseline" onClick="this.innerHTML=this.innerHTML? '': 'x-baseline'">x-baseline</span></p>
<p>会发现，明明尺寸、display水平都是一样的，结果呢，两个却不在一个水平线上对齐，为什么呢？哈哈，上面的规范已经说明了一切。第一个框框里面没有内联元素，因此，基线就是容器的margin下边缘，也就是下边框下面的位置；而第二个框框里面有字符，纯正的内联元素，因此，第二个框框就是这些字符的基线，也就是字母x的下边缘了。于是，我们就看到了框框1下边缘和框框2里面字符<code>x</code>底边对齐的好戏。框框2有个小彩蛋，点击可以toggle其<code>innerHTML</code>，会发现，如果框框2里面没文字，就和框框1举案齐眉了。</p>
<p><span class="dib-baseline"></span> <span class="dib-baseline"></span></p>
<p>下面我们要做一件很有必要的事情，用来帮助我们理解上面复杂例子在<code>line-height</code>值为<code>0</code>后的表现，什么事情呢？哈，同境界模拟，我们也设置框框2的<code>line-height</code>值为<code>0</code>，于是，就会是下面这样的表现：</p>
<p><span class="dib-baseline"></span> <span class="dib-baseline" style="line-height:0;">x-baseline</span></p>
<p>知道框框2为何又下沉了一点吗？</p>
<p>因为字符实际占据的高度是由行高决定的，当行高变成0的时候，字符占据的高度也是<code>0</code>，此时，高度的起始位置就变成了字符content area的垂直中心位置，于是，文字就一半落在看看2的外面了。<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-29_235428.png" width="148" height="63" alt="犹抱琵琶半遮面" class="alignnone" /></p>
<p>由于文字字符上移了，自然基线位置(字母<code>x</code>的底边缘)也往上移动了，于是，两个框框的垂直落差就更大了。</p>
<p>OK，明白了上面的简单例子，也就能明白上面的复杂例子。紧接着，如果我们在最后一个占位的<code>&lt;i&gt;</code>元素后面新增同样的<code>x-baseline</code>字符，则：</p>
<div style="text-align: justify;max-width:500px;background-color:#E5EDFF;line-height:0;" class="outline"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix"></i> <i class="justify-fix"></i> <i class="justify-fix"></i>x-baseline</div>
<p>大家是不是就可以明白原因所在啦！</p>
<p>额~居然还有小伙伴皱眉头，那我再用文字解释下：<br />
现在行高<code>line-height</code>是<code>0</code>, 则最后的<code>x-baseline</code>的垂直中线就和上面一列的图片对齐，而基线呢，就在中线下面差不多半个x的高度地方，而这个高度落差就是最后图片和容器的间隙高度值，因为前面的<code>&lt;i class="justify-fix"&gt;</code>是个空元素，基线是自身的底部，哈哈，造业啊！<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-30_000413.png" width="184" height="99" alt="基线对齐造成的间隙" class="alignnone" /></p>
<p>OK，一旦知道了现象的本质，我们就能轻松对症下药了！要么改造占位<code>&lt;i&gt;</code>元素的基线、要么改造“幽灵空白节点”的基线位置、要么使用其他<code>vertical-align</code>对齐方式~</p>
<p>首先，来个最有意思的方法，对吧，<strong>改造占位<code>&lt;i&gt;</code>元素的基线</strong>。这个很简单，对吧，只要在空的<code>&lt;i&gt;</code>元素里面随便放几个字符就可以了，例如，里面有个<code>x</code>：</p>
<div style="text-align: justify;max-width:500px;background-color:#E5EDFF;line-height:0;" class="outline"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix"></i> <i class="justify-fix"></i> <i class="justify-fix">x</i>x-baseline</div>
<p>会发现，间隙没有了！<img src="http://mat1.gtimg.com/www/mb/images/face/4.gif" align="absmiddle" height="24"> 为什么呢？哈哈，因为<code>&lt;i&gt;</code>元素的基线和“幽灵空白节点”的基线位置现在一致了，没有了错位，自然就不会有间隙啦！</p>
<p><strong>改造“幽灵空白节点”的基线位置</strong>，哈哈，使用<code>font-size</code>，字体足够小时，基线和中线会重合在一起，什么时候字体足够小呢，就是<code>0</code>. 于是，CSS代码(<code>line-height</code>如果是相对值，<code>line-height:0</code>也可以省掉)：</p>
<div class="zxx_code">
<pre>div { font-size: 0; }</pre>
</div>
<div style="text-align: justify;max-width:500px;background-color:#E5EDFF;font-size:0;" class="outline"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix"></i> <i class="justify-fix"></i> <i class="justify-fix"></i></div>
<p><strong>使用其他<code>vertical-align</code>对齐方式</strong>，就是让两端对齐的列表元素<code>vertical-align:top/bottom/...</code>之类。</p>
<div class="zxx_code">
<pre>div { <span style="color:#cd0000;">line-height: 0;</span> }
.justify-fix { display: inline-block; width: 128px; <span style="color:#cd0000;">vertical-align: top;</span> }</pre>
</div>
<p>最后的效果是：</p>
<div style="text-align: justify;max-width:500px;background-color:#E5EDFF;line-height:0;" class="outline"> <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg">  <img src="http://image.zhangxinxu.com/image/study/s/s128/mm1.jpg"> <i class="justify-fix" style="vertical-align:top;"></i> <i class="justify-fix" style="vertical-align:top;"></i> <i class="justify-fix" style="vertical-align:top;"></i></div>
<p>恩恩，各种方法都完美解决了垂直间隙的问题，来，各个大大的赞！</p>
<h3>四、基友关系暴露之后</h3>
<p><img src="http://image.zhangxinxu.com/image/blog/201508/liuye-hujun.jpg" width="240" height="168" alt="好基友一辈子" class="alignnone" /></p>
<p>至此，<code>vertical-align</code>和<code>line-height</code>的断背基友关系算是彻底暴露了，而且，从行为表现上来看，<code>line-height</code>是攻，<code>vertical-align</code>是个受。而很多内联元素的行为表现，就是这对基友搞七搞八一起搞出来的。</p>
<p>以前，关系处于地下的时候，我们可能不会明白，为何男厕所的卷纸用得比女厕所还快；但是，现在关系暴露了，很多以前我们想不明白的事情一下子就豁然开朗了。</p>
<p>因此，我们要以正确地心态去看待这对好基友，毕竟，他们可以CSS届非常重要的两个主力大将。</p>
<p>本文牵扯的知识点甚多，建议大家如果想在重构领域有所造诣，很多基本的却很深入的东西是很有必要弄透的。篇幅有限，有不少知识点都是一笔带过的，大家若有疑问，可以自己去检索与研究，例如，<code>vertical-align</code>各个值的规范解释，内联盒子模型，等等。也欢迎各种方式交流。</p>
<p>文章都是周末熬夜写的，你知道的，现在不是当年，眼皮像灌了水银，因此，文章有表述或书写错误的地方在所难免，欢迎指正！</p>
<p>感谢阅读，周末愉快！另外祝贺中国队400米接力获得银牌。</p>
<p><script>var funImgVt = function(input) { var imgvt = document.getElementById("imgVt");if(imgvt) { imgvt.style.verticalAlign=input.value; } };</script><br />
本文为原创文章，包含脚本行为和样式控制，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4925">http://www.zhangxinxu.com/wordpress/?p=4925</a></p>
<p>（本篇完）</p>
";s:14:"date_timestamp";i:1440866856;}i:1;a:14:{s:5:"title";s:50:"面向设计的半封装web组件开发(概要版)";s:4:"link";s:94:"http://www.zhangxinxu.com/wordpress/2015/08/semi-package-web-component-development-for-design/";s:8:"comments";s:103:"http://www.zhangxinxu.com/wordpress/2015/08/semi-package-web-component-development-for-design/#comments";s:7:"pubdate";s:31:"Tue, 11 Aug 2015 19:52:06 +0000";s:2:"dc";a:1:{s:7:"creator";s:10:"张 鑫旭";}s:8:"category";s:35:"web综合UI封装组件面向设计";s:4:"guid";s:43:"http://www.zhangxinxu.com/wordpress/?p=4892";s:11:"description";s:628:"目前很多Team和团队都有自己的一套web组件体系，模块化开发，封装良好，上手简单。然后希望该web组件可以应用到接手的各个项目中，节约日后的开发成本。甚至考虑开源。
这其实是很棒的，但是呢，希望一套web组件各个项目通用？在我看来，除非对项目没有追求，否则不太现实。
但是呢，希望一套web组件各个项目通用？在我看来，除非对项目没有追求，否则就是妄想。
为什么说传统web组件想一统天下不现实呢？因为就像秦始皇一统天下一样，要牺牲很多很多东西...";s:7:"content";a:1:{s:7:"encoded";s:14172:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4892">http://www.zhangxinxu.com/wordpress/?p=4892</a></p>
<p>本文完整版地址已经在发表在ISUX团队官方博客：<a href="http://isux.tencent.com/half-package-web-components-for-design.html" target="_blank">http://isux.tencent.com/half-package-web-components-for-design.html</a> 欢迎围观，欢迎评论交流！</p>
<h3>一、传统web组件的妄想</h3>
<p>目前很多Team和团队都有自己的一套web组件体系，模块化开发，封装良好，上手简单。然后希望该web组件可以应用到接手的各个项目中，节约日后的开发成本。甚至考虑开源。</p>
<p>这其实是很棒的，但是呢，希望一套web组件各个项目通用？在我看来，除非对项目没有追求，否则不太现实。</p>
<p>但是呢，希望一套web组件各个项目通用？在我看来，除非对项目没有追求，否则就是妄想。</p>
<p>为什么说传统web组件想一统天下不现实呢？因为就像秦始皇一统天下一样，要牺牲很多很多东西。</p>
<ol>
<li><strong>牺牲代码量</strong>
<p>web组件要想适用于各个项目，必然要考虑各个项目的各种应用场景，于是，我们势必要暴露很多很多的API, 否则根本应付不来。拿模态弹框举例：有的项目可以拖拽，有的没有关闭按钮，有的黑色蒙版可以点击等，于是，我们至少新增类似<code>dragable</code>, <code>colsable</code>, <code>clickable</code>这些API. 就算这样，还是会遇到一些特殊的需求，例如，弹框位置上下比例<code>2:3</code>. 业界通常的做法是二次封装，没错，二次封装，就是在原来就很大很重的web组件基础上，再捣腾一些代码。<img src="http://mat1.gtimg.com/www/mb/images/face/36.gif" align="absmiddle" height="24"></p>
</li>
<li><strong>牺牲代码质量</strong>
<p>有些项目并不需要兼容老的IE浏览器，UI工程师那里有质量更好更简单的解决方案。但是，抱歉，web组件在那里，只能委曲求全使用又老又臭的传统兼容实现。</p>
<p>场景支持多，代码多，逻辑多，代码容易乱，也更容易出bug。</p>
</li>
<li><strong>牺牲设计和体验</strong>
<p>web组件要想多项目使用且封装良好，势必要对UI层进行抽象。但是，UI层一旦抽象了，就等于失去了创新的活力，等于死去：</p>
<p><img src="http://isux.tencent.com/wp-content/uploads/2015/05/20150529160705192.png" width="588" height="168" alt="关于UI逻辑抽象的言论" style="border:1px solid #ccc;"></p>
<p>而现代web, 随着CSS3, SVG等现代web技术日趋成熟，我们在UI展现层能够做的事件就非常多，更新变化也更加快。要是这块的创新被组件限制，而其他竞品在组件UI细节上不断闪现人性化、情感化的创新之处，交互也更加流畅与舒适。势必会在新的web发展浪潮中被冲到沙滩上。</p>
<p><img src="http://isux.tencent.com/wp-content/uploads/2015/05/201505291703464.png" width="588" height="209" alt="关于YUI终止开发的言论" style="border:1px solid #ccc;"></p>
</li>
<li>
    	<strong>组件颗粒度把控</strong></p>
<p>由于项目差异，以及多人合作等原因，组件颗粒度的把控总是没法恰到好处，拿捏得当。</p>
</li>
<li><strong>跨部门合作</strong>
<p>组件大而重，看上去上手简单，实际上，API这么多，谁记得住！我们这边有切实的案例的，某项目质量非常高，无论是UI, 交互和体验，各方的评价也很好。后来我们要开始一个新的且比较大的项目，就希望把已有项目很多好的东西借鉴过来。设计还是同样的一批设计师，但是，前端团队却换了一拨人。理想的状态应该是这样的，新项目的前端团队，直接使用之前项目这边的前端UI组件(除了颜色，尺寸什么的都是一模一样的)，less的变量文件颜色一改，分分钟无缝转移，多棒啊！</p>
<p>但是，最后的结果是，新的前端团队放弃了之前项目的前端解决方案，还是使用了自己的简洁派做法，seajs + jQuery + &#8230;<img src="http://mat1.gtimg.com/www/mb/images/face/36.gif" align="absmiddle" height="24"></p>
</li>
</ol>
<p>但是，不可否认，web组件对于一般的、尤其视觉这块要求不高的项目，是很有价值的。只是在应付要求较高的web项目的时候，显得还有很大的改进空间。下面问题来了：难道我们要为了一些交互体验和视觉效果放弃这些web组件吗？</p>
<p>答案显而易见，web组件还是需要的。但是，也不能像现在这样，直接使用。我们需要顺应时势，转换思维，试试走“<strong>面向设计的半封装web组件</strong>”。</p>
<h3>二、转换思维，面向设计</h3>
<p>传统web组件是一般都是由前端开发完成，关注点更多在功能与协作上。虽然也有设计支持，但还是比较弱的。于是，当设计师进行某些微创新的时候，往往就要受制于过于组装的组件的限制。比方说设计师对dialog弹框进行了一些微创新，比方说下面这样的(无标题无关闭大背景色块)：</p>
<p><img src="http://isux.tencent.com/wp-content/uploads/2015/05/20150528171215569.png" width="460" height="207" alt="一个提示框效果示意"></p>
<p>去问开发可行性，结果，开发来了一句：“哎呀，这个结构我们目前的弹框组件不支持！”我相信这种场景很多同学都遇到过吧~最后，基本上都是设计师妥协，<img src="http://mat1.gtimg.com/www/mb/images/face/193.gif" align="absmiddle" height="23">还是使用传统弹框交互或布局。所以，坊间才有“苦逼的设计师”的传闻。</p>
<p>对于一个重视体验和设计的企业或团队而言，这是极为不合理的。居然下游决定上游，技术的目的本身就是为设计服务的，结果反过来限制设计的发挥，这岂不是本末倒置！</p>
<p>因此，我们有必要转换思维，面向设计。也就是说，让设计师自由地设计，我们做技术的，为之服务，针对特定项目，去调整我们的web组件，剔除不必要的API, 尽量将UI层内容分离出来，交给设计师和UI工程师，精简我们的组件，同时保证组件的UI品质。</p>
<h3>三、转换思维，分离与半封装</h3>
<p>面向设计的web组件，可以说是根据当前设计量身定制的web组件。大家都知道，定制这东西，虽然最后的效果好，但是人力成本也高啊！怎么权衡呢？</p>
<p>两点：分离和半封装。</p>
<p><strong>1. 分离</strong></p>
<p>尽可能将传统组件的API释放出来，交给HTML以及CSS。同时UI层内容从组件中剥离，方便UI工程师做调整，注意是内部调整，不是传统的模板API。</p>
<p><strong>2. 半封装</strong></p>
<p>此半封装是多个项目平行对比而言的，非UI侧的核心功能还是封装良好的，UI层可变，故称之为半封装。</p>
<p>上面两点使用图示表示就是：</p>
<p><img src="http://isux.tencent.com/wp-content/uploads/2015/07/20150730172621262.png" width="460" height="328" alt="web组件分离和半封装示意"></p>
<p>于是，我们最终的人力成本和以前其实差不多（核心模块都是一样的），传统组件是二次封装，半封装组件是内部定制，实际上都是类似的工作，但是，后者代码量和UI质量要高很多很多：</p>
<p><img src="http://isux.tencent.com/wp-content/uploads/2015/07/20150730173309128.png" width="590" height="328" alt="两种组件模式的前期工作"></p>
<p>这里，有必要加粗强调下：<strong>此“半封装”是针对不同设计风格的项目而言，对于某一个具体项目，其web组件还是完全封装的，还是有成熟的API接口的</strong>。</p>
<h3>四、使用面向设计半封装组件的前提</h3>
<ol>
<li><strong>重要项目、希望成为精品的项目</strong> 因为这样的项目需要面向设计，而不仅仅满足功能，任由开发任性。</li>
<li><strong>设计和UI工程师要给力</strong> 如果设计师和开发一个水平，当我没说；如果UI工程师的HTML/CSS功力和开发一个水平，当我没说。因为，组件会由半封装会变成“半装疯”。</li>
</ol>
<h3>五、传统组件和半封装组件形象对比</h3>
<p>传统组件就像是中国的法律，一套法律适用于各个省，所以法律大而全，但是，总是难免有遗漏，比方说男的被男的那个，不算那个；</p>
<p>半封装组件就像是美国的法律，封装的部分是宪法，全国通过。可变的适用于各个项目的UI层就像是各个州自己通过的法律，自治与灵活。</p>
<p>前者适用于功能为主，代码质量要求一般的项目；后者适用于体验优先，toper级别项目。</p>
<h3>六、面向设计半封装组件的实践</h3>
<p>拿最近项目的dialog弹框举例。针对某一个具体项目而言，从设计一致性讲，弹框的交互细节都是一致的，这里也不例外。包括以下特点：</p>
<ol>
<li>不能拖拽；</li>
<li>点击背景层不能关闭；</li>
<li>水平居中，上下比例2:3；</li>
<li>弹框出现背景内容不能滚动，弹框过高，弹框自身可以滚动；</li>
<li>弹框支持上下间距不变，中间自适应布局；</li>
<li>弹框尺寸变化时候的动画支持，不是duangduangduang直接呈现；</li>
</ol>
<p>大家应该都用过dialog组件，如果使用你们现在团队的dialog组件，如何满足上面的需求？按照我的经验，会这样：</p>
<ol>
<li>调用通用的dialog组件，再项目中新建一个js文件，对dialog二次封装，适用于这个项目；</li>
<li>设置：<code>dradable: false</code>；</li>
<li>设置：<code>closeable: false</code>；</li>
<li>上下2:3怎么整？估计没有这样的API，不用慌，我们干掉组件的自己的居中定位，然后我们重置下；或者直接劝设计师放弃这种“没有意义”的想法；</li>
<li>全局回调API中对页面滚动进行处理；</li>
<li>JS实时计算？</li>
<li>JS动画，好像很麻烦的样子，最快的办法还是直接劝设计师放弃这种“没有意义”的想法；</li>
</ol>
<p>好，我们就此感受一下，传统弹框组件都干了些什么。首先，大家要知道，这个传统弹框组件很大，API会很多，例如著名的kissy光Overlay就18个API。然后，我们还在这个如此庞大的组件上再次封装了一次JS代码(流量啊烧钱啊)<img src="http://mat1.gtimg.com/www/mb/images/face/1.gif" align="absmiddle" height="24">。</p>
<p>如果我们的封装可以满足设计需求也是挺好的，最好的结果似乎……让开发遇到了麻烦，尤其上下2:3这个头一次遇到的需求，以及高度自适应弹框以及动画支持。</p>
<p>可谓损了代码效果还不好，赔了夫人还折兵。</p>
<p>为什么会有这样的悲剧呢？<img src="http://mat1.gtimg.com/www/mb/images/face/32.gif" align="absmiddle" height="24"></p>
<p>现代web UI多变，类似的UI需求以后一定会更多。传统组件面向功能，虽看似完善强大，实际对UI层还是鞭长莫及，UI层一任性，组件就哭了。</p>
<p>下面来看看面向设计的分离半封装的web组件是如何满足设计需求的。</p>
<ol>
<li>手上是个半成品的dialog组件，有一些核心封装；</li>
<li>任何类似是否可以拖拽，是否有某元素，是否背景点击可以关闭之类API相关代码全部干掉；</li>
<li>UI层分离，根据设计需求，重新设计HTML，除了z-index外的样式控制全部交给CSS；HTML侧蒙层和弹框合体，便于内滚动实现以及高度自适应弹框；上下2:3定位实现交给CSS完成，于是，当我们进行动画的时候，只需要关注弹框内部变化元素的尺寸，弹框就会自动定位（CSS自动实时渲染）；</li>
<li>滚动条控制直接组件回调处理，没有API控制，因为，针对本项目本设计而言，没有任何必要。</li>
</ol>
<p>设计场景以外的任何东西都扔掉，代码量估计少了一半(面向设计)；根据设计场景，修改可变UI层的HTML结构，配合强大的CSS，充分发挥UI工程师的在视觉呈现上的造诣(分离)；保留传统web组件在弹框显隐以及回调处理上的封装性(封装)。</p>
<p>最后的结果是：dialog组件的代码量身定制，代码量小，逻辑清晰易维护；同时，UI层面向设计，弹框体验一级棒；定位等交给CSS, 更高性能。综合下来，整个组件的品质比传统组件实现上了好几层楼。</p>
<h3>七、最后的小总结</h3>
<p>本文内容属于“面向设计的半封装web组件开发”的精简版，如果对某些论点持怀疑态度，可以去<a href="http://isux.tencent.com/half-package-web-components-for-design.html" target="_blank">这里</a>细细浏览原版。还有，本文目的是让大家把web组件的构建的重心放在“面向设计”上，“半封装”只是兼顾设计和模块化开发的一种权衡策略，具体项目还是要封装良好，小白也能速度上手。</p>
<p>至少对于我而言，这种组件开发思想，让项目的组件品质，无论是UI层还是代码层，都达到了新的高度。</p>
<p>大家不妨细细体味下，并不是要大家立即放弃传统web组件构建模式，而是可以开阔思维，转换思路，试着面向设计来思考、定制web组件，远离传统又大又重的组件构建。</p>
<p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4892">http://www.zhangxinxu.com/wordpress/?p=4892</a></p>
<p>（本篇完）</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:99:"http://www.zhangxinxu.com/wordpress/2015/08/semi-package-web-component-development-for-design/feed/";}s:5:"slash";a:1:{s:8:"comments";s:2:"15";}s:7:"summary";s:628:"目前很多Team和团队都有自己的一套web组件体系，模块化开发，封装良好，上手简单。然后希望该web组件可以应用到接手的各个项目中，节约日后的开发成本。甚至考虑开源。
这其实是很棒的，但是呢，希望一套web组件各个项目通用？在我看来，除非对项目没有追求，否则不太现实。
但是呢，希望一套web组件各个项目通用？在我看来，除非对项目没有追求，否则就是妄想。
为什么说传统web组件想一统天下不现实呢？因为就像秦始皇一统天下一样，要牺牲很多很多东西...";s:12:"atom_content";s:14172:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4892">http://www.zhangxinxu.com/wordpress/?p=4892</a></p>
<p>本文完整版地址已经在发表在ISUX团队官方博客：<a href="http://isux.tencent.com/half-package-web-components-for-design.html" target="_blank">http://isux.tencent.com/half-package-web-components-for-design.html</a> 欢迎围观，欢迎评论交流！</p>
<h3>一、传统web组件的妄想</h3>
<p>目前很多Team和团队都有自己的一套web组件体系，模块化开发，封装良好，上手简单。然后希望该web组件可以应用到接手的各个项目中，节约日后的开发成本。甚至考虑开源。</p>
<p>这其实是很棒的，但是呢，希望一套web组件各个项目通用？在我看来，除非对项目没有追求，否则不太现实。</p>
<p>但是呢，希望一套web组件各个项目通用？在我看来，除非对项目没有追求，否则就是妄想。</p>
<p>为什么说传统web组件想一统天下不现实呢？因为就像秦始皇一统天下一样，要牺牲很多很多东西。</p>
<ol>
<li><strong>牺牲代码量</strong>
<p>web组件要想适用于各个项目，必然要考虑各个项目的各种应用场景，于是，我们势必要暴露很多很多的API, 否则根本应付不来。拿模态弹框举例：有的项目可以拖拽，有的没有关闭按钮，有的黑色蒙版可以点击等，于是，我们至少新增类似<code>dragable</code>, <code>colsable</code>, <code>clickable</code>这些API. 就算这样，还是会遇到一些特殊的需求，例如，弹框位置上下比例<code>2:3</code>. 业界通常的做法是二次封装，没错，二次封装，就是在原来就很大很重的web组件基础上，再捣腾一些代码。<img src="http://mat1.gtimg.com/www/mb/images/face/36.gif" align="absmiddle" height="24"></p>
</li>
<li><strong>牺牲代码质量</strong>
<p>有些项目并不需要兼容老的IE浏览器，UI工程师那里有质量更好更简单的解决方案。但是，抱歉，web组件在那里，只能委曲求全使用又老又臭的传统兼容实现。</p>
<p>场景支持多，代码多，逻辑多，代码容易乱，也更容易出bug。</p>
</li>
<li><strong>牺牲设计和体验</strong>
<p>web组件要想多项目使用且封装良好，势必要对UI层进行抽象。但是，UI层一旦抽象了，就等于失去了创新的活力，等于死去：</p>
<p><img src="http://isux.tencent.com/wp-content/uploads/2015/05/20150529160705192.png" width="588" height="168" alt="关于UI逻辑抽象的言论" style="border:1px solid #ccc;"></p>
<p>而现代web, 随着CSS3, SVG等现代web技术日趋成熟，我们在UI展现层能够做的事件就非常多，更新变化也更加快。要是这块的创新被组件限制，而其他竞品在组件UI细节上不断闪现人性化、情感化的创新之处，交互也更加流畅与舒适。势必会在新的web发展浪潮中被冲到沙滩上。</p>
<p><img src="http://isux.tencent.com/wp-content/uploads/2015/05/201505291703464.png" width="588" height="209" alt="关于YUI终止开发的言论" style="border:1px solid #ccc;"></p>
</li>
<li>
    	<strong>组件颗粒度把控</strong></p>
<p>由于项目差异，以及多人合作等原因，组件颗粒度的把控总是没法恰到好处，拿捏得当。</p>
</li>
<li><strong>跨部门合作</strong>
<p>组件大而重，看上去上手简单，实际上，API这么多，谁记得住！我们这边有切实的案例的，某项目质量非常高，无论是UI, 交互和体验，各方的评价也很好。后来我们要开始一个新的且比较大的项目，就希望把已有项目很多好的东西借鉴过来。设计还是同样的一批设计师，但是，前端团队却换了一拨人。理想的状态应该是这样的，新项目的前端团队，直接使用之前项目这边的前端UI组件(除了颜色，尺寸什么的都是一模一样的)，less的变量文件颜色一改，分分钟无缝转移，多棒啊！</p>
<p>但是，最后的结果是，新的前端团队放弃了之前项目的前端解决方案，还是使用了自己的简洁派做法，seajs + jQuery + &#8230;<img src="http://mat1.gtimg.com/www/mb/images/face/36.gif" align="absmiddle" height="24"></p>
</li>
</ol>
<p>但是，不可否认，web组件对于一般的、尤其视觉这块要求不高的项目，是很有价值的。只是在应付要求较高的web项目的时候，显得还有很大的改进空间。下面问题来了：难道我们要为了一些交互体验和视觉效果放弃这些web组件吗？</p>
<p>答案显而易见，web组件还是需要的。但是，也不能像现在这样，直接使用。我们需要顺应时势，转换思维，试试走“<strong>面向设计的半封装web组件</strong>”。</p>
<h3>二、转换思维，面向设计</h3>
<p>传统web组件是一般都是由前端开发完成，关注点更多在功能与协作上。虽然也有设计支持，但还是比较弱的。于是，当设计师进行某些微创新的时候，往往就要受制于过于组装的组件的限制。比方说设计师对dialog弹框进行了一些微创新，比方说下面这样的(无标题无关闭大背景色块)：</p>
<p><img src="http://isux.tencent.com/wp-content/uploads/2015/05/20150528171215569.png" width="460" height="207" alt="一个提示框效果示意"></p>
<p>去问开发可行性，结果，开发来了一句：“哎呀，这个结构我们目前的弹框组件不支持！”我相信这种场景很多同学都遇到过吧~最后，基本上都是设计师妥协，<img src="http://mat1.gtimg.com/www/mb/images/face/193.gif" align="absmiddle" height="23">还是使用传统弹框交互或布局。所以，坊间才有“苦逼的设计师”的传闻。</p>
<p>对于一个重视体验和设计的企业或团队而言，这是极为不合理的。居然下游决定上游，技术的目的本身就是为设计服务的，结果反过来限制设计的发挥，这岂不是本末倒置！</p>
<p>因此，我们有必要转换思维，面向设计。也就是说，让设计师自由地设计，我们做技术的，为之服务，针对特定项目，去调整我们的web组件，剔除不必要的API, 尽量将UI层内容分离出来，交给设计师和UI工程师，精简我们的组件，同时保证组件的UI品质。</p>
<h3>三、转换思维，分离与半封装</h3>
<p>面向设计的web组件，可以说是根据当前设计量身定制的web组件。大家都知道，定制这东西，虽然最后的效果好，但是人力成本也高啊！怎么权衡呢？</p>
<p>两点：分离和半封装。</p>
<p><strong>1. 分离</strong></p>
<p>尽可能将传统组件的API释放出来，交给HTML以及CSS。同时UI层内容从组件中剥离，方便UI工程师做调整，注意是内部调整，不是传统的模板API。</p>
<p><strong>2. 半封装</strong></p>
<p>此半封装是多个项目平行对比而言的，非UI侧的核心功能还是封装良好的，UI层可变，故称之为半封装。</p>
<p>上面两点使用图示表示就是：</p>
<p><img src="http://isux.tencent.com/wp-content/uploads/2015/07/20150730172621262.png" width="460" height="328" alt="web组件分离和半封装示意"></p>
<p>于是，我们最终的人力成本和以前其实差不多（核心模块都是一样的），传统组件是二次封装，半封装组件是内部定制，实际上都是类似的工作，但是，后者代码量和UI质量要高很多很多：</p>
<p><img src="http://isux.tencent.com/wp-content/uploads/2015/07/20150730173309128.png" width="590" height="328" alt="两种组件模式的前期工作"></p>
<p>这里，有必要加粗强调下：<strong>此“半封装”是针对不同设计风格的项目而言，对于某一个具体项目，其web组件还是完全封装的，还是有成熟的API接口的</strong>。</p>
<h3>四、使用面向设计半封装组件的前提</h3>
<ol>
<li><strong>重要项目、希望成为精品的项目</strong> 因为这样的项目需要面向设计，而不仅仅满足功能，任由开发任性。</li>
<li><strong>设计和UI工程师要给力</strong> 如果设计师和开发一个水平，当我没说；如果UI工程师的HTML/CSS功力和开发一个水平，当我没说。因为，组件会由半封装会变成“半装疯”。</li>
</ol>
<h3>五、传统组件和半封装组件形象对比</h3>
<p>传统组件就像是中国的法律，一套法律适用于各个省，所以法律大而全，但是，总是难免有遗漏，比方说男的被男的那个，不算那个；</p>
<p>半封装组件就像是美国的法律，封装的部分是宪法，全国通过。可变的适用于各个项目的UI层就像是各个州自己通过的法律，自治与灵活。</p>
<p>前者适用于功能为主，代码质量要求一般的项目；后者适用于体验优先，toper级别项目。</p>
<h3>六、面向设计半封装组件的实践</h3>
<p>拿最近项目的dialog弹框举例。针对某一个具体项目而言，从设计一致性讲，弹框的交互细节都是一致的，这里也不例外。包括以下特点：</p>
<ol>
<li>不能拖拽；</li>
<li>点击背景层不能关闭；</li>
<li>水平居中，上下比例2:3；</li>
<li>弹框出现背景内容不能滚动，弹框过高，弹框自身可以滚动；</li>
<li>弹框支持上下间距不变，中间自适应布局；</li>
<li>弹框尺寸变化时候的动画支持，不是duangduangduang直接呈现；</li>
</ol>
<p>大家应该都用过dialog组件，如果使用你们现在团队的dialog组件，如何满足上面的需求？按照我的经验，会这样：</p>
<ol>
<li>调用通用的dialog组件，再项目中新建一个js文件，对dialog二次封装，适用于这个项目；</li>
<li>设置：<code>dradable: false</code>；</li>
<li>设置：<code>closeable: false</code>；</li>
<li>上下2:3怎么整？估计没有这样的API，不用慌，我们干掉组件的自己的居中定位，然后我们重置下；或者直接劝设计师放弃这种“没有意义”的想法；</li>
<li>全局回调API中对页面滚动进行处理；</li>
<li>JS实时计算？</li>
<li>JS动画，好像很麻烦的样子，最快的办法还是直接劝设计师放弃这种“没有意义”的想法；</li>
</ol>
<p>好，我们就此感受一下，传统弹框组件都干了些什么。首先，大家要知道，这个传统弹框组件很大，API会很多，例如著名的kissy光Overlay就18个API。然后，我们还在这个如此庞大的组件上再次封装了一次JS代码(流量啊烧钱啊)<img src="http://mat1.gtimg.com/www/mb/images/face/1.gif" align="absmiddle" height="24">。</p>
<p>如果我们的封装可以满足设计需求也是挺好的，最好的结果似乎……让开发遇到了麻烦，尤其上下2:3这个头一次遇到的需求，以及高度自适应弹框以及动画支持。</p>
<p>可谓损了代码效果还不好，赔了夫人还折兵。</p>
<p>为什么会有这样的悲剧呢？<img src="http://mat1.gtimg.com/www/mb/images/face/32.gif" align="absmiddle" height="24"></p>
<p>现代web UI多变，类似的UI需求以后一定会更多。传统组件面向功能，虽看似完善强大，实际对UI层还是鞭长莫及，UI层一任性，组件就哭了。</p>
<p>下面来看看面向设计的分离半封装的web组件是如何满足设计需求的。</p>
<ol>
<li>手上是个半成品的dialog组件，有一些核心封装；</li>
<li>任何类似是否可以拖拽，是否有某元素，是否背景点击可以关闭之类API相关代码全部干掉；</li>
<li>UI层分离，根据设计需求，重新设计HTML，除了z-index外的样式控制全部交给CSS；HTML侧蒙层和弹框合体，便于内滚动实现以及高度自适应弹框；上下2:3定位实现交给CSS完成，于是，当我们进行动画的时候，只需要关注弹框内部变化元素的尺寸，弹框就会自动定位（CSS自动实时渲染）；</li>
<li>滚动条控制直接组件回调处理，没有API控制，因为，针对本项目本设计而言，没有任何必要。</li>
</ol>
<p>设计场景以外的任何东西都扔掉，代码量估计少了一半(面向设计)；根据设计场景，修改可变UI层的HTML结构，配合强大的CSS，充分发挥UI工程师的在视觉呈现上的造诣(分离)；保留传统web组件在弹框显隐以及回调处理上的封装性(封装)。</p>
<p>最后的结果是：dialog组件的代码量身定制，代码量小，逻辑清晰易维护；同时，UI层面向设计，弹框体验一级棒；定位等交给CSS, 更高性能。综合下来，整个组件的品质比传统组件实现上了好几层楼。</p>
<h3>七、最后的小总结</h3>
<p>本文内容属于“面向设计的半封装web组件开发”的精简版，如果对某些论点持怀疑态度，可以去<a href="http://isux.tencent.com/half-package-web-components-for-design.html" target="_blank">这里</a>细细浏览原版。还有，本文目的是让大家把web组件的构建的重心放在“面向设计”上，“半封装”只是兼顾设计和模块化开发的一种权衡策略，具体项目还是要封装良好，小白也能速度上手。</p>
<p>至少对于我而言，这种组件开发思想，让项目的组件品质，无论是UI层还是代码层，都达到了新的高度。</p>
<p>大家不妨细细体味下，并不是要大家立即放弃传统web组件构建模式，而是可以开阔思维，转换思路，试着面向设计来思考、定制web组件，远离传统又大又重的组件构建。</p>
<p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4892">http://www.zhangxinxu.com/wordpress/?p=4892</a></p>
<p>（本篇完）</p>
";s:14:"date_timestamp";i:1439322726;}i:2;a:14:{s:5:"title";s:56:"小tip:中文英文左右padding一致两端对齐实现";s:4:"link";s:86:"http://www.zhangxinxu.com/wordpress/2015/08/chinese-english-same-padding-text-justify/";s:8:"comments";s:95:"http://www.zhangxinxu.com/wordpress/2015/08/chinese-english-same-padding-text-justify/#comments";s:7:"pubdate";s:31:"Thu, 06 Aug 2015 16:26:49 +0000";s:2:"dc";a:1:{s:7:"creator";s:10:"张 鑫旭";}s:8:"category";s:70:"css相关letter-spacingsplittext-align:justify两端对齐字符空格";s:4:"guid";s:43:"http://www.zhangxinxu.com/wordpress/?p=4908";s:11:"description";s:381:"不是什么稀奇的技术，很多很多年前自己就玩耍过。
之所以今天拿出来说一下，是因为今天几个小伙伴遇到类似问题，突然发现，一些自己觉得不怎么样的东西，说不定对别人而言会有很大帮助，于是我就打算放出去，希望可以帮助到有需要的小伙伴。
是个什么东西呢？
先看下图……";s:7:"content";a:1:{s:7:"encoded";s:6035:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4908">http://www.zhangxinxu.com/wordpress/?p=4908</a></p>
<p>不是什么稀奇的技术，很多很多年前自己就玩耍过。</p>
<p>之所以今天拿出来说一下，是因为今天几个小伙伴遇到类似问题，突然发现，一些自己觉得不怎么样的东西，说不定对别人而言会有很大帮助，于是我就打算写篇短文简单介绍下，希望可以帮助到有需要的小伙伴。</p>
<p>是个什么东西呢？</p>
<p>先看下图：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/cut-unalign.png" width="388" height="242" alt=" 问题图片示意" class="mt10" /></p>
<p>就是一个定宽的容器，左右padding值20像素，结果输入一段文字后（有中文也有英文字符），会发现右侧根本就不对齐，有些地方距离右侧的空白大小也不是20像素，感觉不和谐，设计师就希望排列能够好看一点，右边要对齐。</p>
<p>其实呢，要实现两端对齐很简单，使用<code>text-align:justify</code>, 之前有写过“<a href="http://www.zhangxinxu.com/wordpress/?p=1514">display:inline-block/text-align:justify下列表的两端对齐布局</a>”，也是属于<code>text-align:justify</code>的精彩应用；然后配合其他一些小技巧，就能实现任意中英文的两端对齐排列效果了。</p>
<p>您可以狠狠地点击这里：<a href="http://www.zhangxinxu.com/study/201508/chinese-english-text-justify.html" target="_blank" class="a_link">中文或英文两端对齐Demo</a></p>
<p>我们可以看到，demo页面上有一段朴实的文字：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-06_235932.png" width="423" height="371" alt="默认的文字" class="alignnone" /></p>
<p>然后我们点击按钮变身一下，会发现，文字内容乖乖两端对齐了：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-06_235952.png" width="414" height="361" alt="两端对齐截图" class="alignnone" /></p>
<p>这种对齐效果，IE6/IE7浏览器也是支持良好的，例如，下面这个IE7下的截图：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-07_000104.png" width="405" height="372" alt="IE7浏览器下的截图" class="alignnone" /></p>
<p><strong>实现原理</strong><br />
要理解原理，我们首先要搞清楚文本的两端对齐声明<code>text-align:justify</code>起作用的本质。首先，大家要知道，<code>text-align:justify</code>是专门为英文设计的，谁叫CSS是老外发明的呢，用来实现英文语句的两端对齐。注意这里的，是语句的对齐。大家应该都知道，英文语句是一个单词一个单词组合而成的，每个单词之前使用空格分隔。</p>
<p><code>text-align:justify</code>之所以可以让英文段落两端对齐，那是因为每个英文单词之前那个透明看不见的空格被拉伸了。注意，是空格被拉伸了，对，只有空格。因此，当我们写下一段洋洋洒洒中文内容的时候，<code>text-align:justify</code>是没有任何作用的，跟没设置没任何区别。为什么呢？很简单，因为中文是一个一个汉字，汉字之间是没有空格的，自然也就不能拉伸，自然也就不能两端对齐。</p>
<p>怎么办呢？难道中文就不行了吗？</p>
<p>当然不是！既然正常的中文文字之间没有空格，我们自己加一点不就好了。例如下面代码：</p>
<div class="zxx_code">
<pre>"宁泽涛小鲜肉".split("").join(" ");</pre>
</div>
<p>结果就是：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-07_001716.png" width="293" height="58" alt="中文加空格" class="alignnone" /></p>
<p>会发现，每个中文文字之间都有的空格字符，于是，<code>text-align:justify</code>就能大发神威，实现两端对齐！</p>
<p>OK，现在两端对齐是实现了，但是，空格字符它也是真实存在的字符，是会占据宽度的。如果放任不管，文字就会太稀松，阅读很吃力，会被当bug提出来的，怎么办呢？</p>
<p>很简单，我们使用<code>letter-spacing</code>收缩字符间距就可以了。例如demo页面：</p>
<div class="zxx_code">
<pre>box.style.letterSpacing = '-.15em';</pre>
</div>
<p>不同字体的<code>letter-spacing</code>负值不一样，使用<code>em</code>单位呢，可以更智能适配各个<code>font-size</code>的文字。demo使用的微软雅黑字体，我大致测试了下，<code>-.15em</code>是个挺合适的值，其他字体我就不详了，你有兴趣，可以自己捣腾下。</p>
<p>至此，我们的任意中文英文的两端对齐效果就实现了。</p>
<p>使用JS再总结下就是（假设<code>box</code>是文字容器元素）：</p>
<div class="zxx_code">
<pre>ox.style.textAlign = "justify";
box.style.letterSpacing = '-.15em';
box.innerHTML = box.innerHTML.split("").join(" ");</pre>
</div>
<p>寥寥3行代码，我们就大功告成了！</p>
<p><strong>补充于翌日：</strong><br />
上面的方法适用于中文内容，如果段落含有英文片段，会干掉原来的空格，因为三个空格会被当做一个空格距离处理，因此，我们还需要对连续3个空格左下特殊处理，因此代码进化成：</p>
<div class="zxx_code">
<pre>box.innerHTML = box.innerHTML.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '').split("").join(" ").replace(/\s{3}/g, " &amp;nbsp; ");</pre>
</div>
<p>本文为原创文章，包含脚本行为，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4908">http://www.zhangxinxu.com/wordpress/?p=4908</a></p>
<p>（本篇完）</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:91:"http://www.zhangxinxu.com/wordpress/2015/08/chinese-english-same-padding-text-justify/feed/";}s:5:"slash";a:1:{s:8:"comments";s:2:"18";}s:7:"summary";s:381:"不是什么稀奇的技术，很多很多年前自己就玩耍过。
之所以今天拿出来说一下，是因为今天几个小伙伴遇到类似问题，突然发现，一些自己觉得不怎么样的东西，说不定对别人而言会有很大帮助，于是我就打算放出去，希望可以帮助到有需要的小伙伴。
是个什么东西呢？
先看下图……";s:12:"atom_content";s:6035:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4908">http://www.zhangxinxu.com/wordpress/?p=4908</a></p>
<p>不是什么稀奇的技术，很多很多年前自己就玩耍过。</p>
<p>之所以今天拿出来说一下，是因为今天几个小伙伴遇到类似问题，突然发现，一些自己觉得不怎么样的东西，说不定对别人而言会有很大帮助，于是我就打算写篇短文简单介绍下，希望可以帮助到有需要的小伙伴。</p>
<p>是个什么东西呢？</p>
<p>先看下图：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/cut-unalign.png" width="388" height="242" alt=" 问题图片示意" class="mt10" /></p>
<p>就是一个定宽的容器，左右padding值20像素，结果输入一段文字后（有中文也有英文字符），会发现右侧根本就不对齐，有些地方距离右侧的空白大小也不是20像素，感觉不和谐，设计师就希望排列能够好看一点，右边要对齐。</p>
<p>其实呢，要实现两端对齐很简单，使用<code>text-align:justify</code>, 之前有写过“<a href="http://www.zhangxinxu.com/wordpress/?p=1514">display:inline-block/text-align:justify下列表的两端对齐布局</a>”，也是属于<code>text-align:justify</code>的精彩应用；然后配合其他一些小技巧，就能实现任意中英文的两端对齐排列效果了。</p>
<p>您可以狠狠地点击这里：<a href="http://www.zhangxinxu.com/study/201508/chinese-english-text-justify.html" target="_blank" class="a_link">中文或英文两端对齐Demo</a></p>
<p>我们可以看到，demo页面上有一段朴实的文字：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-06_235932.png" width="423" height="371" alt="默认的文字" class="alignnone" /></p>
<p>然后我们点击按钮变身一下，会发现，文字内容乖乖两端对齐了：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-06_235952.png" width="414" height="361" alt="两端对齐截图" class="alignnone" /></p>
<p>这种对齐效果，IE6/IE7浏览器也是支持良好的，例如，下面这个IE7下的截图：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-07_000104.png" width="405" height="372" alt="IE7浏览器下的截图" class="alignnone" /></p>
<p><strong>实现原理</strong><br />
要理解原理，我们首先要搞清楚文本的两端对齐声明<code>text-align:justify</code>起作用的本质。首先，大家要知道，<code>text-align:justify</code>是专门为英文设计的，谁叫CSS是老外发明的呢，用来实现英文语句的两端对齐。注意这里的，是语句的对齐。大家应该都知道，英文语句是一个单词一个单词组合而成的，每个单词之前使用空格分隔。</p>
<p><code>text-align:justify</code>之所以可以让英文段落两端对齐，那是因为每个英文单词之前那个透明看不见的空格被拉伸了。注意，是空格被拉伸了，对，只有空格。因此，当我们写下一段洋洋洒洒中文内容的时候，<code>text-align:justify</code>是没有任何作用的，跟没设置没任何区别。为什么呢？很简单，因为中文是一个一个汉字，汉字之间是没有空格的，自然也就不能拉伸，自然也就不能两端对齐。</p>
<p>怎么办呢？难道中文就不行了吗？</p>
<p>当然不是！既然正常的中文文字之间没有空格，我们自己加一点不就好了。例如下面代码：</p>
<div class="zxx_code">
<pre>"宁泽涛小鲜肉".split("").join(" ");</pre>
</div>
<p>结果就是：<br />
<img src="http://image.zhangxinxu.com/image/blog/201508/2015-08-07_001716.png" width="293" height="58" alt="中文加空格" class="alignnone" /></p>
<p>会发现，每个中文文字之间都有的空格字符，于是，<code>text-align:justify</code>就能大发神威，实现两端对齐！</p>
<p>OK，现在两端对齐是实现了，但是，空格字符它也是真实存在的字符，是会占据宽度的。如果放任不管，文字就会太稀松，阅读很吃力，会被当bug提出来的，怎么办呢？</p>
<p>很简单，我们使用<code>letter-spacing</code>收缩字符间距就可以了。例如demo页面：</p>
<div class="zxx_code">
<pre>box.style.letterSpacing = '-.15em';</pre>
</div>
<p>不同字体的<code>letter-spacing</code>负值不一样，使用<code>em</code>单位呢，可以更智能适配各个<code>font-size</code>的文字。demo使用的微软雅黑字体，我大致测试了下，<code>-.15em</code>是个挺合适的值，其他字体我就不详了，你有兴趣，可以自己捣腾下。</p>
<p>至此，我们的任意中文英文的两端对齐效果就实现了。</p>
<p>使用JS再总结下就是（假设<code>box</code>是文字容器元素）：</p>
<div class="zxx_code">
<pre>ox.style.textAlign = "justify";
box.style.letterSpacing = '-.15em';
box.innerHTML = box.innerHTML.split("").join(" ");</pre>
</div>
<p>寥寥3行代码，我们就大功告成了！</p>
<p><strong>补充于翌日：</strong><br />
上面的方法适用于中文内容，如果段落含有英文片段，会干掉原来的空格，因为三个空格会被当做一个空格距离处理，因此，我们还需要对连续3个空格左下特殊处理，因此代码进化成：</p>
<div class="zxx_code">
<pre>box.innerHTML = box.innerHTML.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '').split("").join(" ").replace(/\s{3}/g, " &amp;nbsp; ");</pre>
</div>
<p>本文为原创文章，包含脚本行为，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4908">http://www.zhangxinxu.com/wordpress/?p=4908</a></p>
<p>（本篇完）</p>
";s:14:"date_timestamp";i:1438878409;}i:3;a:14:{s:5:"title";s:40:"博闻强识：了解CSS中的@ AT规则";s:4:"link";s:62:"http://www.zhangxinxu.com/wordpress/2015/08/know-css-at-rules/";s:8:"comments";s:71:"http://www.zhangxinxu.com/wordpress/2015/08/know-css-at-rules/#comments";s:7:"pubdate";s:31:"Wed, 05 Aug 2015 17:24:49 +0000";s:2:"dc";a:1:{s:7:"creator";s:10:"张 鑫旭";}s:8:"category";s:76:"css相关@import@keyframes@media@supportscss3font-facemedia queriesnamespace";s:4:"guid";s:43:"http://www.zhangxinxu.com/wordpress/?p=4900";s:11:"description";s:303:"大家可能在CSS中见到过字符@然后加一些关键字的用法，这种用法就称之为AT规则。而本文的内容就是列举目前CSS中支持的或即将支持的一些CSS规则，让大家提前有个大致的了解和认识，希望对日后的工作与学习能够提供一些帮助！";s:7:"content";a:1:{s:7:"encoded";s:7638:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4900">http://www.zhangxinxu.com/wordpress/?p=4900</a></p>
<p>大家可能在CSS中见到过字符<code>@</code>然后加一些关键字的用法，这种用法就称之为AT规则，在CSS中，种类还是很多的，这里总结列举下。</p>
<h3>常规规则</h3>
<p>所谓“常规规则”指的是语法类似下面的规则：</p>
<div class="zxx_code">
<pre>@[KEYWORD] (RULE);</pre>
</div>
<p>包括：</p>
<ul>
<li><strong>@charset</strong><br />
定义字符集。字符设置据说会被HTTP头覆盖。</p>
<p>某些软件，例如Dreamweaver新建CSS文件时候，自动会带有下面所示代码，但实际开发时候，作用不大，因为meta中已经有所设置(<code>&lt;meta charset="utf-8"></code>)，会覆盖，所以我都是直接删掉的。</p>
<div class="zxx_code">
<pre>@charset "utf-8";</pre>
</div>
</li>
<li><strong>@import</strong><br />
导入其他CSS样式文件。实际上线时候，不建议使用，多请求，阻塞加载之类。但，本地开发可以使用，用做CSS模块化开发，然后使用一些(如grunt)工具进行压缩并合并。但是呢，相比less, sass等还是有不足，就是<code>@import</code>语句只能在CSS文件顶部，使得文件的前后关系控制，就不那么灵活。</p>
<div class="zxx_code">
<pre>@import 'global.css';</pre>
</div>
</li>
<li><strong>@namespace</strong><br />
此规则应用到XML HTML(XHTML)上特别有用，因为这样的话XHTML元素可以作为选择器在CSS中使用。</p>
<div class="zxx_code">
<pre><span style="color:green;">/* XHTML命名空间 */</span>
@namespace url(http://www.w3.org/1999/xhtml);

<span style="color:green;">/* 内嵌在XHTML的SVG的命名空间 */</span>
@namespace svg url(http://www.w3.org/2000/svg);</pre>
</div>
</li>
</ul>
<h3>嵌套规则</h3>
<p>所谓“嵌套规则”，就是带有花括号<code>{}</code>, 语法类似下面的规则：</p>
<div class="zxx_code">
<pre>@[KEYWORD] {
  <span style="color:green;">/* 嵌套语句 */</span>
}</pre>
</div>
<p>包括：</p>
<ul>
<li><strong>@document</strong><br />
CSS 4.0规范有相关说明。如果文档满足给定的一些条件，就可以应用我们指定的一些样式。比如说，这个CSS文件被子站A调用，和被子站C调用，我们可以通过域名匹配来执行不同的CSS样式。这样，我们可以有效避免冲突，或者防止外链之类。</p>
<div class="zxx_code">
<pre>@document 
  <span style="color:green;">/* 页面URL需要是 */</span>
  url(http://www.zhangxinxu.com/),
  
  <span style="color:green;">/* 页面URL的开头必须是... */</span>
  url-prefix(www.zhangxinxu.com/wordpress/),
  
  <span style="color:green;">/* 该域上的所有页面 */</span>
  domain(zhangxinxu.com),

  <span style="color:green;">/* 所有https协议页面 */</span>
  regexp("https:.*")
{
  
  <span style="color:green;">/* 开始样式 */</span>
  body { font-family: Comic Sans; }

}</pre>
</div>
<p>由于这个AT规则是CSS4水平的，所以目前的浏览器支持情况很弱，只有FireFox浏览器支持，而且还需要加前缀。但是，10年之后，也就是2025年再来看，估计就是另外一番景象了。</li>
<li><strong>@font-face</strong><br />
这个大家可能比较熟，自定义字体用的。IE6也支持。目前相关文章也挺多，就不啰嗦，放个示意：</p>
<div class="zxx_code">
<pre>@font-face {
  font-family: 'MyWebFont';
  src:  url('myfont.woff2') format('woff2'),
        url('myfont.woff') format('woff');
}</pre>
</div>
</li>
<li><strong>@keyframes</strong><br />
喜欢CSS3的同学这个也耳熟能详了，输入法打出来发现居然是“详”而不是“翔”，原来不是“听得太多耳朵都能拉出屎来”的意思哦，学习了！</p>
<p>用来声明CSS3 animation动画关键帧用的，一笑而过：</p>
<div class="zxx_code">
<pre>@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}</pre>
</div>
</li>
<li><strong>@media</strong><br />
媒介查询，解释非常常用的。响应式宽度啊，retina屏幕判断啦，打印屏幕啦，甚至IE7,IE8浏览器的hack啦，很多，本文标题是了解，不深入，给大家简单演示下使用就好了：</p>
<div class="zxx_code">
<pre>@media all and (min-width: 1280px) {
    <span style="color:green;">/* 宽度大于1280干嘛干嘛嘞... */</span> 
}</pre>
</div>
<div class="zxx_code">
<pre>@media 
(-webkit-min-device-pixel-ratio: 1.5), 
(min-resolution: 2dppx) { 
    <span style="color:green;">/* Retina屏幕干嘛干嘛嘞... */</span> 
}</pre>
</div>
<div class="zxx_code">
<pre>@media print {
    <span style="color:green;">/* 闪开闪开，我要打印啦！ */</span> 
}</pre>
</div>
<div class="zxx_code">
<pre>@media \0screen\,screen\9 {
    <span style="color:green;">/* IE7,IE8干嘛干嘛嘞... */</span> 
}</pre>
</div>
<div class="zxx_code">
<pre>@media screen\9 {
    <span style="color:green;">/* IE7干嘛干嘛嘞... */</span> 
}</pre>
</div>
</li>
<li><strong>@page</strong><br />
这个规则用在打印文档时候修改一些CSS属性。使用<code>@page</code>我们只能改变部分CSS属性，例如间距属性<code>margin</code>, 打印相关的<code>orphans</code>, <code>widows</code>, 以及<code>page-break-*</code>, 其他CSS属性会被忽略。</p>
<div class="zxx_code">
<pre>@page :first {
  margin: 1in;
}</pre>
</div>
<p>上面CSS表示<code>:first</code>页面也要有<code>:left</code>, <code>:right</code>页面<code>margin</code>间距。<span class="s">zxx: //<code>@page</code>的伪类包括：<code>:blank</code>, <code>:first</code>, <code>:left</code>, <code>:right</code></span>。</li>
<li><strong>@supports</strong><br />
是否支持某CSS属性声明的AT规则，浏览器对齐支持性越来越好了，鄙人已经在实际项目中使用了这个规则，干嘛用呢？说来惭愧，当作hack使用了。具体细节不表。下面是一些使用示意：</p>
<div class="zxx_code">
<pre><span style="color:green;">/* 检查是否支持CSS声明 */</span> 
@supports (display: flex) {
  .module { display: flex; }
}

<span style="color:green;">/* 检查多个条件 */</span> 
@supports (display: flex) and (-webkit-appearance: checkbox) {
  .module { display: flex; }
}</pre>
</div>
</li>
<p>该规则的浏览器兼容性如下：<br />
<iframe width="100%" height="440" src="http://caniuse.com/css-supports-api/embed" frameborder="0"></iframe>
</ul>
<h3>参考文章</h3>
<ul>
<li><a href="https://css-tricks.com/the-at-rules-of-css/">The At-Rules of CSS</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule">MDN-At-rule</a></li>
</ul>
<p><img src="http://image.zhangxinxu.com/image/emtion/smile.png" width="150" height="150" alt="微笑" class="alignleft" /> 本文内容大致结构、主要信息参考上面两文档。具体每个规则融入了自己的一些认识、开发经验等。有些内容属于翻译性质，非严格翻译，可能与原意有误差，欢迎指正！</p>
<p>感谢阅读！</p>
<p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4900">http://www.zhangxinxu.com/wordpress/?p=4900</a></p>
<p>（本篇完）</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:67:"http://www.zhangxinxu.com/wordpress/2015/08/know-css-at-rules/feed/";}s:5:"slash";a:1:{s:8:"comments";s:1:"4";}s:7:"summary";s:303:"大家可能在CSS中见到过字符@然后加一些关键字的用法，这种用法就称之为AT规则。而本文的内容就是列举目前CSS中支持的或即将支持的一些CSS规则，让大家提前有个大致的了解和认识，希望对日后的工作与学习能够提供一些帮助！";s:12:"atom_content";s:7638:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4900">http://www.zhangxinxu.com/wordpress/?p=4900</a></p>
<p>大家可能在CSS中见到过字符<code>@</code>然后加一些关键字的用法，这种用法就称之为AT规则，在CSS中，种类还是很多的，这里总结列举下。</p>
<h3>常规规则</h3>
<p>所谓“常规规则”指的是语法类似下面的规则：</p>
<div class="zxx_code">
<pre>@[KEYWORD] (RULE);</pre>
</div>
<p>包括：</p>
<ul>
<li><strong>@charset</strong><br />
定义字符集。字符设置据说会被HTTP头覆盖。</p>
<p>某些软件，例如Dreamweaver新建CSS文件时候，自动会带有下面所示代码，但实际开发时候，作用不大，因为meta中已经有所设置(<code>&lt;meta charset="utf-8"></code>)，会覆盖，所以我都是直接删掉的。</p>
<div class="zxx_code">
<pre>@charset "utf-8";</pre>
</div>
</li>
<li><strong>@import</strong><br />
导入其他CSS样式文件。实际上线时候，不建议使用，多请求，阻塞加载之类。但，本地开发可以使用，用做CSS模块化开发，然后使用一些(如grunt)工具进行压缩并合并。但是呢，相比less, sass等还是有不足，就是<code>@import</code>语句只能在CSS文件顶部，使得文件的前后关系控制，就不那么灵活。</p>
<div class="zxx_code">
<pre>@import 'global.css';</pre>
</div>
</li>
<li><strong>@namespace</strong><br />
此规则应用到XML HTML(XHTML)上特别有用，因为这样的话XHTML元素可以作为选择器在CSS中使用。</p>
<div class="zxx_code">
<pre><span style="color:green;">/* XHTML命名空间 */</span>
@namespace url(http://www.w3.org/1999/xhtml);

<span style="color:green;">/* 内嵌在XHTML的SVG的命名空间 */</span>
@namespace svg url(http://www.w3.org/2000/svg);</pre>
</div>
</li>
</ul>
<h3>嵌套规则</h3>
<p>所谓“嵌套规则”，就是带有花括号<code>{}</code>, 语法类似下面的规则：</p>
<div class="zxx_code">
<pre>@[KEYWORD] {
  <span style="color:green;">/* 嵌套语句 */</span>
}</pre>
</div>
<p>包括：</p>
<ul>
<li><strong>@document</strong><br />
CSS 4.0规范有相关说明。如果文档满足给定的一些条件，就可以应用我们指定的一些样式。比如说，这个CSS文件被子站A调用，和被子站C调用，我们可以通过域名匹配来执行不同的CSS样式。这样，我们可以有效避免冲突，或者防止外链之类。</p>
<div class="zxx_code">
<pre>@document 
  <span style="color:green;">/* 页面URL需要是 */</span>
  url(http://www.zhangxinxu.com/),
  
  <span style="color:green;">/* 页面URL的开头必须是... */</span>
  url-prefix(www.zhangxinxu.com/wordpress/),
  
  <span style="color:green;">/* 该域上的所有页面 */</span>
  domain(zhangxinxu.com),

  <span style="color:green;">/* 所有https协议页面 */</span>
  regexp("https:.*")
{
  
  <span style="color:green;">/* 开始样式 */</span>
  body { font-family: Comic Sans; }

}</pre>
</div>
<p>由于这个AT规则是CSS4水平的，所以目前的浏览器支持情况很弱，只有FireFox浏览器支持，而且还需要加前缀。但是，10年之后，也就是2025年再来看，估计就是另外一番景象了。</li>
<li><strong>@font-face</strong><br />
这个大家可能比较熟，自定义字体用的。IE6也支持。目前相关文章也挺多，就不啰嗦，放个示意：</p>
<div class="zxx_code">
<pre>@font-face {
  font-family: 'MyWebFont';
  src:  url('myfont.woff2') format('woff2'),
        url('myfont.woff') format('woff');
}</pre>
</div>
</li>
<li><strong>@keyframes</strong><br />
喜欢CSS3的同学这个也耳熟能详了，输入法打出来发现居然是“详”而不是“翔”，原来不是“听得太多耳朵都能拉出屎来”的意思哦，学习了！</p>
<p>用来声明CSS3 animation动画关键帧用的，一笑而过：</p>
<div class="zxx_code">
<pre>@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}</pre>
</div>
</li>
<li><strong>@media</strong><br />
媒介查询，解释非常常用的。响应式宽度啊，retina屏幕判断啦，打印屏幕啦，甚至IE7,IE8浏览器的hack啦，很多，本文标题是了解，不深入，给大家简单演示下使用就好了：</p>
<div class="zxx_code">
<pre>@media all and (min-width: 1280px) {
    <span style="color:green;">/* 宽度大于1280干嘛干嘛嘞... */</span> 
}</pre>
</div>
<div class="zxx_code">
<pre>@media 
(-webkit-min-device-pixel-ratio: 1.5), 
(min-resolution: 2dppx) { 
    <span style="color:green;">/* Retina屏幕干嘛干嘛嘞... */</span> 
}</pre>
</div>
<div class="zxx_code">
<pre>@media print {
    <span style="color:green;">/* 闪开闪开，我要打印啦！ */</span> 
}</pre>
</div>
<div class="zxx_code">
<pre>@media \0screen\,screen\9 {
    <span style="color:green;">/* IE7,IE8干嘛干嘛嘞... */</span> 
}</pre>
</div>
<div class="zxx_code">
<pre>@media screen\9 {
    <span style="color:green;">/* IE7干嘛干嘛嘞... */</span> 
}</pre>
</div>
</li>
<li><strong>@page</strong><br />
这个规则用在打印文档时候修改一些CSS属性。使用<code>@page</code>我们只能改变部分CSS属性，例如间距属性<code>margin</code>, 打印相关的<code>orphans</code>, <code>widows</code>, 以及<code>page-break-*</code>, 其他CSS属性会被忽略。</p>
<div class="zxx_code">
<pre>@page :first {
  margin: 1in;
}</pre>
</div>
<p>上面CSS表示<code>:first</code>页面也要有<code>:left</code>, <code>:right</code>页面<code>margin</code>间距。<span class="s">zxx: //<code>@page</code>的伪类包括：<code>:blank</code>, <code>:first</code>, <code>:left</code>, <code>:right</code></span>。</li>
<li><strong>@supports</strong><br />
是否支持某CSS属性声明的AT规则，浏览器对齐支持性越来越好了，鄙人已经在实际项目中使用了这个规则，干嘛用呢？说来惭愧，当作hack使用了。具体细节不表。下面是一些使用示意：</p>
<div class="zxx_code">
<pre><span style="color:green;">/* 检查是否支持CSS声明 */</span> 
@supports (display: flex) {
  .module { display: flex; }
}

<span style="color:green;">/* 检查多个条件 */</span> 
@supports (display: flex) and (-webkit-appearance: checkbox) {
  .module { display: flex; }
}</pre>
</div>
</li>
<p>该规则的浏览器兼容性如下：<br />
<iframe width="100%" height="440" src="http://caniuse.com/css-supports-api/embed" frameborder="0"></iframe>
</ul>
<h3>参考文章</h3>
<ul>
<li><a href="https://css-tricks.com/the-at-rules-of-css/">The At-Rules of CSS</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule">MDN-At-rule</a></li>
</ul>
<p><img src="http://image.zhangxinxu.com/image/emtion/smile.png" width="150" height="150" alt="微笑" class="alignleft" /> 本文内容大致结构、主要信息参考上面两文档。具体每个规则融入了自己的一些认识、开发经验等。有些内容属于翻译性质，非严格翻译，可能与原意有误差，欢迎指正！</p>
<p>感谢阅读！</p>
<p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4900">http://www.zhangxinxu.com/wordpress/?p=4900</a></p>
<p>（本篇完）</p>
";s:14:"date_timestamp";i:1438795489;}i:4;a:14:{s:5:"title";s:60:"小tip: 使用SVG寥寥数行实现圆环loading进度效果";s:4:"link";s:63:"http://www.zhangxinxu.com/wordpress/2015/07/svg-circle-loading/";s:8:"comments";s:72:"http://www.zhangxinxu.com/wordpress/2015/07/svg-circle-loading/#comments";s:7:"pubdate";s:31:"Fri, 31 Jul 2015 14:20:50 +0000";s:2:"dc";a:1:{s:7:"creator";s:10:"张 鑫旭";}s:8:"category";s:56:"SVG相关loadingstroke-dasharraySVG圆形扇形进度条";s:4:"guid";s:43:"http://www.zhangxinxu.com/wordpress/?p=4889";s:11:"description";s:136:"本文内容如题。有Demo有截图有帅气的源代码展示，不过没有漂亮的妹子，但是这并不会影响你的学习。";s:7:"content";a:1:{s:7:"encoded";s:20037:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4889">http://www.zhangxinxu.com/wordpress/?p=4889</a></p>
<h3>一、无题</h3>
<p>如题。</p>
<h3>二、正文</h3>
<p>设计师设计了一个图片上传圆环loading进度效果。如下截图：<br />
<img src="http://image.zhangxinxu.com/image/blog/201507/2015-07-31_195235.png" width="131" height="131" alt="loading效果截图" class="imgpad mt10" /></p>
<p>首先，CSS3是可以实现的，以前写过一篇转大饼的文章：“<a href="http://www.zhangxinxu.com/wordpress/2014/04/css3-pie-loading-waiting-animation/">CSS3实现鸡蛋饼饼状图loading等待转转转</a>”。原理跟这个一模一样，两个半区的矩形，然后不同时机巧妙显隐实现。</p>
<p>但是呢，CSS3实现不太好理解，进度控制也不容易，最好直接数值变一变，进度效果就出来。</p>
<p>有没有其他方法呢？</p>
<p>哈，当然有，可以使用同样IE9+支持的SVG.</p>
<p>我们只需要一个实线背景圆，一个虚线变化圆两个圆就可以了。</p>
<p>百闻不如一见，您可以狠狠地点击这里：<a class="a_link" href="http://www.zhangxinxu.com/study/201507/svg-circle-loading.html" target="_blank">SVG实现圆环loading进度效果demo</a></p>
<p>拖动demo下面的range区域选择控件(0-100%)就会发现蓝色高亮圆环跟着一起变化了：<br />
<img src="http://image.zhangxinxu.com/image/blog/201507/2015-07-31_200011.png" width="437" height="514" alt="圆环效果截图" class="imgpad mt10" /></p>
<p>SVG代码非常简单，如下示意：</p>
<div class="zxx_code">
<pre>&lt;svg width="440" height="440">
    &lt;circle cx="220" cy="220" r="170" stroke-width="50" stroke="#D1D3D7" fill="none">&lt;/circle>
    &lt;circle cx="220" cy="220" r="170" stroke-width="50" stroke="#00A5E0" fill="none" transform="matrix(0,-1,1,0,0,440)" <strong style="color:#cd0000;">stroke-dasharray="0 1069"</strong>>&lt;/circle>
&lt;/svg></pre>
</div>
<p>其中，上面红色加粗的就是效果实现的关键。</p>
<p><code>stroke-dasharray</code>在SVG中表示描边是虚线，两个值，第一个是虚线的宽度，第二个是虚线之间的间距。下面就是一些虚线数据值以及最后的效果表现（实时，非截图，IE9+浏览）：</p>
<div class="zxx_code">
<pre class="brush: html  language-html" data-number=""><span class="token prolog">&lt;?xml version="1.0"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">viewPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 200 300<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5, 5<span class="token punctuation">"</span></span>              <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5, 10<span class="token punctuation">"</span></span>             <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10, 5<span class="token punctuation">"</span></span>             <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5, 1<span class="token punctuation">"</span></span>              <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>70<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>70<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1, 5<span class="token punctuation">"</span></span>              <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.9<span class="token punctuation">"</span></span>               <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>110<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>110<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15, 10, 5<span class="token punctuation">"</span></span>         <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>130<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>130<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15, 10, 5, 10<span class="token punctuation">"</span></span>     <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15, 10, 5, 10, 15<span class="token punctuation">"</span></span> <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>170<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>170<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5, 5, 1, 5<span class="token punctuation">"</span></span>        <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[
line{
    stroke: black;
    stroke-width: 2;
}
]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span><div class="line-number" data-start="1" style="top: 0px;"></div><div class="line-number" data-start="2" style="top: 19px;"></div><div class="line-number" data-start="3" style="top: 38px;"></div><div class="line-number" data-start="4" style="top: 57px;"></div><div class="line-number" data-start="5" style="top: 76px;"></div><div class="line-number" data-start="6" style="top: 95px;"></div><div class="line-number" data-start="7" style="top: 114px;"></div><div class="line-number" data-start="8" style="top: 133px;"></div><div class="line-number" data-start="9" style="top: 152px;"></div><div class="line-number" data-start="10" style="top: 171px;"></div><div class="line-number" data-start="11" style="top: 190px;"></div><div class="line-number" data-start="12" style="top: 209px;"></div><div class="line-number" data-start="13" style="top: 228px;"></div><div class="line-number" data-start="14" style="top: 247px;"></div><div class="line-number" data-start="15" style="top: 266px;"></div><div class="line-number" data-start="16" style="top: 285px;"></div><div class="line-number" data-start="17" style="top: 304px;"></div><div class="line-number" data-start="18" style="top: 323px;"></div><div class="line-number" data-start="19" style="top: 342px;"></div><div class="line-number" data-start="20" style="top: 361px;"></div><div class="line-number" data-start="21" style="top: 380px;"></div></pre>
</div>
<p><svg width="200" height="200" viewport="0 0 200 300" version="1.1" xmlns="http://www.w3.org/2000/svg">
<line stroke-dasharray="5, 5" x1="10" y1="10" x2="190" y2="10"></line>
<line stroke-dasharray="5, 10" x1="10" y1="30" x2="190" y2="30"></line>
<line stroke-dasharray="10, 5" x1="10" y1="50" x2="190" y2="50"></line>
<line stroke-dasharray="5, 1" x1="10" y1="70" x2="190" y2="70"></line>
<line stroke-dasharray="1, 5" x1="10" y1="90" x2="190" y2="90"></line>
<line stroke-dasharray="0.9" x1="10" y1="110" x2="190" y2="110"></line>
<line stroke-dasharray="15, 10, 5" x1="10" y1="130" x2="190" y2="130"></line>
<line stroke-dasharray="15, 10, 5, 10" x1="10" y1="150" x2="190" y2="150"></line>
<line stroke-dasharray="15, 10, 5, 10, 15" x1="10" y1="170" x2="190" y2="170"></line>
<line stroke-dasharray="5, 5, 1, 5" x1="10" y1="190" x2="190" y2="190"></line>
<style>line{    stroke: black;    stroke-width: 2;}</style>
<p></svg></p>
<p>之前写了篇“<a href="http://www.zhangxinxu.com/wordpress/?p=4089">纯CSS实现帅气的SVG路径描边动画效果</a>”，就是<code>stroke-dasharray</code>的妙用。</p>
<p>这里也是类似原理。</p>
<p>理解了<code>stroke-dasharray</code>，我们的事情就简单了，我们只需要让间距永远不小于圆的周长，然后，<strong>虚线的长度 = 百分比值 * 圆的周长</strong>就可以了。</p>
<p>简单，超乎想象：</p>
<div class="zxx_code">
<pre><span style="color:green;">// 假设周长是1068, percent是百分比值</span>
circle.setAttribute('stroke-dasharray', 1068 * percent + " 1069");</pre>
</div>
<p>就OK了。<img src="http://mat1.gtimg.com/www/mb/images/face/4.gif" align="absmiddle"></p>
<p>哦~~差点忘了。默认<code>stroke-dasharray</code>的起始位置在右侧，而不是上方，因此，偶们需要使用<code>transform</code>逆时针旋转90°, 这就是第二个<code>circle</code>元素上面<code>transform="matrix(0,-1,1,0,0,440)"</code>的由来。</p>
<h3>三、结语</h3>
<p>如题。</p>
<p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4889">http://www.zhangxinxu.com/wordpress/?p=4889</a></p>
<p>（本篇完）</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:68:"http://www.zhangxinxu.com/wordpress/2015/07/svg-circle-loading/feed/";}s:5:"slash";a:1:{s:8:"comments";s:1:"5";}s:7:"summary";s:136:"本文内容如题。有Demo有截图有帅气的源代码展示，不过没有漂亮的妹子，但是这并不会影响你的学习。";s:12:"atom_content";s:20037:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4889">http://www.zhangxinxu.com/wordpress/?p=4889</a></p>
<h3>一、无题</h3>
<p>如题。</p>
<h3>二、正文</h3>
<p>设计师设计了一个图片上传圆环loading进度效果。如下截图：<br />
<img src="http://image.zhangxinxu.com/image/blog/201507/2015-07-31_195235.png" width="131" height="131" alt="loading效果截图" class="imgpad mt10" /></p>
<p>首先，CSS3是可以实现的，以前写过一篇转大饼的文章：“<a href="http://www.zhangxinxu.com/wordpress/2014/04/css3-pie-loading-waiting-animation/">CSS3实现鸡蛋饼饼状图loading等待转转转</a>”。原理跟这个一模一样，两个半区的矩形，然后不同时机巧妙显隐实现。</p>
<p>但是呢，CSS3实现不太好理解，进度控制也不容易，最好直接数值变一变，进度效果就出来。</p>
<p>有没有其他方法呢？</p>
<p>哈，当然有，可以使用同样IE9+支持的SVG.</p>
<p>我们只需要一个实线背景圆，一个虚线变化圆两个圆就可以了。</p>
<p>百闻不如一见，您可以狠狠地点击这里：<a class="a_link" href="http://www.zhangxinxu.com/study/201507/svg-circle-loading.html" target="_blank">SVG实现圆环loading进度效果demo</a></p>
<p>拖动demo下面的range区域选择控件(0-100%)就会发现蓝色高亮圆环跟着一起变化了：<br />
<img src="http://image.zhangxinxu.com/image/blog/201507/2015-07-31_200011.png" width="437" height="514" alt="圆环效果截图" class="imgpad mt10" /></p>
<p>SVG代码非常简单，如下示意：</p>
<div class="zxx_code">
<pre>&lt;svg width="440" height="440">
    &lt;circle cx="220" cy="220" r="170" stroke-width="50" stroke="#D1D3D7" fill="none">&lt;/circle>
    &lt;circle cx="220" cy="220" r="170" stroke-width="50" stroke="#00A5E0" fill="none" transform="matrix(0,-1,1,0,0,440)" <strong style="color:#cd0000;">stroke-dasharray="0 1069"</strong>>&lt;/circle>
&lt;/svg></pre>
</div>
<p>其中，上面红色加粗的就是效果实现的关键。</p>
<p><code>stroke-dasharray</code>在SVG中表示描边是虚线，两个值，第一个是虚线的宽度，第二个是虚线之间的间距。下面就是一些虚线数据值以及最后的效果表现（实时，非截图，IE9+浏览）：</p>
<div class="zxx_code">
<pre class="brush: html  language-html" data-number=""><span class="token prolog">&lt;?xml version="1.0"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">viewPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 200 300<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5, 5<span class="token punctuation">"</span></span>              <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5, 10<span class="token punctuation">"</span></span>             <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10, 5<span class="token punctuation">"</span></span>             <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5, 1<span class="token punctuation">"</span></span>              <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>70<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>70<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1, 5<span class="token punctuation">"</span></span>              <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.9<span class="token punctuation">"</span></span>               <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>110<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>110<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15, 10, 5<span class="token punctuation">"</span></span>         <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>130<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>130<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15, 10, 5, 10<span class="token punctuation">"</span></span>     <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15, 10, 5, 10, 15<span class="token punctuation">"</span></span> <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>170<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>170<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>line</span> <span class="token attr-name">stroke-dasharray</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5, 5, 1, 5<span class="token punctuation">"</span></span>        <span class="token attr-name">x1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">y1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">x2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token attr-name">y2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[
line{
    stroke: black;
    stroke-width: 2;
}
]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span><div class="line-number" data-start="1" style="top: 0px;"></div><div class="line-number" data-start="2" style="top: 19px;"></div><div class="line-number" data-start="3" style="top: 38px;"></div><div class="line-number" data-start="4" style="top: 57px;"></div><div class="line-number" data-start="5" style="top: 76px;"></div><div class="line-number" data-start="6" style="top: 95px;"></div><div class="line-number" data-start="7" style="top: 114px;"></div><div class="line-number" data-start="8" style="top: 133px;"></div><div class="line-number" data-start="9" style="top: 152px;"></div><div class="line-number" data-start="10" style="top: 171px;"></div><div class="line-number" data-start="11" style="top: 190px;"></div><div class="line-number" data-start="12" style="top: 209px;"></div><div class="line-number" data-start="13" style="top: 228px;"></div><div class="line-number" data-start="14" style="top: 247px;"></div><div class="line-number" data-start="15" style="top: 266px;"></div><div class="line-number" data-start="16" style="top: 285px;"></div><div class="line-number" data-start="17" style="top: 304px;"></div><div class="line-number" data-start="18" style="top: 323px;"></div><div class="line-number" data-start="19" style="top: 342px;"></div><div class="line-number" data-start="20" style="top: 361px;"></div><div class="line-number" data-start="21" style="top: 380px;"></div></pre>
</div>
<p><svg width="200" height="200" viewport="0 0 200 300" version="1.1" xmlns="http://www.w3.org/2000/svg">
<line stroke-dasharray="5, 5" x1="10" y1="10" x2="190" y2="10"></line>
<line stroke-dasharray="5, 10" x1="10" y1="30" x2="190" y2="30"></line>
<line stroke-dasharray="10, 5" x1="10" y1="50" x2="190" y2="50"></line>
<line stroke-dasharray="5, 1" x1="10" y1="70" x2="190" y2="70"></line>
<line stroke-dasharray="1, 5" x1="10" y1="90" x2="190" y2="90"></line>
<line stroke-dasharray="0.9" x1="10" y1="110" x2="190" y2="110"></line>
<line stroke-dasharray="15, 10, 5" x1="10" y1="130" x2="190" y2="130"></line>
<line stroke-dasharray="15, 10, 5, 10" x1="10" y1="150" x2="190" y2="150"></line>
<line stroke-dasharray="15, 10, 5, 10, 15" x1="10" y1="170" x2="190" y2="170"></line>
<line stroke-dasharray="5, 5, 1, 5" x1="10" y1="190" x2="190" y2="190"></line>
<style>line{    stroke: black;    stroke-width: 2;}</style>
<p></svg></p>
<p>之前写了篇“<a href="http://www.zhangxinxu.com/wordpress/?p=4089">纯CSS实现帅气的SVG路径描边动画效果</a>”，就是<code>stroke-dasharray</code>的妙用。</p>
<p>这里也是类似原理。</p>
<p>理解了<code>stroke-dasharray</code>，我们的事情就简单了，我们只需要让间距永远不小于圆的周长，然后，<strong>虚线的长度 = 百分比值 * 圆的周长</strong>就可以了。</p>
<p>简单，超乎想象：</p>
<div class="zxx_code">
<pre><span style="color:green;">// 假设周长是1068, percent是百分比值</span>
circle.setAttribute('stroke-dasharray', 1068 * percent + " 1069");</pre>
</div>
<p>就OK了。<img src="http://mat1.gtimg.com/www/mb/images/face/4.gif" align="absmiddle"></p>
<p>哦~~差点忘了。默认<code>stroke-dasharray</code>的起始位置在右侧，而不是上方，因此，偶们需要使用<code>transform</code>逆时针旋转90°, 这就是第二个<code>circle</code>元素上面<code>transform="matrix(0,-1,1,0,0,440)"</code>的由来。</p>
<h3>三、结语</h3>
<p>如题。</p>
<p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4889">http://www.zhangxinxu.com/wordpress/?p=4889</a></p>
<p>（本篇完）</p>
";s:14:"date_timestamp";i:1438352450;}i:5;a:14:{s:5:"title";s:59:"了不起的IE7浏览器-CSS新特性-实现与思维变革";s:4:"link";s:74:"http://www.zhangxinxu.com/wordpress/2015/07/ie7-css-js-improvement-change/";s:8:"comments";s:83:"http://www.zhangxinxu.com/wordpress/2015/07/ie7-css-js-improvement-change/#comments";s:7:"pubdate";s:31:"Thu, 30 Jul 2015 15:42:17 +0000";s:2:"dc";a:1:{s:7:"creator";s:10:"张 鑫旭";}s:8:"category";s:52:"css相关absolutefixedIE7属性选择器拉伸透明";s:4:"guid";s:43:"http://www.zhangxinxu.com/wordpress/?p=4876";s:11:"description";s:360:"以前在我还需要兼容IE6浏览器的时候，我总觉得IE6和IE7浏览器是一个路子的一个货色，很多bug和行为表现是一致的。认为，要兼容IE7和兼容IE7基本上没多大差别。后来深入实践发现，之前的想法有些天真了。实际上，IE7浏览器下，我们也能实现很多好玩且有价值的东西……";s:7:"content";a:1:{s:7:"encoded";s:15921:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4876">http://www.zhangxinxu.com/wordpress/?p=4876</a></p>
<h3>一、不仅仅是IE7浏览器</h3>
<p>本文所展示的一系列特性，以及一些思维方式的转变不仅适用于IE7浏览器，如果你的项目只需要兼容IE9+，或者你直接捣鼓移动端，其实都是适用的。</p>
<p>静心阅读，说不定会发现一些以前没注意的点。</p>
<p>虽然说，整个大中国，IE7份额远不如IE6浏览器，但是，我所从事的几个项目，IE6的占有率相当小，IE7却有6%多:<br />
<img src="http://isux.tencent.com/wp-content/uploads/2015/05/20150522162417680.png" alt="浅议内滚动布局" class="mt10" width="171" height="331"></p>
<p>因此，IE7浏览器还是需要考量的。</p>
<p>以前在我还需要兼容IE6浏览器的时候，我总觉得IE6和IE7浏览器是一个路子的一个货色，很多bug和行为表现是一致的。认为，要兼容IE7和兼容IE7基本上没多大差别。后来深入实践发现，之前的想法有些天真了。实际上，IE7浏览器下，我们也能实现很多好玩且有价值的东西。</p>
<h3>二、IE7新支持选择器以及作用</h3>
<p><strong>1. 多类选择器</strong><br />
所谓多类选择器指的是类似<code>.classA.classB</code>这种多个类名写在一起的选择器，实际上，IE6浏览器也是支持的，但是呢？有bug. <code>.a.c</code>和<code>.b.c</code>貌似会冲突（年代久远，75%的确信），好像是要写成<code>.c.a</code>和<code>.c.b</code>.</p>
<p>IE7浏览器大家可以放心大胆地使用，没有任何bug存在。但是呢，根据数年前我在Chrome浏览器下的测试和分析，多类选择器是CSS选择器中性能相当低下的选择器，好像没有之一。但是呢，CSS选择器本身就很快，对吧，1~2毫秒的差异其实大家也不必在意。毕竟，没人会整个CSS文件全部都是多类选择器，那就太傻了！</p>
<p>IE7支持多类选择器，使得我们在CSS构建的时候，可以放心大胆使用状态类名对整个项目进行控制。</p>
<p>所谓状态类名，有些对应于HTML控件中的一些属性，例如：<code>.disabled</code>, <code>.checked</code>, <code>.active</code>, <code>.selected</code>. 对的，这些特性整站通用，有些人可能会疑问，到处使用，不怕冲突吗？</p>
<p>不怕，这些状态类名，除了通用特性，其余处于一种辅助UI的角色，需要与特定场景相关联，并不会独立使用。</p>
<p>例如，我们项目中有两种按钮，一种是红色，一种是绿色。类名分别是：<code>.button_red</code>, <code>.button_green</code>. 在IE6年代，要实现这两种按钮的禁用态，一般是两个新的独立的类名：<code>.button_red_disabled</code>, <code>.button_green_disabled</code>. 对于按钮本身而言，貌似没什么问题，但是从整个项目来看，有失体系。</p>
<p>现在，IE7支持多类选择器，我们就可以使用整站通用的<code>.disabled</code>状态类名，红色和绿色按钮的禁用态书写，直接就是：<code>.button_red.disabled {}</code>和<code>.button_green.disabled {}</code>. 然后其他什么禁用，我们就是<code>.xxx.disabled</code>等。</p>
<p><strong>2. 相邻父子选择器</strong><br />
所谓相邻父子选择器指的是类似 <code>.classA > .classB</code>这种写法的选择器，只会控制下一层级的元素。IE6浏览器支持的选择器是“后代选择器”，也就是类似<code>.classA .classB</code>，两个选择器之间直接是空格，然而，这种选择器在面对复杂场景的时候，容易样式冲突，不好控制。</p>
<p>例如，连续的<code>ul</code>,<code>li</code>嵌套，单纯使用<code>ul li</code>选择器非常容易出问题，因为<code>ul</code>下面所有的<code>li</code>标签都受影响了，而实际上，我们只想控制本<code>ul</code>下面的<code>li</code>元素。在IE7+浏览器下面，就没有这样的担忧，使用<code>ul > li</code>选择器则完全没有这样的问题。</p>
<p>除了有效降低冲突，提高选择的精确度，我们还可以使用相邻父子选择器实现一些巧妙的功能。举个例子：我也页面上实现藏了几个弹框要加载的DOM元素，默认是要隐藏的，然后，加载到弹框的之前，需要是显示的。怎么搞？</p>
<p>我以前的做法是弹框要加载的时候，使用JS让DOM元素显示。后来鄙人发现，不需要动用JS. 由于默认的DOM元素直接放在<code>&lt;body&gt;</code>下，而弹框装载后到了弹框里面，于是，我使用了一个小小的父子选择器就搞定了整个儿显示问题。</p>
<div class="zxx_code">
<pre>body > .dom { display: none; }</pre>
</div>
<p>元素一旦载入弹框，就会自动显示，因为，它已经不是<code>&lt;body&gt;</code>下相邻的子元素了。</p>
<p><strong>3. 相邻兄弟选择器</strong><br />
相邻兄弟选择器指的是类似 <code>.classA + .classB</code>这种写法的选择器，表示紧跟在我后面的兄弟选择器，注意必须是紧跟着的兄弟，其他远一点的，或者前面的兄弟都不行。</p>
<p>别小看这个选择器，我们可以让IE7浏览器也绽放夺目的光彩。</p>
<p>先举个简单实用的小例子。我们使用弹框的时候，右下角或左下角或者中间都有两个按钮，按钮之间有一定的距离，假设20像素：</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201507/2015-07-30_001036.png" width="305" height="130" alt="弹框按钮截图" class="alignnone" /></p>
<p>有没有什么方法实现单纯的20像素间距，而没有其他多余的margin呢？</p>
<p>传统思路可能是这样：</p>
<div class="zxx_code">
<pre>.button { margin-left: 20px; }
.button:first-child { margin-left: 0; }</pre>
</div>
<p>中文释义就是，左边20像素间距，其中，第一个按钮左间距为0. 鼓掌。其实不失为一个好方法。如果我们转换下思路，实现起来可能就更加简单了：</p>
<div class="zxx_code">
<pre>.button + .button { margin-left: 20px; }</pre>
</div>
<p>天然第一个按钮不会有<code>margin-left</code>间距值。</p>
<p>再举个大点的也更实用的例子，大家可能听过<a href="http://www.zhangxinxu.com/wordpress/2012/01/css-css3-selector-element-display-tab-listdown/">CSS3单复选框技术</a>. 在IE9+浏览器下，我们可以使用单选框和复选框的一些特性，实现展开收起，选项卡，开关效果等。</p>
<p>实际上，我们IE7浏览器也能近似实现这样的效果。IE7、IE8虽然不支持原生的CSS3选择器<code>:checked</code>, 但是，属性选择器还是基本支持的，加上同样支持各类兄弟选择器，于是，IE7浏览器也能渐进使用这类CSS3新技术。</p>
<div class="zxx_code">
<pre>:checked + .xxx { <span style="color:green;">/* IE9+选中效果 */</span> }
[checked] + .xxx { <span style="color:green;">/* IE8选中效果 */</span> }
[defaultChecked] + .xxx { <span style="color:green;">/* IE7选中效果 */</span> }</pre>
</div>
<p><strong>4. 兄弟选择器</strong><br />
兄弟选择器指的是类似 <code>.classA ~ .classB</code>这种写法的选择器，使用的是弯弯符号，表示A元素后面的所有兄弟元素。对，只能是后面的元素。严格来说，这是个CSS3选择器，但是IE7浏览器支持之，且我使用下来还没遇到过什么诡异问题。</p>
<p>IE7+浏览器下，由于相邻兄弟选择器和兄弟选择器的存在，我们在JS构建一些DOM元素来实现一些UI组件效果的时候，我们的处理方法可能就会发生一些变化。举个例子，<code>placeholder</code>占位符效果。从实现上讲，<code>input</code>元素前插入构建的含<code>placeholder</code>值的元素是最简单也更容易定位的；但是，实际实现的时候，确实要遵循<strong>后置原则</strong>, 也就是创建的元素要在目标元素的后面。</p>
<p>为什么呢？</p>
<p>原因很简单，在CSS中，我们没有前兄弟选择器，只有后兄弟选择器。于是，我们只能根据前面兄弟控制后面。</p>
<p>还是上面<code>placeholder</code>例子，由于我们是后置实现，于是，我们就能轻松通过CSS实现focus时候，<code>placeholder</code>文字透明度降低到40%的效果：</p>
<div class="zxx_code">
<pre>input:focus + .xxx { filter: alpha(opacity=40); }</pre>
</div>
<p>但是，要是你前置，或者包裹，都是不行滴！</p>
<p><strong>5. 属性选择器</strong><br />
包括CSS 2.1水平的属性选择器<code>[attr]</code>, <code>[attr="val"]</code>, <code>[attr~="val"]</code>, <code>[attr|="bar"]</code>以及CSS3水平的属性选择器<code>[foo^="bar"]</code>, <code>[foo$="bar"]</code>, <code>[foo*="bar"]</code>.</p>
<p>没错，所有这些属性选择器IE7浏览器都是支持的，虽然<a href="http://www.zhangxinxu.com/wordpress/2015/06/ie7-attribute-css-selector/">某些细节上有些小bug</a>, 但是，基本的属性全部都是支持的。</p>
<p>于是，我们就可以使用属性选择器，隐藏项目中所有的单复选框以及submit按钮，而使用UI更好的自定义<code>&lt;label&gt;</code>控件元素替换显示。</p>
<div class="zxx_code">
<pre>input[type='radio'],
input[type='checkbox'],
input[type='submit'] {
    position: absolute;
    clip: rect(0 0 0 0);
}</pre>
</div>
<p>好了，老一代的前端由于IE6不支持属性选择器，可能不太认识；新一代的移动端的前端可能只知道CSS3属性选择器，这里有必要简单科普下，尤其<code>[attr~="val"]</code>, <code>[attr|="bar"]这两厮。</p>
<p><strong>[attr~="val"]</strong><br />
这个表示，属性值中间，有匹配<code>val</code>的单词，注意这里的名词——“单词”。CSS3中有一个<code>[foo*="bar"]</code>，表示，属性值中间，有匹配的字符内容，这里这里的名词——“字符”。大家都知道，CSS选择器这东西是老外弄出来的，老外的的母语是English, English的句子都是一个单词+空格+一个单词实现的。这这里的<code>[attr~="val"]</code>就是用来匹配这些单词的。因此：</p>
<div class="zxx_code">
<pre>
&lt;div attr="val">&lt;/div>      <img src="http://mat1.gtimg.com/www/mb/images/face/13.gif" align="absmiddle">
&lt;div attr="text val">&lt;/div> <img src="http://mat1.gtimg.com/www/mb/images/face/13.gif" align="absmiddle">
&lt;div attr="value">&lt;/div>    <img src="http://mat1.gtimg.com/www/mb/images/face/18.gif" align="absmiddle">
&lt;div attr="val-ue">&lt;/div>   <img src="http://mat1.gtimg.com/www/mb/images/face/18.gif" align="absmiddle"></pre>
</div>
<p>表情出卖了一切。笑脸是支持，能识别，抓狂是不能识别。而<code>[attr*="val"]</code>上面4个都是支持的，因为，每个<code>attr</code>属性值都有<code>val</code>字符。</p>
<p><strong>[attr|="bar"]</strong><br />
这个表示，属性值开头必须是<code>bar</code>的单词，或者开头是<code>bar-</code>。CSS3中有一个<code>[foo^="bar"]</code>，表示属性值以<code>bar</code>字符开头即可。类似上面的单词和字符的区别，因此有：</p>
<div class="zxx_code">
<pre>
&lt;div attr="bar">&lt;/div>      <img src="http://mat1.gtimg.com/www/mb/images/face/13.gif" align="absmiddle">
&lt;div attr="bar-val">&lt;/div> <img src="http://mat1.gtimg.com/www/mb/images/face/13.gif" align="absmiddle">
&lt;div attr="barval">&lt;/div>    <img src="http://mat1.gtimg.com/www/mb/images/face/18.gif" align="absmiddle">
&lt;div attr="bar val">&lt;/div>   <img src="http://mat1.gtimg.com/www/mb/images/face/18.gif" align="absmiddle"></pre>
</div>
<p>同样的，如果是使用<code>[foo^="bar"]</code> CSS3选择器，则上面4个都是支持的，因为，每个<code>attr</code>属性值开头都是<code>bar</code>字符。</p>
<p>其他属性选择器，通俗易懂，我就不详细说明了。</p>
<p><strong>6. first-child伪类选择器</strong><br />
IE7浏览器还支持<code>:first-child</code>伪类，可以选择第一个子元素。</p>
<p>但是呢，与之对应的<code>:last-child</code>伪类却不支持，别说IE7浏览器了，IE8浏览器也不支持<code>:last-child</code>伪类，一直到IE9浏览器才支持。</p>
<p>这个伪类能做的事情可多了，各种列表啊，或者细节带图标的按钮啊，等等，对吧，绝对可以释放更多的页面构建的创造力。</p>
<h3>三、新支持的CSS声明或特性</h3>
<p><strong>1. position:fixed固定定位</strong><br />
IE6浏览器只支持absolute定位，IE7——开始支持fixed定位，也就是浏览器观点，元素位置不变，纹丝不动，不被滚走。</p>
<p><code>position:fixed</code>除了基本的定位功能，还能实现纯CSS控制的全屏遮罩效果，以前的JS动态计算就不用了等等，一些珍藏秘籍，以后有机会再分享。</p>
<p><strong>2. min/max-width/height最大/小宽度高度</strong><br />
可以实现特定宽度区间内的自适应布局。例如：1024像素到1280像素，就可以使用<code>min/max-width/height</code>控制，不需要JS参与，兼容IE7+浏览器。</p>
<p><code>min/max-width/height</code>本质上也属于响应式CSS属性。其作用还是很强的，使用频率也是相当之高，以前棘手的特定范围内的图片尺寸控制也有了新思路。</p>
<p><strong>3. absolute拉伸</strong><br />
<code>absolute</code>元素，如果没有明显的尺寸限制说，当<code>left/right</code>和<code>top/bottom</code>对立方向的属性值同时存在的时候，元素的尺寸会被拉伸，同时，该拉伸的元素内部支持百分比高度，于是我们就能四线高度自适应效果实现。</p>
<p>并再次基础上衍生出内滚动布局等等。</p>
<p><strong>4. png alpha透明</strong><br />
以前IE6浏览器只支持索引透明，IE7浏览器下面，不仅索引透明支持，Alpha通道透明也支持。于是乎，我们的布局更自由，图片资源利用率更好了，因为PNG图片适用于各种场景各种背景，从此告别传统年代图标的毛刺的效果图。</p>
<p><strong>5. border-color:transparent透明</strong><br />
以前IE6浏览器，边框颜色设为<code>transparent</code>实际上显示的是黑色，但是IE7浏览器支持边框透明色，使用border模拟图形的时候，就少了很多阻碍。</p>
<h3>四、JS部分</h3>
<p>Ajax请求可以使用XMLHttpRequest了。</p>
<p>等。</p>
<h3>五、结语部分</h3>
<p>总之，最近做的些不用管IE6，需要兼容IE7的项目，让我发现了很多好玩地东西，页面重构的创造力也比IE6时代要高很多很多。</p>
<p>CSS/HTML技术有时候就是那么回事，看上去挺简单的，但是一旦深入下去，加上自己的创造力和新思维，会发现，尼玛原来做的事情可以有这么多！</p>
<p>好了，已经开始打瞌睡了。已经没有以前结尾可以洋洋洒洒吐槽一大波文字的精气神了。</p>
<p>姿势有限，如果大家发现有错误之处，欢迎纠正，不甚感谢！也欢迎诸位补充可能遗漏的一些IE7的闪光点。</p>
<p>感谢阅读！<img src="http://mat1.gtimg.com/www/mb/images/face/14.gif" align="absmiddle" height="24"></p>
<p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4876">http://www.zhangxinxu.com/wordpress/?p=4876</a></p>
<p>（本篇完）</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:79:"http://www.zhangxinxu.com/wordpress/2015/07/ie7-css-js-improvement-change/feed/";}s:5:"slash";a:1:{s:8:"comments";s:1:"8";}s:7:"summary";s:360:"以前在我还需要兼容IE6浏览器的时候，我总觉得IE6和IE7浏览器是一个路子的一个货色，很多bug和行为表现是一致的。认为，要兼容IE7和兼容IE7基本上没多大差别。后来深入实践发现，之前的想法有些天真了。实际上，IE7浏览器下，我们也能实现很多好玩且有价值的东西……";s:12:"atom_content";s:15921:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4876">http://www.zhangxinxu.com/wordpress/?p=4876</a></p>
<h3>一、不仅仅是IE7浏览器</h3>
<p>本文所展示的一系列特性，以及一些思维方式的转变不仅适用于IE7浏览器，如果你的项目只需要兼容IE9+，或者你直接捣鼓移动端，其实都是适用的。</p>
<p>静心阅读，说不定会发现一些以前没注意的点。</p>
<p>虽然说，整个大中国，IE7份额远不如IE6浏览器，但是，我所从事的几个项目，IE6的占有率相当小，IE7却有6%多:<br />
<img src="http://isux.tencent.com/wp-content/uploads/2015/05/20150522162417680.png" alt="浅议内滚动布局" class="mt10" width="171" height="331"></p>
<p>因此，IE7浏览器还是需要考量的。</p>
<p>以前在我还需要兼容IE6浏览器的时候，我总觉得IE6和IE7浏览器是一个路子的一个货色，很多bug和行为表现是一致的。认为，要兼容IE7和兼容IE7基本上没多大差别。后来深入实践发现，之前的想法有些天真了。实际上，IE7浏览器下，我们也能实现很多好玩且有价值的东西。</p>
<h3>二、IE7新支持选择器以及作用</h3>
<p><strong>1. 多类选择器</strong><br />
所谓多类选择器指的是类似<code>.classA.classB</code>这种多个类名写在一起的选择器，实际上，IE6浏览器也是支持的，但是呢？有bug. <code>.a.c</code>和<code>.b.c</code>貌似会冲突（年代久远，75%的确信），好像是要写成<code>.c.a</code>和<code>.c.b</code>.</p>
<p>IE7浏览器大家可以放心大胆地使用，没有任何bug存在。但是呢，根据数年前我在Chrome浏览器下的测试和分析，多类选择器是CSS选择器中性能相当低下的选择器，好像没有之一。但是呢，CSS选择器本身就很快，对吧，1~2毫秒的差异其实大家也不必在意。毕竟，没人会整个CSS文件全部都是多类选择器，那就太傻了！</p>
<p>IE7支持多类选择器，使得我们在CSS构建的时候，可以放心大胆使用状态类名对整个项目进行控制。</p>
<p>所谓状态类名，有些对应于HTML控件中的一些属性，例如：<code>.disabled</code>, <code>.checked</code>, <code>.active</code>, <code>.selected</code>. 对的，这些特性整站通用，有些人可能会疑问，到处使用，不怕冲突吗？</p>
<p>不怕，这些状态类名，除了通用特性，其余处于一种辅助UI的角色，需要与特定场景相关联，并不会独立使用。</p>
<p>例如，我们项目中有两种按钮，一种是红色，一种是绿色。类名分别是：<code>.button_red</code>, <code>.button_green</code>. 在IE6年代，要实现这两种按钮的禁用态，一般是两个新的独立的类名：<code>.button_red_disabled</code>, <code>.button_green_disabled</code>. 对于按钮本身而言，貌似没什么问题，但是从整个项目来看，有失体系。</p>
<p>现在，IE7支持多类选择器，我们就可以使用整站通用的<code>.disabled</code>状态类名，红色和绿色按钮的禁用态书写，直接就是：<code>.button_red.disabled {}</code>和<code>.button_green.disabled {}</code>. 然后其他什么禁用，我们就是<code>.xxx.disabled</code>等。</p>
<p><strong>2. 相邻父子选择器</strong><br />
所谓相邻父子选择器指的是类似 <code>.classA > .classB</code>这种写法的选择器，只会控制下一层级的元素。IE6浏览器支持的选择器是“后代选择器”，也就是类似<code>.classA .classB</code>，两个选择器之间直接是空格，然而，这种选择器在面对复杂场景的时候，容易样式冲突，不好控制。</p>
<p>例如，连续的<code>ul</code>,<code>li</code>嵌套，单纯使用<code>ul li</code>选择器非常容易出问题，因为<code>ul</code>下面所有的<code>li</code>标签都受影响了，而实际上，我们只想控制本<code>ul</code>下面的<code>li</code>元素。在IE7+浏览器下面，就没有这样的担忧，使用<code>ul > li</code>选择器则完全没有这样的问题。</p>
<p>除了有效降低冲突，提高选择的精确度，我们还可以使用相邻父子选择器实现一些巧妙的功能。举个例子：我也页面上实现藏了几个弹框要加载的DOM元素，默认是要隐藏的，然后，加载到弹框的之前，需要是显示的。怎么搞？</p>
<p>我以前的做法是弹框要加载的时候，使用JS让DOM元素显示。后来鄙人发现，不需要动用JS. 由于默认的DOM元素直接放在<code>&lt;body&gt;</code>下，而弹框装载后到了弹框里面，于是，我使用了一个小小的父子选择器就搞定了整个儿显示问题。</p>
<div class="zxx_code">
<pre>body > .dom { display: none; }</pre>
</div>
<p>元素一旦载入弹框，就会自动显示，因为，它已经不是<code>&lt;body&gt;</code>下相邻的子元素了。</p>
<p><strong>3. 相邻兄弟选择器</strong><br />
相邻兄弟选择器指的是类似 <code>.classA + .classB</code>这种写法的选择器，表示紧跟在我后面的兄弟选择器，注意必须是紧跟着的兄弟，其他远一点的，或者前面的兄弟都不行。</p>
<p>别小看这个选择器，我们可以让IE7浏览器也绽放夺目的光彩。</p>
<p>先举个简单实用的小例子。我们使用弹框的时候，右下角或左下角或者中间都有两个按钮，按钮之间有一定的距离，假设20像素：</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201507/2015-07-30_001036.png" width="305" height="130" alt="弹框按钮截图" class="alignnone" /></p>
<p>有没有什么方法实现单纯的20像素间距，而没有其他多余的margin呢？</p>
<p>传统思路可能是这样：</p>
<div class="zxx_code">
<pre>.button { margin-left: 20px; }
.button:first-child { margin-left: 0; }</pre>
</div>
<p>中文释义就是，左边20像素间距，其中，第一个按钮左间距为0. 鼓掌。其实不失为一个好方法。如果我们转换下思路，实现起来可能就更加简单了：</p>
<div class="zxx_code">
<pre>.button + .button { margin-left: 20px; }</pre>
</div>
<p>天然第一个按钮不会有<code>margin-left</code>间距值。</p>
<p>再举个大点的也更实用的例子，大家可能听过<a href="http://www.zhangxinxu.com/wordpress/2012/01/css-css3-selector-element-display-tab-listdown/">CSS3单复选框技术</a>. 在IE9+浏览器下，我们可以使用单选框和复选框的一些特性，实现展开收起，选项卡，开关效果等。</p>
<p>实际上，我们IE7浏览器也能近似实现这样的效果。IE7、IE8虽然不支持原生的CSS3选择器<code>:checked</code>, 但是，属性选择器还是基本支持的，加上同样支持各类兄弟选择器，于是，IE7浏览器也能渐进使用这类CSS3新技术。</p>
<div class="zxx_code">
<pre>:checked + .xxx { <span style="color:green;">/* IE9+选中效果 */</span> }
[checked] + .xxx { <span style="color:green;">/* IE8选中效果 */</span> }
[defaultChecked] + .xxx { <span style="color:green;">/* IE7选中效果 */</span> }</pre>
</div>
<p><strong>4. 兄弟选择器</strong><br />
兄弟选择器指的是类似 <code>.classA ~ .classB</code>这种写法的选择器，使用的是弯弯符号，表示A元素后面的所有兄弟元素。对，只能是后面的元素。严格来说，这是个CSS3选择器，但是IE7浏览器支持之，且我使用下来还没遇到过什么诡异问题。</p>
<p>IE7+浏览器下，由于相邻兄弟选择器和兄弟选择器的存在，我们在JS构建一些DOM元素来实现一些UI组件效果的时候，我们的处理方法可能就会发生一些变化。举个例子，<code>placeholder</code>占位符效果。从实现上讲，<code>input</code>元素前插入构建的含<code>placeholder</code>值的元素是最简单也更容易定位的；但是，实际实现的时候，确实要遵循<strong>后置原则</strong>, 也就是创建的元素要在目标元素的后面。</p>
<p>为什么呢？</p>
<p>原因很简单，在CSS中，我们没有前兄弟选择器，只有后兄弟选择器。于是，我们只能根据前面兄弟控制后面。</p>
<p>还是上面<code>placeholder</code>例子，由于我们是后置实现，于是，我们就能轻松通过CSS实现focus时候，<code>placeholder</code>文字透明度降低到40%的效果：</p>
<div class="zxx_code">
<pre>input:focus + .xxx { filter: alpha(opacity=40); }</pre>
</div>
<p>但是，要是你前置，或者包裹，都是不行滴！</p>
<p><strong>5. 属性选择器</strong><br />
包括CSS 2.1水平的属性选择器<code>[attr]</code>, <code>[attr="val"]</code>, <code>[attr~="val"]</code>, <code>[attr|="bar"]</code>以及CSS3水平的属性选择器<code>[foo^="bar"]</code>, <code>[foo$="bar"]</code>, <code>[foo*="bar"]</code>.</p>
<p>没错，所有这些属性选择器IE7浏览器都是支持的，虽然<a href="http://www.zhangxinxu.com/wordpress/2015/06/ie7-attribute-css-selector/">某些细节上有些小bug</a>, 但是，基本的属性全部都是支持的。</p>
<p>于是，我们就可以使用属性选择器，隐藏项目中所有的单复选框以及submit按钮，而使用UI更好的自定义<code>&lt;label&gt;</code>控件元素替换显示。</p>
<div class="zxx_code">
<pre>input[type='radio'],
input[type='checkbox'],
input[type='submit'] {
    position: absolute;
    clip: rect(0 0 0 0);
}</pre>
</div>
<p>好了，老一代的前端由于IE6不支持属性选择器，可能不太认识；新一代的移动端的前端可能只知道CSS3属性选择器，这里有必要简单科普下，尤其<code>[attr~="val"]</code>, <code>[attr|="bar"]这两厮。</p>
<p><strong>[attr~="val"]</strong><br />
这个表示，属性值中间，有匹配<code>val</code>的单词，注意这里的名词——“单词”。CSS3中有一个<code>[foo*="bar"]</code>，表示，属性值中间，有匹配的字符内容，这里这里的名词——“字符”。大家都知道，CSS选择器这东西是老外弄出来的，老外的的母语是English, English的句子都是一个单词+空格+一个单词实现的。这这里的<code>[attr~="val"]</code>就是用来匹配这些单词的。因此：</p>
<div class="zxx_code">
<pre>
&lt;div attr="val">&lt;/div>      <img src="http://mat1.gtimg.com/www/mb/images/face/13.gif" align="absmiddle">
&lt;div attr="text val">&lt;/div> <img src="http://mat1.gtimg.com/www/mb/images/face/13.gif" align="absmiddle">
&lt;div attr="value">&lt;/div>    <img src="http://mat1.gtimg.com/www/mb/images/face/18.gif" align="absmiddle">
&lt;div attr="val-ue">&lt;/div>   <img src="http://mat1.gtimg.com/www/mb/images/face/18.gif" align="absmiddle"></pre>
</div>
<p>表情出卖了一切。笑脸是支持，能识别，抓狂是不能识别。而<code>[attr*="val"]</code>上面4个都是支持的，因为，每个<code>attr</code>属性值都有<code>val</code>字符。</p>
<p><strong>[attr|="bar"]</strong><br />
这个表示，属性值开头必须是<code>bar</code>的单词，或者开头是<code>bar-</code>。CSS3中有一个<code>[foo^="bar"]</code>，表示属性值以<code>bar</code>字符开头即可。类似上面的单词和字符的区别，因此有：</p>
<div class="zxx_code">
<pre>
&lt;div attr="bar">&lt;/div>      <img src="http://mat1.gtimg.com/www/mb/images/face/13.gif" align="absmiddle">
&lt;div attr="bar-val">&lt;/div> <img src="http://mat1.gtimg.com/www/mb/images/face/13.gif" align="absmiddle">
&lt;div attr="barval">&lt;/div>    <img src="http://mat1.gtimg.com/www/mb/images/face/18.gif" align="absmiddle">
&lt;div attr="bar val">&lt;/div>   <img src="http://mat1.gtimg.com/www/mb/images/face/18.gif" align="absmiddle"></pre>
</div>
<p>同样的，如果是使用<code>[foo^="bar"]</code> CSS3选择器，则上面4个都是支持的，因为，每个<code>attr</code>属性值开头都是<code>bar</code>字符。</p>
<p>其他属性选择器，通俗易懂，我就不详细说明了。</p>
<p><strong>6. first-child伪类选择器</strong><br />
IE7浏览器还支持<code>:first-child</code>伪类，可以选择第一个子元素。</p>
<p>但是呢，与之对应的<code>:last-child</code>伪类却不支持，别说IE7浏览器了，IE8浏览器也不支持<code>:last-child</code>伪类，一直到IE9浏览器才支持。</p>
<p>这个伪类能做的事情可多了，各种列表啊，或者细节带图标的按钮啊，等等，对吧，绝对可以释放更多的页面构建的创造力。</p>
<h3>三、新支持的CSS声明或特性</h3>
<p><strong>1. position:fixed固定定位</strong><br />
IE6浏览器只支持absolute定位，IE7——开始支持fixed定位，也就是浏览器观点，元素位置不变，纹丝不动，不被滚走。</p>
<p><code>position:fixed</code>除了基本的定位功能，还能实现纯CSS控制的全屏遮罩效果，以前的JS动态计算就不用了等等，一些珍藏秘籍，以后有机会再分享。</p>
<p><strong>2. min/max-width/height最大/小宽度高度</strong><br />
可以实现特定宽度区间内的自适应布局。例如：1024像素到1280像素，就可以使用<code>min/max-width/height</code>控制，不需要JS参与，兼容IE7+浏览器。</p>
<p><code>min/max-width/height</code>本质上也属于响应式CSS属性。其作用还是很强的，使用频率也是相当之高，以前棘手的特定范围内的图片尺寸控制也有了新思路。</p>
<p><strong>3. absolute拉伸</strong><br />
<code>absolute</code>元素，如果没有明显的尺寸限制说，当<code>left/right</code>和<code>top/bottom</code>对立方向的属性值同时存在的时候，元素的尺寸会被拉伸，同时，该拉伸的元素内部支持百分比高度，于是我们就能四线高度自适应效果实现。</p>
<p>并再次基础上衍生出内滚动布局等等。</p>
<p><strong>4. png alpha透明</strong><br />
以前IE6浏览器只支持索引透明，IE7浏览器下面，不仅索引透明支持，Alpha通道透明也支持。于是乎，我们的布局更自由，图片资源利用率更好了，因为PNG图片适用于各种场景各种背景，从此告别传统年代图标的毛刺的效果图。</p>
<p><strong>5. border-color:transparent透明</strong><br />
以前IE6浏览器，边框颜色设为<code>transparent</code>实际上显示的是黑色，但是IE7浏览器支持边框透明色，使用border模拟图形的时候，就少了很多阻碍。</p>
<h3>四、JS部分</h3>
<p>Ajax请求可以使用XMLHttpRequest了。</p>
<p>等。</p>
<h3>五、结语部分</h3>
<p>总之，最近做的些不用管IE6，需要兼容IE7的项目，让我发现了很多好玩地东西，页面重构的创造力也比IE6时代要高很多很多。</p>
<p>CSS/HTML技术有时候就是那么回事，看上去挺简单的，但是一旦深入下去，加上自己的创造力和新思维，会发现，尼玛原来做的事情可以有这么多！</p>
<p>好了，已经开始打瞌睡了。已经没有以前结尾可以洋洋洒洒吐槽一大波文字的精气神了。</p>
<p>姿势有限，如果大家发现有错误之处，欢迎纠正，不甚感谢！也欢迎诸位补充可能遗漏的一些IE7的闪光点。</p>
<p>感谢阅读！<img src="http://mat1.gtimg.com/www/mb/images/face/14.gif" align="absmiddle" height="24"></p>
<p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4876">http://www.zhangxinxu.com/wordpress/?p=4876</a></p>
<p>（本篇完）</p>
";s:14:"date_timestamp";i:1438270937;}i:6;a:14:{s:5:"title";s:41:"CSS1-CSS3 <color>颜色知识知多少？";s:4:"link";s:65:"http://www.zhangxinxu.com/wordpress/2015/07/know-css1-css3-color/";s:8:"comments";s:74:"http://www.zhangxinxu.com/wordpress/2015/07/know-css1-css3-color/#comments";s:7:"pubdate";s:31:"Sat, 25 Jul 2015 16:24:13 +0000";s:2:"dc";a:1:{s:7:"creator";s:10:"张 鑫旭";}s:8:"category";s:43:"css相关colorcurrentColortransparent颜色";s:4:"guid";s:43:"http://www.zhangxinxu.com/wordpress/?p=4859";s:11:"description";s:269:"本文讲的是CSS1-CSS3 &#60;color&#62;颜色的一些知识，有些你可能知道，有些可能并不知道，算是对过往一些知识点的总结吧。无Demo，有截图，有源代码示意，总之，希望本文的内容能够对您的学习有所帮助。";s:7:"content";a:1:{s:7:"encoded";s:47760:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4859">http://www.zhangxinxu.com/wordpress/?p=4859</a></p>
<style>.entry dt{font-weight:bold;margin-top:15px;}.entry dd{margin-left:10px;padding:0 10px;}.eg-bg{width:68px; height:28px;margin-top:5px;}</style>
<h3>一、废话少说，直奔主题</h3>
<p>大家有没有发现我最新几篇文章废话少了，是博主记得按时吃药了？<img src="http://mat1.gtimg.com/www/mb/images/face/62.gif" height="24" align="absmiddle"></p>
<p>大家想多了，一是升级成奶爸奶孩子，二是公司排山倒海的活，完全就没有吐槽废话的时间和精力，只能有啥说啥。</p>
<p>好了，虽然心中有千万个奔腾的马震，只能压在心中，直奔主题，讲讲CSS1-CSS3 &lt;color&gt;颜色的一些知识，有些你可能知道，有些可能并不知道，一些非常基本的知识我这里就不赘述。</p>
<h3>二、color颜色关键字</h3>
<p>这里的color颜色关键字指的是诸如<code>red</code>, <code>blue</code>这些货。</p>
<p>CSS level1的时候，那时候只有支持16个基本颜色关键字，诸如<code>black</code>, <code>white</code>这些货，为什么数目这么少呢？我们可以想想当时的显示器水平，不是黑白的已经不错了。</p>
<p>然后，CSS level2的时候，加入了橙色<code>orange</code>, 棕色<code>brown</code>等等颜色关键字。</p>
<p>然后，到了CSS level3的时候，颜色关键字家族进一步壮大，<code>mediumturquoise</code>这样的鬼都出现了。这些扩展的CSS颜色关键字，是有专门的名称的，称之为&#8221;<code><a href="https://en.wikipedia.org/wiki/X11_color_names" target="_blank">X11颜色名</a></code>&#8220;，这里的&#8221;X11&#8243;不是11区的意思，而是指用来位图显示的<strong>X Window System</strong>，常见于UNIX-like计算机系统上。</p>
<p>其实呢，这些X11颜色名我5年前，也就是10年的时候就写过文章分享过——“<a href="http://www.zhangxinxu.com/wordpress/?p=1064">CSS3下的147个颜色名称及对应颜色值</a>”，您可以狠狠地点击这里：<a href="http://www.zhangxinxu.com/study/201008/css3-color-names.php" target="_blank" class="a_link">CSS3下的147个颜色名称实例页面</a></p>
<p>不过这篇文章，就像是往海里扔了个宝石，连个回响都没有，现在想想，确实价值不明显，尤其我们的母语是中文，这些长得像王宝强的英文单词，很难记住的。</p>
<p>上面的颜色关键值列表是按英文单词字母排序的，OK，这里再展示个按照CSS水平来排列的，可读性可能会更好一些：</p>
<table class="params_table" width="600" cellspacing="1" cellpadding="0">
<thead>
<tr>
<th scope="col">规范</th>
<th scope="col">颜色</th>
<th scope="col">关键字</th>
<th scope="col">RGB hex值</th>
<th scope="col">实时表现</th>
</tr>
</thead>
<tbody>
<tr style="position: relative;">
<td rowspan="16"><a href="http://www.w3.org/TR/CSS1/" class="external external-icon" lang="en" title="The 'CSS Level&nbsp;1' specification" hreflang="en">CSS Level&nbsp;1</a></td>
<td style="background: #000;">&nbsp;</td>
<td style="text-align: center;"><code>black</code></td>
<td><code>#000000</code></td>
<td style="background: black;">&nbsp;</td>
</tr>
<tr>
<td style="background: #C0C0C0;">&nbsp;</td>
<td style="text-align: center;"><code>silver</code></td>
<td><code>#c0c0c0</code></td>
<td style="background: silver;">&nbsp;</td>
</tr>
<tr>
<td style="background: #808080;">&nbsp;</td>
<td style="text-align: center;"><code>gray</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#808080</code></td>
<td style="background: gray;">&nbsp;</td>
</tr>
<tr>
<td style="background: #FFF;">&nbsp;</td>
<td style="text-align: center;"><code>white</code></td>
<td><code>#ffffff</code></td>
<td style="background: white;">&nbsp;</td>
</tr>
<tr>
<td style="background: #800000;">&nbsp;</td>
<td style="text-align: center;"><code>maroon</code></td>
<td><code>#800000</code></td>
<td style="background: maroon;">&nbsp;</td>
</tr>
<tr>
<td style="background: #F00;">&nbsp;</td>
<td style="text-align: center;"><code>red</code></td>
<td><code>#ff0000</code></td>
<td style="background: red;">&nbsp;</td>
</tr>
<tr>
<td style="background: #800080;">&nbsp;</td>
<td style="text-align: center;"><code>purple</code></td>
<td><code>#800080</code></td>
<td style="background: purple;">&nbsp;</td>
</tr>
<tr>
<td style="background: #F0F;">&nbsp;</td>
<td style="text-align: center;"><code>fuchsia</code></td>
<td><code>#ff00ff</code></td>
<td style="background: fuchsia;">&nbsp;</td>
</tr>
<tr>
<td style="background: #008000;">&nbsp;</td>
<td style="text-align: center;"><code>green</code></td>
<td><code>#008000</code></td>
<td style="background: green;">&nbsp;</td>
</tr>
<tr>
<td style="background: #0F0;">&nbsp;</td>
<td style="text-align: center;"><code>lime</code></td>
<td><code>#00ff00</code></td>
<td style="background: lime;">&nbsp;</td>
</tr>
<tr>
<td style="background: #808000;">&nbsp;</td>
<td style="text-align: center;"><code>olive</code></td>
<td><code>#808000</code></td>
<td style="background: olive;">&nbsp;</td>
</tr>
<tr>
<td style="background: #FF0;">&nbsp;</td>
<td style="text-align: center;"><code>yellow</code></td>
<td><code>#ffff00</code></td>
<td style="background: yellow;">&nbsp;</td>
</tr>
<tr>
<td style="background: #000080;">&nbsp;</td>
<td style="text-align: center;"><code>navy</code></td>
<td><code>#000080</code></td>
<td style="background: navy;">&nbsp;</td>
</tr>
<tr>
<td style="background: #00F;">&nbsp;</td>
<td style="text-align: center;"><code>blue</code></td>
<td><code>#0000ff</code></td>
<td style="background: blue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #008080;">&nbsp;</td>
<td style="text-align: center;"><code>teal</code></td>
<td><code>#008080</code></td>
<td style="background: teal;">&nbsp;</td>
</tr>
<tr>
<td style="background: #0FF;">&nbsp;</td>
<td style="text-align: center;"><code>aqua</code></td>
<td><code>#00ffff</code></td>
<td style="background: aqua;">&nbsp;</td>
</tr>
<tr>
<td><a href="http://www.w3.org/TR/CSS2/" class="external external-icon" lang="en" title="The 'CSS Level&nbsp;2 (Revision&nbsp;1)' specification" hreflang="en">CSS Level&nbsp;2 (Revision&nbsp;1)</a></td>
<td style="background: #FFA500;">&nbsp;</td>
<td style="text-align: center;"><code>orange</code></td>
<td><code>#ffa500</code></td>
<td style="background: orange;">&nbsp;</td>
</tr>
<tr>
<td rowspan="128"><a href="http://dev.w3.org/csswg/css3-color/" class="external external-icon" lang="en" title="The 'CSS Color Module Level&nbsp;3' specification" hreflang="en">CSS Color Module Level&nbsp;3</a></td>
<td style="background: #f0f8ff;">&nbsp;</td>
<td style="text-align: center;"><code>aliceblue</code></td>
<td><code>#f0f8ff</code></td>
<td style="background: aliceblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #faebd7;">&nbsp;</td>
<td style="text-align: center;"><code>antiquewhite</code></td>
<td><code>#faebd7</code></td>
<td style="background: antiquewhite;">&nbsp;</td>
</tr>
<tr>
<td style="background: #7fffd4;">&nbsp;</td>
<td style="text-align: center;"><code>aquamarine</code></td>
<td><code>#7fffd4</code></td>
<td style="background: aquamarine;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f0ffff;">&nbsp;</td>
<td style="text-align: center;"><code>azure</code></td>
<td><code>#f0ffff</code></td>
<td style="background: azure;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f5f5dc;">&nbsp;</td>
<td style="text-align: center;"><code>beige</code></td>
<td><code>#f5f5dc</code></td>
<td style="background: beige;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffe4c4;">&nbsp;</td>
<td style="text-align: center;"><code>bisque</code></td>
<td><code>#ffe4c4</code></td>
<td style="background: bisque;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffebcd;">&nbsp;</td>
<td style="text-align: center;"><code>blanchedalmond</code></td>
<td><code>#ffe4c4</code></td>
<td style="background: blanchedalmond;">&nbsp;</td>
</tr>
<tr>
<td style="background: #8a2be2;">&nbsp;</td>
<td style="text-align: center;"><code>blueviolet</code></td>
<td><code>#8a2be2</code></td>
<td style="background: blueviolet;">&nbsp;</td>
</tr>
<tr>
<td style="background: #a52a2a;">&nbsp;</td>
<td style="text-align: center;"><code>brown</code></td>
<td><code>#a52a2a</code></td>
<td style="background: brown;">&nbsp;</td>
</tr>
<tr>
<td style="background: #deb887;">&nbsp;</td>
<td style="text-align: center;"><code>burlywood</code></td>
<td><code>#deb887</code></td>
<td style="background: burlywood;">&nbsp;</td>
</tr>
<tr>
<td style="background: #5f9ea0;">&nbsp;</td>
<td style="text-align: center;"><code>cadetblue</code></td>
<td><code>#5f9ea0</code></td>
<td style="background: cadetblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #7fff00;">&nbsp;</td>
<td style="text-align: center;"><code>chartreuse</code></td>
<td><code>#7fff00</code></td>
<td style="background: chartreuse;">&nbsp;</td>
</tr>
<tr>
<td style="background: #d2691e;">&nbsp;</td>
<td style="text-align: center;"><code>chocolate</code></td>
<td><code>#d2691e</code></td>
<td style="background: chocolate;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ff7f50;">&nbsp;</td>
<td style="text-align: center;"><code>coral</code></td>
<td><code>#ff7f50</code></td>
<td style="background: coral;">&nbsp;</td>
</tr>
<tr>
<td style="background: #6495ed;">&nbsp;</td>
<td style="text-align: center;"><code>cornflowerblue</code></td>
<td><code>#6495ed</code></td>
<td style="background: cornflowerblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fff8dc;">&nbsp;</td>
<td style="text-align: center;"><code>cornsilk</code></td>
<td><code>#fff8dc</code></td>
<td style="background: cornsilk;">&nbsp;</td>
</tr>
<tr>
<td style="background: #dc143c;">&nbsp;</td>
<td style="text-align: center;"><code>crimson</code></td>
<td><code>#dc143c</code></td>
<td style="background: crimson;">&nbsp;</td>
</tr>
<tr>
<td style="background: #00008b;">&nbsp;</td>
<td style="text-align: center;"><code>darkblue</code></td>
<td><code>#00008b</code></td>
<td style="background: darkblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #008b8b;">&nbsp;</td>
<td style="text-align: center;"><code>darkcyan</code></td>
<td><code>#008b8b</code></td>
<td style="background: darkcyan;">&nbsp;</td>
</tr>
<tr>
<td style="background: #b8860b;">&nbsp;</td>
<td style="text-align: center;"><code>darkgoldenrod</code></td>
<td><code>#b8860b</code></td>
<td style="background: darkgoldenrod;">&nbsp;</td>
</tr>
<tr>
<td style="background: #a9a9a9;">&nbsp;</td>
<td style="text-align: center;"><code>darkgray</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#a9a9a9</code></td>
<td style="background: darkgray;">&nbsp;</td>
</tr>
<tr>
<td style="background: #006400;">&nbsp;</td>
<td style="text-align: center;"><code>darkgreen</code></td>
<td><code>#006400</code></td>
<td style="background: darkgreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #a9a9a9;">&nbsp;</td>
<td style="text-align: center;"><code>darkgrey</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#a9a9a9</code></td>
<td style="background: darkgrey;">&nbsp;</td>
</tr>
<tr>
<td style="background: #bdb76b;">&nbsp;</td>
<td style="text-align: center;"><code>darkkhaki</code></td>
<td><code>#bdb76b</code></td>
<td style="background: darkkhaki;">&nbsp;</td>
</tr>
<tr>
<td style="background: #8b008b;">&nbsp;</td>
<td style="text-align: center;"><code>darkmagenta</code></td>
<td><code>#8b008b</code></td>
<td style="background: darkmagenta;">&nbsp;</td>
</tr>
<tr>
<td style="background: #556b2f;">&nbsp;</td>
<td style="text-align: center;"><code>darkolivegreen</code></td>
<td><code>#556b2f</code></td>
<td style="background: darkolivegreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ff8c00;">&nbsp;</td>
<td style="text-align: center;"><code>darkorange</code></td>
<td><code>#ff8c00</code></td>
<td style="background: darkorange;">&nbsp;</td>
</tr>
<tr>
<td style="background: #9932cc;">&nbsp;</td>
<td style="text-align: center;"><code>darkorchid</code></td>
<td><code>#9932cc</code></td>
<td style="background: darkorchid;">&nbsp;</td>
</tr>
<tr>
<td style="background: #8b0000;">&nbsp;</td>
<td style="text-align: center;"><code>darkred</code></td>
<td><code>#8b0000</code></td>
<td style="background: darkred;">&nbsp;</td>
</tr>
<tr>
<td style="background: #e9967a;">&nbsp;</td>
<td style="text-align: center;"><code>darksalmon</code></td>
<td><code>#e9967a</code></td>
<td style="background: darksalmon;">&nbsp;</td>
</tr>
<tr>
<td style="background: #8fbc8f;">&nbsp;</td>
<td style="text-align: center;"><code>darkseagreen</code></td>
<td><code>#8fbc8f</code></td>
<td style="background: darkseagreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #483d8b;">&nbsp;</td>
<td style="text-align: center;"><code>darkslateblue</code></td>
<td><code>#483d8b</code></td>
<td style="background: darkslateblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #2f4f4f;">&nbsp;</td>
<td style="text-align: center;"><code>darkslategray</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#2f4f4f</code></td>
<td style="background: darkslategray;">&nbsp;</td>
</tr>
<tr>
<td style="background: #2f4f4f;">&nbsp;</td>
<td style="text-align: center;"><code>darkslategrey</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#2f4f4f</code></td>
<td style="background: darkslategrey;">&nbsp;</td>
</tr>
<tr>
<td style="background: #00ced1;">&nbsp;</td>
<td style="text-align: center;"><code>darkturquoise</code></td>
<td><code>#00ced1</code></td>
<td style="background: darkturquoise;">&nbsp;</td>
</tr>
<tr>
<td style="background: #9400d3;">&nbsp;</td>
<td style="text-align: center;"><code>darkviolet</code></td>
<td><code>#9400d3</code></td>
<td style="background: darkviolet;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ff1493;">&nbsp;</td>
<td style="text-align: center;"><code>deeppink</code></td>
<td><code>#ff1493</code></td>
<td style="background: deeppink;">&nbsp;</td>
</tr>
<tr>
<td style="background: #00bfff;">&nbsp;</td>
<td style="text-align: center;"><code>deepskyblue</code></td>
<td><code>#00bfff</code></td>
<td style="background: deepskyblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #696969;">&nbsp;</td>
<td style="text-align: center;"><code>dimgray</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#696969</code></td>
<td style="background: dimgray;">&nbsp;</td>
</tr>
<tr>
<td style="background: #696969;">&nbsp;</td>
<td style="text-align: center;"><code>dimgrey</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#696969</code></td>
<td style="background: dimgrey;">&nbsp;</td>
</tr>
<tr>
<td style="background: #1e90ff;">&nbsp;</td>
<td style="text-align: center;"><code>dodgerblue</code></td>
<td><code>#1e90ff</code></td>
<td style="background: dodgerblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #b22222;">&nbsp;</td>
<td style="text-align: center;"><code>firebrick</code></td>
<td><code>#b22222</code></td>
<td style="background: firebrick;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fffaf0;">&nbsp;</td>
<td style="text-align: center;"><code>floralwhite</code></td>
<td><code>#fffaf0</code></td>
<td style="background: floralwhite;">&nbsp;</td>
</tr>
<tr>
<td style="background: #228b22;">&nbsp;</td>
<td style="text-align: center;"><code>forestgreen</code></td>
<td><code>#228b22</code></td>
<td style="background: forestgreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #dcdcdc;">&nbsp;</td>
<td style="text-align: center;"><code>gainsboro</code></td>
<td><code>#dcdcdc</code></td>
<td style="background: gainsboro;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f8f8ff;">&nbsp;</td>
<td style="text-align: center;"><code>ghostwhite</code></td>
<td><code>#f8f8ff</code></td>
<td style="background: ghostwhite;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffd700;">&nbsp;</td>
<td style="text-align: center;"><code>gold</code></td>
<td><code>#ffd700</code></td>
<td style="background: gold;">&nbsp;</td>
</tr>
<tr>
<td style="background: #daa520;">&nbsp;</td>
<td style="text-align: center;"><code>goldenrod</code></td>
<td><code>#daa520</code></td>
<td style="background: goldenrod;">&nbsp;</td>
</tr>
<tr>
<td style="background: #adff2f;">&nbsp;</td>
<td style="text-align: center;"><code>greenyellow</code></td>
<td><code>#adff2f</code></td>
<td style="background: greenyellow ;">&nbsp;</td>
</tr>
<tr>
<td style="background: #808080;">&nbsp;</td>
<td style="text-align: center;"><code>grey</code></td>
<td><code>#808080</code></td>
<td style="background: grey;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f0fff0;">&nbsp;</td>
<td style="text-align: center;"><code>honeydew</code></td>
<td><code>#f0fff0</code></td>
<td style="background: honeydew;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ff69b4;">&nbsp;</td>
<td style="text-align: center;"><code>hotpink</code></td>
<td><code>#ff69b4</code></td>
<td style="background: hotpink;">&nbsp;</td>
</tr>
<tr>
<td style="background: #cd5c5c;">&nbsp;</td>
<td style="text-align: center;"><code>indianred</code></td>
<td><code>#cd5c5c</code></td>
<td style="background: indianred;">&nbsp;</td>
</tr>
<tr>
<td style="background: #4b0082;">&nbsp;</td>
<td style="text-align: center;"><code>indigo</code></td>
<td><code>#4b0082</code></td>
<td style="background: indigo;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fffff0;">&nbsp;</td>
<td style="text-align: center;"><code>ivory</code></td>
<td><code>#fffff0</code></td>
<td style="background: ivory;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f0e68c;">&nbsp;</td>
<td style="text-align: center;"><code>khaki</code></td>
<td><code>#f0e68c</code></td>
<td style="background: khaki;">&nbsp;</td>
</tr>
<tr>
<td style="background: #e6e6fa;">&nbsp;</td>
<td style="text-align: center;"><code>lavender</code></td>
<td><code>#e6e6fa</code></td>
<td style="background: lavender;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fff0f5;">&nbsp;</td>
<td style="text-align: center;"><code>lavenderblush</code></td>
<td><code>#fff0f5</code></td>
<td style="background: lavenderblush ;">&nbsp;</td>
</tr>
<tr>
<td style="background: #7cfc00;">&nbsp;</td>
<td style="text-align: center;"><code>lawngreen</code></td>
<td><code>#7cfc00</code></td>
<td style="background: lawngreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fffacd;">&nbsp;</td>
<td style="text-align: center;"><code>lemonchiffon</code></td>
<td><code>#fffacd</code></td>
<td style="background: lemonchiffon;">&nbsp;</td>
</tr>
<tr>
<td style="background: #add8e6;">&nbsp;</td>
<td style="text-align: center;"><code>lightblue</code></td>
<td><code>#add8e6</code></td>
<td style="background: lightblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f08080;">&nbsp;</td>
<td style="text-align: center;"><code>lightcoral</code></td>
<td><code>#f08080</code></td>
<td style="background: lightcoral;">&nbsp;</td>
</tr>
<tr>
<td style="background: #e0ffff;">&nbsp;</td>
<td style="text-align: center;"><code>lightcyan</code></td>
<td><code>#e0ffff</code></td>
<td style="background: lightcyan;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fafad2;">&nbsp;</td>
<td style="text-align: center;"><code>lightgoldenrodyellow</code></td>
<td><code>#fafad2</code></td>
<td style="background: lightgoldenrodyellow ;">&nbsp;</td>
</tr>
<tr>
<td style="background: #d3d3d3;">&nbsp;</td>
<td style="text-align: center;"><code>lightgray</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#d3d3d3</code></td>
<td style="background: lightgray;">&nbsp;</td>
</tr>
<tr>
<td style="background: #90ee90;">&nbsp;</td>
<td style="text-align: center;"><code>lightgreen</code></td>
<td><code>#90ee90</code></td>
<td style="background: lightgreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #d3d3d3;">&nbsp;</td>
<td style="text-align: center;"><code>lightgrey</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#d3d3d3</code></td>
<td style="background: lightgrey;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffb6c1;">&nbsp;</td>
<td style="text-align: center;"><code>lightpink</code></td>
<td><code>#ffb6c1</code></td>
<td style="background: lightpink;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffa07a;">&nbsp;</td>
<td style="text-align: center;"><code>lightsalmon</code></td>
<td><code>#ffa07a</code></td>
<td style="background: lightsalmon;">&nbsp;</td>
</tr>
<tr>
<td style="background: #20b2aa;">&nbsp;</td>
<td style="text-align: center;"><code>lightseagreen</code></td>
<td><code>#20b2aa</code></td>
<td style="background: lightseagreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #87cefa;">&nbsp;</td>
<td style="text-align: center;"><code>lightskyblue</code></td>
<td><code>#87cefa</code></td>
<td style="background: lightskyblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #778899;">&nbsp;</td>
<td style="text-align: center;"><code>lightslategray</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#778899</code></td>
<td style="background: lightslategray;">&nbsp;</td>
</tr>
<tr>
<td style="background: #778899;">&nbsp;</td>
<td style="text-align: center;"><code>lightslategrey</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#778899</code></td>
<td style="background: lightslategrey;">&nbsp;</td>
</tr>
<tr>
<td style="background: #b0c4de;">&nbsp;</td>
<td style="text-align: center;"><code>lightsteelblue</code></td>
<td><code>#b0c4de</code></td>
<td style="background: lightsteelblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffffe0;">&nbsp;</td>
<td style="text-align: center;"><code>lightyellow</code></td>
<td><code>#ffffe0</code></td>
<td style="background: lightyellow;">&nbsp;</td>
</tr>
<tr>
<td style="background: #32cd32;">&nbsp;</td>
<td style="text-align: center;"><code>limegreen</code></td>
<td><code>#32cd32</code></td>
<td style="background: limegreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #faf0e6;">&nbsp;</td>
<td style="text-align: center;"><code>linen</code></td>
<td><code>#faf0e6</code></td>
<td style="background: linen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #66cdaa;">&nbsp;</td>
<td style="text-align: center;"><code>mediumaquamarine</code></td>
<td><code>#66cdaa</code></td>
<td style="background: mediumaquamarine;">&nbsp;</td>
</tr>
<tr>
<td style="background: #0000cd;">&nbsp;</td>
<td style="text-align: center;"><code>mediumblue</code></td>
<td><code>#0000cd</code></td>
<td style="background: mediumblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ba55d3;">&nbsp;</td>
<td style="text-align: center;"><code>mediumorchid</code></td>
<td><code>#ba55d3</code></td>
<td style="background: mediumorchid;">&nbsp;</td>
</tr>
<tr>
<td style="background: #9370db;">&nbsp;</td>
<td style="text-align: center;"><code>mediumpurple</code></td>
<td><code>#9370db</code></td>
<td style="background: mediumpurple;">&nbsp;</td>
</tr>
<tr>
<td style="background: #3cb371;">&nbsp;</td>
<td style="text-align: center;"><code>mediumseagreen</code></td>
<td><code>#3cb371</code></td>
<td style="background: mediumseagreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #7b68ee;">&nbsp;</td>
<td style="text-align: center;"><code>mediumslateblue</code></td>
<td><code>#7b68ee</code></td>
<td style="background: mediumslateblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #00fa9a;">&nbsp;</td>
<td style="text-align: center;"><code>mediumspringgreen</code></td>
<td><code>#00fa9a</code></td>
<td style="background: mediumspringgreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #48d1cc;">&nbsp;</td>
<td style="text-align: center;"><code>mediumturquoise</code></td>
<td><code>#48d1cc</code></td>
<td style="background: mediumturquoise;">&nbsp;</td>
</tr>
<tr>
<td style="background: #c71585;">&nbsp;</td>
<td style="text-align: center;"><code>mediumvioletred</code></td>
<td><code>#c71585</code></td>
<td style="background: mediumvioletred;">&nbsp;</td>
</tr>
<tr>
<td style="background: #191970;">&nbsp;</td>
<td style="text-align: center;"><code>midnightblue</code></td>
<td><code>#191970</code></td>
<td style="background: midnightblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f5fffa;">&nbsp;</td>
<td style="text-align: center;"><code>mintcream</code></td>
<td><code>#f5fffa</code></td>
<td style="background: mintcream;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffe4e1;">&nbsp;</td>
<td style="text-align: center;"><code>mistyrose</code></td>
<td><code>#ffe4e1</code></td>
<td style="background: mistyrose;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffe4b5;">&nbsp;</td>
<td style="text-align: center;"><code>moccasin</code></td>
<td><code>#ffe4b5</code></td>
<td style="background: moccasin;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffdead;">&nbsp;</td>
<td style="text-align: center;"><code>navajowhite</code></td>
<td><code>#ffdead</code></td>
<td style="background: navajowhite;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fdf5e6;">&nbsp;</td>
<td style="text-align: center;"><code>oldlace</code></td>
<td><code>#fdf5e6</code></td>
<td style="background: oldlace;">&nbsp;</td>
</tr>
<tr>
<td style="background: #6b8e23;">&nbsp;</td>
<td style="text-align: center;"><code>olivedrab</code></td>
<td><code>#6b8e23</code></td>
<td style="background: olivedrab;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ff4500;">&nbsp;</td>
<td style="text-align: center;"><code>orangered</code></td>
<td><code>#ff4500</code></td>
<td style="background: orangered;">&nbsp;</td>
</tr>
<tr>
<td style="background: #da70d6;">&nbsp;</td>
<td style="text-align: center;"><code>orchid</code></td>
<td><code>#da70d6</code></td>
<td style="background: orchid;">&nbsp;</td>
</tr>
<tr>
<td style="background: #eee8aa;">&nbsp;</td>
<td style="text-align: center;"><code>palegoldenrod</code></td>
<td><code>#eee8aa</code></td>
<td style="background: palegoldenrod;">&nbsp;</td>
</tr>
<tr>
<td style="background: #98fb98;">&nbsp;</td>
<td style="text-align: center;"><code>palegreen</code></td>
<td><code>#98fb98</code></td>
<td style="background: palegreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #afeeee;">&nbsp;</td>
<td style="text-align: center;"><code>paleturquoise</code></td>
<td><code>#afeeee</code></td>
<td style="background: paleturquoise;">&nbsp;</td>
</tr>
<tr>
<td style="background: #db7093;">&nbsp;</td>
<td style="text-align: center;"><code>palevioletred</code></td>
<td><code>#db7093</code></td>
<td style="background: palevioletred;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffefd5;">&nbsp;</td>
<td style="text-align: center;"><code>papayawhip</code></td>
<td><code>#ffefd5</code></td>
<td style="background: papayawhip;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffdab9;">&nbsp;</td>
<td style="text-align: center;"><code>peachpuff</code></td>
<td><code>#ffdab9</code></td>
<td style="background: peachpuff;">&nbsp;</td>
</tr>
<tr>
<td style="background: #cd853f;">&nbsp;</td>
<td style="text-align: center;"><code>peru</code></td>
<td><code>#cd853f</code></td>
<td style="background: peru;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffc0cb;">&nbsp;</td>
<td style="text-align: center;"><code>pink</code></td>
<td><code>#ffc0cb</code></td>
<td style="background: pink;">&nbsp;</td>
</tr>
<tr>
<td style="background: #dda0dd;">&nbsp;</td>
<td style="text-align: center;"><code>plum</code></td>
<td><code>#dda0dd</code></td>
<td style="background: plum;">&nbsp;</td>
</tr>
<tr>
<td style="background: #b0e0e6;">&nbsp;</td>
<td style="text-align: center;"><code>powderblue</code></td>
<td><code>#b0e0e6</code></td>
<td style="background: powderblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #bc8f8f;">&nbsp;</td>
<td style="text-align: center;"><code>rosybrown</code></td>
<td><code>#bc8f8f</code></td>
<td style="background: rosybrown;">&nbsp;</td>
</tr>
<tr>
<td style="background: #4169e1;">&nbsp;</td>
<td style="text-align: center;"><code>royalblue</code></td>
<td><code>#4169e1</code></td>
<td style="background: royalblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #8b4513;">&nbsp;</td>
<td style="text-align: center;"><code>saddlebrown</code></td>
<td><code>#8b4513</code></td>
<td style="background: saddlebrown;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fa8072;">&nbsp;</td>
<td style="text-align: center;"><code>salmon</code></td>
<td><code>#fa8072</code></td>
<td style="background: salmon;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f4a460;">&nbsp;</td>
<td style="text-align: center;"><code>sandybrown</code></td>
<td><code>#f4a460</code></td>
<td style="background: sandybrown;">&nbsp;</td>
</tr>
<tr>
<td style="background: #2e8b57;">&nbsp;</td>
<td style="text-align: center;"><code>seagreen</code></td>
<td><code>#2e8b57</code></td>
<td style="background: seagreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fff5ee;">&nbsp;</td>
<td style="text-align: center;"><code>seashell</code></td>
<td><code>#fff5ee</code></td>
<td style="background: seashell;">&nbsp;</td>
</tr>
<tr>
<td style="background: #a0522d;">&nbsp;</td>
<td style="text-align: center;"><code>sienna</code></td>
<td><code>#a0522d</code></td>
<td style="background: sienna;">&nbsp;</td>
</tr>
<tr>
<td style="background: #87ceeb;">&nbsp;</td>
<td style="text-align: center;"><code>skyblue</code></td>
<td><code>#87ceeb</code></td>
<td style="background: skyblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #6a5acd;">&nbsp;</td>
<td style="text-align: center;"><code>slateblue</code></td>
<td><code>#6a5acd</code></td>
<td style="background: slateblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #708090;">&nbsp;</td>
<td style="text-align: center;"><code>slategray</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#708090</code></td>
<td style="background: slategray;">&nbsp;</td>
</tr>
<tr>
<td style="background: #708090;">&nbsp;</td>
<td style="text-align: center;"><code>slategrey</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#708090</code></td>
<td style="background: slategrey;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fffafa;">&nbsp;</td>
<td style="text-align: center;"><code>snow</code></td>
<td><code>#fffafa</code></td>
<td style="background: snow;">&nbsp;</td>
</tr>
<tr>
<td style="background: #00ff7f;">&nbsp;</td>
<td style="text-align: center;"><code>springgreen</code></td>
<td><code>#00ff7f</code></td>
<td style="background: springgreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #4682b4;">&nbsp;</td>
<td style="text-align: center;"><code>steelblue</code></td>
<td><code>#4682b4</code></td>
<td style="background: steelblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #d2b48c;">&nbsp;</td>
<td style="text-align: center;"><code>tan</code></td>
<td><code>#d2b48c</code></td>
<td style="background: tan;">&nbsp;</td>
</tr>
<tr>
<td style="background: #d8bfd8;">&nbsp;</td>
<td style="text-align: center;"><code>thistle</code></td>
<td><code>#d8bfd8</code></td>
<td style="background: thistle;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ff6347;">&nbsp;</td>
<td style="text-align: center;"><code>tomato</code></td>
<td><code>#ff6347</code></td>
<td style="background: tomato;">&nbsp;</td>
</tr>
<tr>
<td style="background: #40e0d0;">&nbsp;</td>
<td style="text-align: center;"><code>turquoise</code></td>
<td><code>#40e0d0</code></td>
<td style="background: turquoise;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ee82ee;">&nbsp;</td>
<td style="text-align: center;"><code>violet</code></td>
<td><code>#ee82ee</code></td>
<td style="background: violet;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f5deb3;">&nbsp;</td>
<td style="text-align: center;"><code>wheat</code></td>
<td><code>#f5deb3</code></td>
<td style="background: wheat;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f5f5f5;">&nbsp;</td>
<td style="text-align: center;"><code>whitesmoke</code></td>
<td><code>#f5f5f5</code></td>
<td style="background: whitesmoke;">&nbsp;</td>
</tr>
<tr>
<td style="background: #9acd32;">&nbsp;</td>
<td style="text-align: center;"><code>yellowgreen</code></td>
<td><code>#9acd32</code></td>
<td style="background: yellowgreen;">&nbsp;</td>
</tr>
<tr>
<td><a href="http://dev.w3.org/csswg/css-color/" class="external external-icon" lang="en" title="The 'CSS Color Module Level&nbsp;4' specification" hreflang="en">CSS Color Module Level&nbsp;4</a></td>
<td style="background: #639;">&nbsp;</td>
<td style="text-align: center;"><code>rebeccapurple</code></td>
<td><code>#663399</code></td>
<td style="background: rebeccapurple;">&nbsp;</td>
</tr>
</tbody>
</table>
<p>OK，事情还没有结束，我们在使用这些颜色关键名称的时候，可能需要注意下以下一些知识点：</p>
<ul>
<li>如果浏览器无法识别颜色关键字，则HTML中对颜色关键字的解析和CSS中的不一样。这里有必要好好解释下。<br />
大家应该都知道，传统HTML, 部分属性可以直接支持<code>color</code>属性，例如：
<div class="zxx_code">
<pre>&lt;font color="pink">少女色&lt;/font></pre>
</div>
<p>同时，我们也可以通过<code>style</code>属性，书写<code>color</code>声明，例如：</p>
<div class="zxx_code">
<pre>&lt;font style="color:pink;">少女色&lt;/font></pre>
</div>
<p>假如说浏览器认识这些颜色，则该神马颜色就实现神马颜色；但是，如果浏览器无法识别这些颜色关键字，则，两种书写的最终表现会有差异。</p>
<p>在HTML中，非识别颜色关键字会使用其他算法然后转换成其他一个完全不同的颜色值；而CSS中则是无视，使用默认颜色值。</p>
<p>例如，我们使用上面最后一个CSS4水平的颜色关键字 &#8211; <code>rebeccapurple</code>(IE9-不识别，IE10不确定)做测试，HTML代码如下：</p>
<div class="zxx_code">
<pre>&lt;h1 style="color:rebeccapurple;">CSS色和&lt;font color="rebeccapurple">HTML色&lt;/font>解析差异测试&lt;/h1></pre>
</div>
<p>结果，IE9浏览器下是这样子：<br />
<img src="http://image.zhangxinxu.com/image/blog/201507/2015-07-25_214921.png" width="484" height="85" alt="IE9浏览器下截图" class="alignnone" /></p>
<p>IE11浏览器下则是：<br />
<img src="http://image.zhangxinxu.com/image/blog/201507/2015-07-25_214940.png" width="484" height="70" alt="CSS色和HTML色差异IE11截图" class="alignnone" /></p>
<p>可以发现，IE11下的颜色是正统的颜色，但是，IE9浏览器下，不认识<code>rebeccapurple</code>关键字，结果，中间HTML属性颜色不是黑色，而是转变成了绿色，还是蛮有意思的。
</li>
<li>在CSS中，无法识别的颜色关键字会导致CSS声明无效，被忽略（如上面例子使用了默认的黑色）。</li>
<li>这些颜色关键字，没有哪一个是包含有透明的，都是简单的纯色。</li>
<li>下面这些关键字基友表示的是同一个颜色值：
<ul>
<li><code>darkgray</code> / <code>darkgrey</code></li>
<li><code>darkslategray</code> / <code>darkslategrey</code></li>
<li><code>dimgray</code> / <code>dimgrey</code></li>
<li><code>lightgray</code> / <code>lightgrey</code></li>
<li><code>lightslategray</code> / <code>lightslategrey</code></li>
<li><code>gray</code> / <code>grey</code></li>
<li><code>slategray</code> / <code>slategrey</code></li>
</ul>
</li>
<li>虽然上面这些颜色关键字来自&#8221;X11颜色名&#8221;, 但是呢，具体的颜色表现值可能跟X11操作系统有些不一样，这往往跟制造商的硬件有关。</li>
</ul>
<h3>三、transparent关键字</h3>
<p><code>color:transparent</code>用来表示文字的颜色纯透明，<code>transparent</code>关键字可以近似认为是<code>rgba(0,0,0,0)</code>的缩写。</p>
<p>OK，在不久之前，我对<code>color:transparent</code>的兼容性产生了误解，我一直以为IE7+浏览器都是支持的。</p>
<p>原因在于，IE11向下兼容的IE浏览器版本对颜色的解析跟原生的IE7, IE8浏览器是不一样的，会自动继承部门高级浏览器对颜色关键字的解析，比方说上面的<code>rebeccapurple</code>关键字以及这里的<code>transparent</code>关键字。</p>
<p>另外一点就是，<code>background-color:transparent</code>以及<code>border-color:transparent</code> IE7浏览器都是支持的。</p>
<p>虽然看上去师出同门，但是兼容性却不一样，只能遗憾，要是原生IE7也支持<code>color:transparent</code>, 我们可以弄出不少好玩的东西。</p>
<h3>四、currentColor关键字</h3>
<p><code>currentColor</code>关键字之前专门写文章介绍过：“<a href="http://www.zhangxinxu.com/wordpress/?p=4385">currentColor-CSS3超高校级好用CSS关键字</a>”。</p>
<p>IE9及其以上浏览器支持，在CSS3图形绘制的时候，很管用。然而，这里我要讲点其他tips.</p>
<p>首先，CSS中很多属性值默认就是<code>currentColor</code>的表现，我们一般（部分浏览器animation需要）无需画蛇添足，再声明这个关键字。例如，<code>border</code>, <code>text-shadow</code>, <code>box-shadow</code>等。尤其<code>border</code>, 包括IE7在内的浏览器都是如此特性，因为，我们使用图形生成的时候，尽量使用<code>border</code>属性，hover变色只需要控制<code>color</code>值就可以了。例如：</p>
<div class="zxx_code">
<pre>.test {
    color: red;
    border: 2px solid;
}</pre>
</div>
<p>此时<code>.test</code>元素的边框颜色就是<code>red</code>红色。<code>text-shadow</code>, <code>box-shadow</code>为CSS3属性，其默认阴影颜色也是和文字颜色一样的，例如：</p>
<div class="zxx_code">
<pre>h1 { color: rebeccapurple; box-shadow: 0 0 10px; }</pre>
</div>
<p><img src="http://image.zhangxinxu.com/image/blog/201507/2015-07-25_223432.png" width="540" height="111" alt="盒阴影默认颜色为文字颜色" class="alignnone" /></p>
<p>另外一个就是Chrome浏览器下<code>currentColor</code>有bug，尤其iOS的Safari浏览器下，<code>currentColor</code>bug则更多，印象比较深的就是伪元素的<code>background: currentColor</code>在hover时候背景色不会跟随<code>color</code>变化。在<code>currentColor</code>的表现上，IE浏览器这回是完胜，各种场景使用都无懈可击。</p>
<p>不过，一些基本的使用场景，各个浏览器都是很正常的，仍不失为一个好的关键字。尤其在实现SVG Sprites效果的时候：</p>
<div class="zxx_code">
<pre>svg {
    fill: currentColor;
}</pre>
</div>
<h3>五、16进制颜色、rgb颜色和hsl颜色</h3>
<p>16进制颜色，指的是长得诸如： <code>#000000</code>或<code>#000</code>的颜色，我们在CSS中用得最频繁的就是这种格式的颜色，为什么呢？因为字符数目最少。</p>
<p>rgb颜色实际上和16进制颜色是近亲，只是进制的差异，都归属于rgb颜色。rgb格式从我入行起浏览器就支持了，除了支持数值<code>rgb(255, 0, 51)</code>，还是支持百分比rgb颜色，如：<code>rgb(100%, 0%, 20%)</code>.</p>
<p>rgb数值格式只能是整数，不能是小数，否则，包括各IE以及Chrome在内的浏览器都会打酱油。下面是一些支持以及不支持的示意：</p>
<div class="zxx_code">
<pre><span style="color:green;">/* 下面这些都是同一个 RGB 颜色： */</span>
 #f03
 #F03
 #ff0033
 #FF0033
 rgb(255,0,51)
 rgb(255, 0, 51)
 rgb(255, 0, 51.2) <span style="color:green;">/* 酱油！整数，不能小数 */ </span>
 rgb(100%,0%,20%)
 rgb(100%, 0%, 20%)
 rgb(100%, 0, 20%) <span style="color:green;">/* 酱油兔！整数和百分比不能在一起搞基 */</span></pre>
</div>
<p>hsl颜色，是CSS3才出现的颜色表现格式，因此IE9+浏览器才支持。和rgb分别表示<code>red</code>, <code>green</code>, <code>blue</code>一样，hsl颜色三个字母也有自己的含义，其中，h表示Hue, 是色调的意思，取值懂0~360，大致按照数值红橙黄绿青蓝紫变化的节奏；s表示Saturation, 饱和度的意思，0~100%表示，值越大，饱和度越高，颜色越亮，通常我们评价某设计亮瞎我们的狗眼，就是你这个设计颜色饱和度太高的另一种说法；l表示Lightness，亮度的意思，也是0~100%表示，越亮。100%就是白色，50%则是正常亮度，0%的亮度就是黑色。</p>
<p>在取色器中，hsl颜色非常管用，有助于迅速选取我们想要的颜色值。或者根据现有颜色得到近似色。比方说我们要实现一个hover效果，hover一个色块，然后颜色加深，怎么搞？使用rgb很头疼，而使用hsl则很简单，我们只要把l也就是亮度微调低一点就可以。</p>
<p>16进制颜色、rgb颜色和hsl颜色是可以相互间转化的，具体怎么转呢？可以参见同样5年前的一篇文章：“<a href="http://www.zhangxinxu.com/wordpress/?p=646">javascript HEX十六进制与RGB, HSL颜色的相互转换</a>”。</p>
<p>最后，CSS3中的颜色支持Alpha透明通道，于是就有了rgba颜色和hsla颜色，a表示透明度， 0~1, 0表示完全透明，1表示实色无透明。如果使用小数，前面的0可以省略，节约一个字符大小。</p>
<div class="zxx_code">
<pre>rgba(255,0,0,.7)

hsla(240,100%,50%, .7)</pre>
</div>
<h3>六、系统颜色</h3>
<p>这是个很有意思的主题，我以前在实际项目中就使用过系统颜色。这是什么鬼呢？</p>
<p>我们都知道，window操作系统，不同的主题，其弹框啊，工具栏之类的颜色都是不一样的，OK，这些不一样的颜色就称之为系统颜色，在web中，我们也是可以使用这些颜色，于是，我们可以实现和系统主题风格类似的web组件皮肤效果。</p>
<p>OK，都有哪些系统颜色关键字呢？</p>
<p>下面是一些整理，注意，这些跟着系统走的，不是所有的系统都支持；而且有些值是跟着浏览器走的，Chrome浏览器可能是淡灰色，IE下可能是白色表现等：</p>
<dl style="font: small Tahoma,'Liberation Sans','Nimbus Sans L',sans-serif; border: 2px solid #a0b3d6; padding: 0.5em 0pt 0.5em 0.5em; -moz-column-rule: 1px solid royalblue; -moz-column-width: 15em; background: #eee; -webkit-columns: 15em; -webkit-column-rule: 1px solid royalblue; columns: 17em; column-rule: 2px solid #a0b3d6;">
<dt>ActiveBorder</dt>
<dd>激活态窗体边框。
<div class="eg-bg" style="background:ActiveBorder;"></div>
</dd>
<dt>ActiveCaption</dt>
<dd>激活态窗体标题。&nbsp; 应该使用CaptionText前景色。
<div class="eg-bg" style="background:ActiveCaption;"></div>
</dd>
<dt>AppWorkspace</dt>
<dd>多文档界面背景色。
<div class="eg-bg" style="background:AppWorkspace;"></div>
</dd>
<dt>Background</dt>
<dd>桌面背景。
<div class="eg-bg" style="background:Background;"></div>
</dd>
<dt>ButtonFace</dt>
<dd>三维元素的表面背景色，之所以会呈现3D效果，是由于周围有一层边框。应该使用ButtonText的前景色。
<div class="eg-bg" style="background:ButtonFace;"></div>
</dd>
<dt>ButtonHighlight</dt>
<dd>3D元素面对光源的边框色，之所以会呈现3D效果，是由于周围有一层边框。
<div class="eg-bg" style="background:ButtonHighlight;"></div>
</dd>
<dt>ButtonShadow</dt>
<dd>3D元素背对光源的边框色，之所以会呈现3D效果，是由于周围有一层边框。
<div class="eg-bg" style="background:ButtonShadow;"></div>
</dd>
<dt>ButtonText</dt>
<dd>按钮文本。&nbsp; 需要使用ButtonFace或ThreeDFace背景色。
<div class="eg-bg" style="background:ButtonText;"></div>
</dd>
<dt>CaptionText</dt>
<dd>标题文本， 尺寸盒子, 以及滚动条箭头盒子。&nbsp; 需要使用ActiveCaption背景色。
<div class="eg-bg" style="background:CaptionText;"></div>
</dd>
<dt>GrayText</dt>
<dd>灰色的(disabled)文本。
<div class="eg-bg" style="background:GrayText;"></div>
</dd>
<dt>Highlight</dt>
<dd>控件中被选中的项。&nbsp; 应使用HighlightText前景色。
<div class="eg-bg" style="background:Highlight;"></div>
</dd>
<dt>HighlightText</dt>
<dd>控件中被选中的项的文本。&nbsp; 应使用Highlight背景色。
<div class="eg-bg" style="background:HighlightText;"></div>
</dd>
<dt>InactiveBorder</dt>
<dd>非激活态窗体边框。
<div class="eg-bg" style="background:InactiveBorder;"></div>
</dd>
<dt>InactiveCaption</dt>
<dd>非激活态窗体标题。&nbsp; 应使用InactiveCaptionText前景色。
<div class="eg-bg" style="background:InactiveCaption;"></div>
</dd>
<dt>InactiveCaptionText</dt>
<dd>非激活标题的文本颜色。&nbsp; 应使用InactiveCaption背景色。
<div class="eg-bg" style="background:InactiveCaptionText;"></div>
</dd>
<dt>InfoBackground</dt>
<dd>提示框控件背景色。&nbsp; 应使用InfoText前景色。
<div class="eg-bg" style="background:InfoBackground;"></div>
</dd>
<dt>InfoText</dt>
<dd>提示框控件文本色。&nbsp; 应使用InfoBackground背景色。
<div class="eg-bg" style="background:InfoText;"></div>
</dd>
<dt>Menu</dt>
<dd>菜单背景。&nbsp; 应使用MenuText前景色。
<div class="eg-bg" style="background:Menu;"></div>
</dd>
<dt>MenuText</dt>
<dd>菜单中的文本。&nbsp; 应使用Menu背景色。
<div class="eg-bg" style="background:MenuText;"></div>
</dd>
<dt>Scrollbar</dt>
<dd>滚动条灰色区域。
<div class="eg-bg" style="background:Scrollbar;"></div>
</dd>
<dt>ThreeDDarkShadow</dt>
<dd>远离3D元素光源的两个边框中比较暗（通常外面）的那个颜色。
<div class="eg-bg" style="background:ThreeDDarkShadow;"></div>
</dd>
<dt>ThreeDFace</dt>
<dd>3D元素的表面被背景色。&nbsp; 应使用ButtonText前景色。
<div class="eg-bg" style="background:ThreeDFace;"></div>
</dd>
<dt>ThreeDHighlight</dt>
<dd>面对3D元素光源两个边框亮（通常外面）的那一个。
<div class="eg-bg" style="background:ThreeDHighlight;"></div>
</dd>
<dt>ThreeDLightShadow</dt>
<dd>面对3D元素光源的两个边框中比较暗（通常里面）的那个颜色。
<div class="eg-bg" style="background:ThreeDLightShadow;"></div>
</dd>
<dt>ThreeDShadow</dt>
<dd>远离3D元素光源的两个边框中比较亮（通常里面）的那个颜色。
<div class="eg-bg" style="background:ThreeDShadow;"></div>
</dd>
<dt>Window</dt>
<dd>窗体背景。&nbsp; 应使用WindowText前景色。
<div class="eg-bg" style="background:Window;"></div>
</dd>
<dt>WindowFrame</dt>
<dd>窗体框架。
<div class="eg-bg" style="background:WindowFrame;"></div>
</dd>
<dt>WindowText</dt>
<dd>窗体中的文本。&nbsp; 应使用Window背景色。
<div class="eg-bg" style="background:WindowText;"></div>
</dd>
</dl>
<h3>七、结束语</h3>
<p>&lt;color&gt;还有很多其他知识点，要么鸡犬不闻，要么耳熟能详，我就不多介绍了。</p>
<p>最后，感谢阅读！</p>
<p>行文仓促，错误难免，欢迎指正，也欢迎提供其他认为不错的相关的知识点，我会补充。</p>
<p>本文大多数内容翻译参考自MDN的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value" target="_blank">color_value</a></p>
<p><img src="http://ww3.sinaimg.cn/thumb180/6412a4a2jw1eueuye95cpj2050050weq.jpg" width="180" height="180" alt="沙县大餐" class="alignnone" /></p>
<p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4859">http://www.zhangxinxu.com/wordpress/?p=4859</a></p>
<p>（本篇完）</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:70:"http://www.zhangxinxu.com/wordpress/2015/07/know-css1-css3-color/feed/";}s:5:"slash";a:1:{s:8:"comments";s:1:"4";}s:7:"summary";s:269:"本文讲的是CSS1-CSS3 &#60;color&#62;颜色的一些知识，有些你可能知道，有些可能并不知道，算是对过往一些知识点的总结吧。无Demo，有截图，有源代码示意，总之，希望本文的内容能够对您的学习有所帮助。";s:12:"atom_content";s:47760:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4859">http://www.zhangxinxu.com/wordpress/?p=4859</a></p>
<style>.entry dt{font-weight:bold;margin-top:15px;}.entry dd{margin-left:10px;padding:0 10px;}.eg-bg{width:68px; height:28px;margin-top:5px;}</style>
<h3>一、废话少说，直奔主题</h3>
<p>大家有没有发现我最新几篇文章废话少了，是博主记得按时吃药了？<img src="http://mat1.gtimg.com/www/mb/images/face/62.gif" height="24" align="absmiddle"></p>
<p>大家想多了，一是升级成奶爸奶孩子，二是公司排山倒海的活，完全就没有吐槽废话的时间和精力，只能有啥说啥。</p>
<p>好了，虽然心中有千万个奔腾的马震，只能压在心中，直奔主题，讲讲CSS1-CSS3 &lt;color&gt;颜色的一些知识，有些你可能知道，有些可能并不知道，一些非常基本的知识我这里就不赘述。</p>
<h3>二、color颜色关键字</h3>
<p>这里的color颜色关键字指的是诸如<code>red</code>, <code>blue</code>这些货。</p>
<p>CSS level1的时候，那时候只有支持16个基本颜色关键字，诸如<code>black</code>, <code>white</code>这些货，为什么数目这么少呢？我们可以想想当时的显示器水平，不是黑白的已经不错了。</p>
<p>然后，CSS level2的时候，加入了橙色<code>orange</code>, 棕色<code>brown</code>等等颜色关键字。</p>
<p>然后，到了CSS level3的时候，颜色关键字家族进一步壮大，<code>mediumturquoise</code>这样的鬼都出现了。这些扩展的CSS颜色关键字，是有专门的名称的，称之为&#8221;<code><a href="https://en.wikipedia.org/wiki/X11_color_names" target="_blank">X11颜色名</a></code>&#8220;，这里的&#8221;X11&#8243;不是11区的意思，而是指用来位图显示的<strong>X Window System</strong>，常见于UNIX-like计算机系统上。</p>
<p>其实呢，这些X11颜色名我5年前，也就是10年的时候就写过文章分享过——“<a href="http://www.zhangxinxu.com/wordpress/?p=1064">CSS3下的147个颜色名称及对应颜色值</a>”，您可以狠狠地点击这里：<a href="http://www.zhangxinxu.com/study/201008/css3-color-names.php" target="_blank" class="a_link">CSS3下的147个颜色名称实例页面</a></p>
<p>不过这篇文章，就像是往海里扔了个宝石，连个回响都没有，现在想想，确实价值不明显，尤其我们的母语是中文，这些长得像王宝强的英文单词，很难记住的。</p>
<p>上面的颜色关键值列表是按英文单词字母排序的，OK，这里再展示个按照CSS水平来排列的，可读性可能会更好一些：</p>
<table class="params_table" width="600" cellspacing="1" cellpadding="0">
<thead>
<tr>
<th scope="col">规范</th>
<th scope="col">颜色</th>
<th scope="col">关键字</th>
<th scope="col">RGB hex值</th>
<th scope="col">实时表现</th>
</tr>
</thead>
<tbody>
<tr style="position: relative;">
<td rowspan="16"><a href="http://www.w3.org/TR/CSS1/" class="external external-icon" lang="en" title="The 'CSS Level&nbsp;1' specification" hreflang="en">CSS Level&nbsp;1</a></td>
<td style="background: #000;">&nbsp;</td>
<td style="text-align: center;"><code>black</code></td>
<td><code>#000000</code></td>
<td style="background: black;">&nbsp;</td>
</tr>
<tr>
<td style="background: #C0C0C0;">&nbsp;</td>
<td style="text-align: center;"><code>silver</code></td>
<td><code>#c0c0c0</code></td>
<td style="background: silver;">&nbsp;</td>
</tr>
<tr>
<td style="background: #808080;">&nbsp;</td>
<td style="text-align: center;"><code>gray</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#808080</code></td>
<td style="background: gray;">&nbsp;</td>
</tr>
<tr>
<td style="background: #FFF;">&nbsp;</td>
<td style="text-align: center;"><code>white</code></td>
<td><code>#ffffff</code></td>
<td style="background: white;">&nbsp;</td>
</tr>
<tr>
<td style="background: #800000;">&nbsp;</td>
<td style="text-align: center;"><code>maroon</code></td>
<td><code>#800000</code></td>
<td style="background: maroon;">&nbsp;</td>
</tr>
<tr>
<td style="background: #F00;">&nbsp;</td>
<td style="text-align: center;"><code>red</code></td>
<td><code>#ff0000</code></td>
<td style="background: red;">&nbsp;</td>
</tr>
<tr>
<td style="background: #800080;">&nbsp;</td>
<td style="text-align: center;"><code>purple</code></td>
<td><code>#800080</code></td>
<td style="background: purple;">&nbsp;</td>
</tr>
<tr>
<td style="background: #F0F;">&nbsp;</td>
<td style="text-align: center;"><code>fuchsia</code></td>
<td><code>#ff00ff</code></td>
<td style="background: fuchsia;">&nbsp;</td>
</tr>
<tr>
<td style="background: #008000;">&nbsp;</td>
<td style="text-align: center;"><code>green</code></td>
<td><code>#008000</code></td>
<td style="background: green;">&nbsp;</td>
</tr>
<tr>
<td style="background: #0F0;">&nbsp;</td>
<td style="text-align: center;"><code>lime</code></td>
<td><code>#00ff00</code></td>
<td style="background: lime;">&nbsp;</td>
</tr>
<tr>
<td style="background: #808000;">&nbsp;</td>
<td style="text-align: center;"><code>olive</code></td>
<td><code>#808000</code></td>
<td style="background: olive;">&nbsp;</td>
</tr>
<tr>
<td style="background: #FF0;">&nbsp;</td>
<td style="text-align: center;"><code>yellow</code></td>
<td><code>#ffff00</code></td>
<td style="background: yellow;">&nbsp;</td>
</tr>
<tr>
<td style="background: #000080;">&nbsp;</td>
<td style="text-align: center;"><code>navy</code></td>
<td><code>#000080</code></td>
<td style="background: navy;">&nbsp;</td>
</tr>
<tr>
<td style="background: #00F;">&nbsp;</td>
<td style="text-align: center;"><code>blue</code></td>
<td><code>#0000ff</code></td>
<td style="background: blue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #008080;">&nbsp;</td>
<td style="text-align: center;"><code>teal</code></td>
<td><code>#008080</code></td>
<td style="background: teal;">&nbsp;</td>
</tr>
<tr>
<td style="background: #0FF;">&nbsp;</td>
<td style="text-align: center;"><code>aqua</code></td>
<td><code>#00ffff</code></td>
<td style="background: aqua;">&nbsp;</td>
</tr>
<tr>
<td><a href="http://www.w3.org/TR/CSS2/" class="external external-icon" lang="en" title="The 'CSS Level&nbsp;2 (Revision&nbsp;1)' specification" hreflang="en">CSS Level&nbsp;2 (Revision&nbsp;1)</a></td>
<td style="background: #FFA500;">&nbsp;</td>
<td style="text-align: center;"><code>orange</code></td>
<td><code>#ffa500</code></td>
<td style="background: orange;">&nbsp;</td>
</tr>
<tr>
<td rowspan="128"><a href="http://dev.w3.org/csswg/css3-color/" class="external external-icon" lang="en" title="The 'CSS Color Module Level&nbsp;3' specification" hreflang="en">CSS Color Module Level&nbsp;3</a></td>
<td style="background: #f0f8ff;">&nbsp;</td>
<td style="text-align: center;"><code>aliceblue</code></td>
<td><code>#f0f8ff</code></td>
<td style="background: aliceblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #faebd7;">&nbsp;</td>
<td style="text-align: center;"><code>antiquewhite</code></td>
<td><code>#faebd7</code></td>
<td style="background: antiquewhite;">&nbsp;</td>
</tr>
<tr>
<td style="background: #7fffd4;">&nbsp;</td>
<td style="text-align: center;"><code>aquamarine</code></td>
<td><code>#7fffd4</code></td>
<td style="background: aquamarine;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f0ffff;">&nbsp;</td>
<td style="text-align: center;"><code>azure</code></td>
<td><code>#f0ffff</code></td>
<td style="background: azure;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f5f5dc;">&nbsp;</td>
<td style="text-align: center;"><code>beige</code></td>
<td><code>#f5f5dc</code></td>
<td style="background: beige;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffe4c4;">&nbsp;</td>
<td style="text-align: center;"><code>bisque</code></td>
<td><code>#ffe4c4</code></td>
<td style="background: bisque;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffebcd;">&nbsp;</td>
<td style="text-align: center;"><code>blanchedalmond</code></td>
<td><code>#ffe4c4</code></td>
<td style="background: blanchedalmond;">&nbsp;</td>
</tr>
<tr>
<td style="background: #8a2be2;">&nbsp;</td>
<td style="text-align: center;"><code>blueviolet</code></td>
<td><code>#8a2be2</code></td>
<td style="background: blueviolet;">&nbsp;</td>
</tr>
<tr>
<td style="background: #a52a2a;">&nbsp;</td>
<td style="text-align: center;"><code>brown</code></td>
<td><code>#a52a2a</code></td>
<td style="background: brown;">&nbsp;</td>
</tr>
<tr>
<td style="background: #deb887;">&nbsp;</td>
<td style="text-align: center;"><code>burlywood</code></td>
<td><code>#deb887</code></td>
<td style="background: burlywood;">&nbsp;</td>
</tr>
<tr>
<td style="background: #5f9ea0;">&nbsp;</td>
<td style="text-align: center;"><code>cadetblue</code></td>
<td><code>#5f9ea0</code></td>
<td style="background: cadetblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #7fff00;">&nbsp;</td>
<td style="text-align: center;"><code>chartreuse</code></td>
<td><code>#7fff00</code></td>
<td style="background: chartreuse;">&nbsp;</td>
</tr>
<tr>
<td style="background: #d2691e;">&nbsp;</td>
<td style="text-align: center;"><code>chocolate</code></td>
<td><code>#d2691e</code></td>
<td style="background: chocolate;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ff7f50;">&nbsp;</td>
<td style="text-align: center;"><code>coral</code></td>
<td><code>#ff7f50</code></td>
<td style="background: coral;">&nbsp;</td>
</tr>
<tr>
<td style="background: #6495ed;">&nbsp;</td>
<td style="text-align: center;"><code>cornflowerblue</code></td>
<td><code>#6495ed</code></td>
<td style="background: cornflowerblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fff8dc;">&nbsp;</td>
<td style="text-align: center;"><code>cornsilk</code></td>
<td><code>#fff8dc</code></td>
<td style="background: cornsilk;">&nbsp;</td>
</tr>
<tr>
<td style="background: #dc143c;">&nbsp;</td>
<td style="text-align: center;"><code>crimson</code></td>
<td><code>#dc143c</code></td>
<td style="background: crimson;">&nbsp;</td>
</tr>
<tr>
<td style="background: #00008b;">&nbsp;</td>
<td style="text-align: center;"><code>darkblue</code></td>
<td><code>#00008b</code></td>
<td style="background: darkblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #008b8b;">&nbsp;</td>
<td style="text-align: center;"><code>darkcyan</code></td>
<td><code>#008b8b</code></td>
<td style="background: darkcyan;">&nbsp;</td>
</tr>
<tr>
<td style="background: #b8860b;">&nbsp;</td>
<td style="text-align: center;"><code>darkgoldenrod</code></td>
<td><code>#b8860b</code></td>
<td style="background: darkgoldenrod;">&nbsp;</td>
</tr>
<tr>
<td style="background: #a9a9a9;">&nbsp;</td>
<td style="text-align: center;"><code>darkgray</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#a9a9a9</code></td>
<td style="background: darkgray;">&nbsp;</td>
</tr>
<tr>
<td style="background: #006400;">&nbsp;</td>
<td style="text-align: center;"><code>darkgreen</code></td>
<td><code>#006400</code></td>
<td style="background: darkgreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #a9a9a9;">&nbsp;</td>
<td style="text-align: center;"><code>darkgrey</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#a9a9a9</code></td>
<td style="background: darkgrey;">&nbsp;</td>
</tr>
<tr>
<td style="background: #bdb76b;">&nbsp;</td>
<td style="text-align: center;"><code>darkkhaki</code></td>
<td><code>#bdb76b</code></td>
<td style="background: darkkhaki;">&nbsp;</td>
</tr>
<tr>
<td style="background: #8b008b;">&nbsp;</td>
<td style="text-align: center;"><code>darkmagenta</code></td>
<td><code>#8b008b</code></td>
<td style="background: darkmagenta;">&nbsp;</td>
</tr>
<tr>
<td style="background: #556b2f;">&nbsp;</td>
<td style="text-align: center;"><code>darkolivegreen</code></td>
<td><code>#556b2f</code></td>
<td style="background: darkolivegreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ff8c00;">&nbsp;</td>
<td style="text-align: center;"><code>darkorange</code></td>
<td><code>#ff8c00</code></td>
<td style="background: darkorange;">&nbsp;</td>
</tr>
<tr>
<td style="background: #9932cc;">&nbsp;</td>
<td style="text-align: center;"><code>darkorchid</code></td>
<td><code>#9932cc</code></td>
<td style="background: darkorchid;">&nbsp;</td>
</tr>
<tr>
<td style="background: #8b0000;">&nbsp;</td>
<td style="text-align: center;"><code>darkred</code></td>
<td><code>#8b0000</code></td>
<td style="background: darkred;">&nbsp;</td>
</tr>
<tr>
<td style="background: #e9967a;">&nbsp;</td>
<td style="text-align: center;"><code>darksalmon</code></td>
<td><code>#e9967a</code></td>
<td style="background: darksalmon;">&nbsp;</td>
</tr>
<tr>
<td style="background: #8fbc8f;">&nbsp;</td>
<td style="text-align: center;"><code>darkseagreen</code></td>
<td><code>#8fbc8f</code></td>
<td style="background: darkseagreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #483d8b;">&nbsp;</td>
<td style="text-align: center;"><code>darkslateblue</code></td>
<td><code>#483d8b</code></td>
<td style="background: darkslateblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #2f4f4f;">&nbsp;</td>
<td style="text-align: center;"><code>darkslategray</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#2f4f4f</code></td>
<td style="background: darkslategray;">&nbsp;</td>
</tr>
<tr>
<td style="background: #2f4f4f;">&nbsp;</td>
<td style="text-align: center;"><code>darkslategrey</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#2f4f4f</code></td>
<td style="background: darkslategrey;">&nbsp;</td>
</tr>
<tr>
<td style="background: #00ced1;">&nbsp;</td>
<td style="text-align: center;"><code>darkturquoise</code></td>
<td><code>#00ced1</code></td>
<td style="background: darkturquoise;">&nbsp;</td>
</tr>
<tr>
<td style="background: #9400d3;">&nbsp;</td>
<td style="text-align: center;"><code>darkviolet</code></td>
<td><code>#9400d3</code></td>
<td style="background: darkviolet;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ff1493;">&nbsp;</td>
<td style="text-align: center;"><code>deeppink</code></td>
<td><code>#ff1493</code></td>
<td style="background: deeppink;">&nbsp;</td>
</tr>
<tr>
<td style="background: #00bfff;">&nbsp;</td>
<td style="text-align: center;"><code>deepskyblue</code></td>
<td><code>#00bfff</code></td>
<td style="background: deepskyblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #696969;">&nbsp;</td>
<td style="text-align: center;"><code>dimgray</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#696969</code></td>
<td style="background: dimgray;">&nbsp;</td>
</tr>
<tr>
<td style="background: #696969;">&nbsp;</td>
<td style="text-align: center;"><code>dimgrey</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#696969</code></td>
<td style="background: dimgrey;">&nbsp;</td>
</tr>
<tr>
<td style="background: #1e90ff;">&nbsp;</td>
<td style="text-align: center;"><code>dodgerblue</code></td>
<td><code>#1e90ff</code></td>
<td style="background: dodgerblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #b22222;">&nbsp;</td>
<td style="text-align: center;"><code>firebrick</code></td>
<td><code>#b22222</code></td>
<td style="background: firebrick;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fffaf0;">&nbsp;</td>
<td style="text-align: center;"><code>floralwhite</code></td>
<td><code>#fffaf0</code></td>
<td style="background: floralwhite;">&nbsp;</td>
</tr>
<tr>
<td style="background: #228b22;">&nbsp;</td>
<td style="text-align: center;"><code>forestgreen</code></td>
<td><code>#228b22</code></td>
<td style="background: forestgreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #dcdcdc;">&nbsp;</td>
<td style="text-align: center;"><code>gainsboro</code></td>
<td><code>#dcdcdc</code></td>
<td style="background: gainsboro;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f8f8ff;">&nbsp;</td>
<td style="text-align: center;"><code>ghostwhite</code></td>
<td><code>#f8f8ff</code></td>
<td style="background: ghostwhite;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffd700;">&nbsp;</td>
<td style="text-align: center;"><code>gold</code></td>
<td><code>#ffd700</code></td>
<td style="background: gold;">&nbsp;</td>
</tr>
<tr>
<td style="background: #daa520;">&nbsp;</td>
<td style="text-align: center;"><code>goldenrod</code></td>
<td><code>#daa520</code></td>
<td style="background: goldenrod;">&nbsp;</td>
</tr>
<tr>
<td style="background: #adff2f;">&nbsp;</td>
<td style="text-align: center;"><code>greenyellow</code></td>
<td><code>#adff2f</code></td>
<td style="background: greenyellow ;">&nbsp;</td>
</tr>
<tr>
<td style="background: #808080;">&nbsp;</td>
<td style="text-align: center;"><code>grey</code></td>
<td><code>#808080</code></td>
<td style="background: grey;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f0fff0;">&nbsp;</td>
<td style="text-align: center;"><code>honeydew</code></td>
<td><code>#f0fff0</code></td>
<td style="background: honeydew;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ff69b4;">&nbsp;</td>
<td style="text-align: center;"><code>hotpink</code></td>
<td><code>#ff69b4</code></td>
<td style="background: hotpink;">&nbsp;</td>
</tr>
<tr>
<td style="background: #cd5c5c;">&nbsp;</td>
<td style="text-align: center;"><code>indianred</code></td>
<td><code>#cd5c5c</code></td>
<td style="background: indianred;">&nbsp;</td>
</tr>
<tr>
<td style="background: #4b0082;">&nbsp;</td>
<td style="text-align: center;"><code>indigo</code></td>
<td><code>#4b0082</code></td>
<td style="background: indigo;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fffff0;">&nbsp;</td>
<td style="text-align: center;"><code>ivory</code></td>
<td><code>#fffff0</code></td>
<td style="background: ivory;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f0e68c;">&nbsp;</td>
<td style="text-align: center;"><code>khaki</code></td>
<td><code>#f0e68c</code></td>
<td style="background: khaki;">&nbsp;</td>
</tr>
<tr>
<td style="background: #e6e6fa;">&nbsp;</td>
<td style="text-align: center;"><code>lavender</code></td>
<td><code>#e6e6fa</code></td>
<td style="background: lavender;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fff0f5;">&nbsp;</td>
<td style="text-align: center;"><code>lavenderblush</code></td>
<td><code>#fff0f5</code></td>
<td style="background: lavenderblush ;">&nbsp;</td>
</tr>
<tr>
<td style="background: #7cfc00;">&nbsp;</td>
<td style="text-align: center;"><code>lawngreen</code></td>
<td><code>#7cfc00</code></td>
<td style="background: lawngreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fffacd;">&nbsp;</td>
<td style="text-align: center;"><code>lemonchiffon</code></td>
<td><code>#fffacd</code></td>
<td style="background: lemonchiffon;">&nbsp;</td>
</tr>
<tr>
<td style="background: #add8e6;">&nbsp;</td>
<td style="text-align: center;"><code>lightblue</code></td>
<td><code>#add8e6</code></td>
<td style="background: lightblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f08080;">&nbsp;</td>
<td style="text-align: center;"><code>lightcoral</code></td>
<td><code>#f08080</code></td>
<td style="background: lightcoral;">&nbsp;</td>
</tr>
<tr>
<td style="background: #e0ffff;">&nbsp;</td>
<td style="text-align: center;"><code>lightcyan</code></td>
<td><code>#e0ffff</code></td>
<td style="background: lightcyan;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fafad2;">&nbsp;</td>
<td style="text-align: center;"><code>lightgoldenrodyellow</code></td>
<td><code>#fafad2</code></td>
<td style="background: lightgoldenrodyellow ;">&nbsp;</td>
</tr>
<tr>
<td style="background: #d3d3d3;">&nbsp;</td>
<td style="text-align: center;"><code>lightgray</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#d3d3d3</code></td>
<td style="background: lightgray;">&nbsp;</td>
</tr>
<tr>
<td style="background: #90ee90;">&nbsp;</td>
<td style="text-align: center;"><code>lightgreen</code></td>
<td><code>#90ee90</code></td>
<td style="background: lightgreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #d3d3d3;">&nbsp;</td>
<td style="text-align: center;"><code>lightgrey</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#d3d3d3</code></td>
<td style="background: lightgrey;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffb6c1;">&nbsp;</td>
<td style="text-align: center;"><code>lightpink</code></td>
<td><code>#ffb6c1</code></td>
<td style="background: lightpink;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffa07a;">&nbsp;</td>
<td style="text-align: center;"><code>lightsalmon</code></td>
<td><code>#ffa07a</code></td>
<td style="background: lightsalmon;">&nbsp;</td>
</tr>
<tr>
<td style="background: #20b2aa;">&nbsp;</td>
<td style="text-align: center;"><code>lightseagreen</code></td>
<td><code>#20b2aa</code></td>
<td style="background: lightseagreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #87cefa;">&nbsp;</td>
<td style="text-align: center;"><code>lightskyblue</code></td>
<td><code>#87cefa</code></td>
<td style="background: lightskyblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #778899;">&nbsp;</td>
<td style="text-align: center;"><code>lightslategray</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#778899</code></td>
<td style="background: lightslategray;">&nbsp;</td>
</tr>
<tr>
<td style="background: #778899;">&nbsp;</td>
<td style="text-align: center;"><code>lightslategrey</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#778899</code></td>
<td style="background: lightslategrey;">&nbsp;</td>
</tr>
<tr>
<td style="background: #b0c4de;">&nbsp;</td>
<td style="text-align: center;"><code>lightsteelblue</code></td>
<td><code>#b0c4de</code></td>
<td style="background: lightsteelblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffffe0;">&nbsp;</td>
<td style="text-align: center;"><code>lightyellow</code></td>
<td><code>#ffffe0</code></td>
<td style="background: lightyellow;">&nbsp;</td>
</tr>
<tr>
<td style="background: #32cd32;">&nbsp;</td>
<td style="text-align: center;"><code>limegreen</code></td>
<td><code>#32cd32</code></td>
<td style="background: limegreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #faf0e6;">&nbsp;</td>
<td style="text-align: center;"><code>linen</code></td>
<td><code>#faf0e6</code></td>
<td style="background: linen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #66cdaa;">&nbsp;</td>
<td style="text-align: center;"><code>mediumaquamarine</code></td>
<td><code>#66cdaa</code></td>
<td style="background: mediumaquamarine;">&nbsp;</td>
</tr>
<tr>
<td style="background: #0000cd;">&nbsp;</td>
<td style="text-align: center;"><code>mediumblue</code></td>
<td><code>#0000cd</code></td>
<td style="background: mediumblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ba55d3;">&nbsp;</td>
<td style="text-align: center;"><code>mediumorchid</code></td>
<td><code>#ba55d3</code></td>
<td style="background: mediumorchid;">&nbsp;</td>
</tr>
<tr>
<td style="background: #9370db;">&nbsp;</td>
<td style="text-align: center;"><code>mediumpurple</code></td>
<td><code>#9370db</code></td>
<td style="background: mediumpurple;">&nbsp;</td>
</tr>
<tr>
<td style="background: #3cb371;">&nbsp;</td>
<td style="text-align: center;"><code>mediumseagreen</code></td>
<td><code>#3cb371</code></td>
<td style="background: mediumseagreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #7b68ee;">&nbsp;</td>
<td style="text-align: center;"><code>mediumslateblue</code></td>
<td><code>#7b68ee</code></td>
<td style="background: mediumslateblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #00fa9a;">&nbsp;</td>
<td style="text-align: center;"><code>mediumspringgreen</code></td>
<td><code>#00fa9a</code></td>
<td style="background: mediumspringgreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #48d1cc;">&nbsp;</td>
<td style="text-align: center;"><code>mediumturquoise</code></td>
<td><code>#48d1cc</code></td>
<td style="background: mediumturquoise;">&nbsp;</td>
</tr>
<tr>
<td style="background: #c71585;">&nbsp;</td>
<td style="text-align: center;"><code>mediumvioletred</code></td>
<td><code>#c71585</code></td>
<td style="background: mediumvioletred;">&nbsp;</td>
</tr>
<tr>
<td style="background: #191970;">&nbsp;</td>
<td style="text-align: center;"><code>midnightblue</code></td>
<td><code>#191970</code></td>
<td style="background: midnightblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f5fffa;">&nbsp;</td>
<td style="text-align: center;"><code>mintcream</code></td>
<td><code>#f5fffa</code></td>
<td style="background: mintcream;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffe4e1;">&nbsp;</td>
<td style="text-align: center;"><code>mistyrose</code></td>
<td><code>#ffe4e1</code></td>
<td style="background: mistyrose;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffe4b5;">&nbsp;</td>
<td style="text-align: center;"><code>moccasin</code></td>
<td><code>#ffe4b5</code></td>
<td style="background: moccasin;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffdead;">&nbsp;</td>
<td style="text-align: center;"><code>navajowhite</code></td>
<td><code>#ffdead</code></td>
<td style="background: navajowhite;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fdf5e6;">&nbsp;</td>
<td style="text-align: center;"><code>oldlace</code></td>
<td><code>#fdf5e6</code></td>
<td style="background: oldlace;">&nbsp;</td>
</tr>
<tr>
<td style="background: #6b8e23;">&nbsp;</td>
<td style="text-align: center;"><code>olivedrab</code></td>
<td><code>#6b8e23</code></td>
<td style="background: olivedrab;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ff4500;">&nbsp;</td>
<td style="text-align: center;"><code>orangered</code></td>
<td><code>#ff4500</code></td>
<td style="background: orangered;">&nbsp;</td>
</tr>
<tr>
<td style="background: #da70d6;">&nbsp;</td>
<td style="text-align: center;"><code>orchid</code></td>
<td><code>#da70d6</code></td>
<td style="background: orchid;">&nbsp;</td>
</tr>
<tr>
<td style="background: #eee8aa;">&nbsp;</td>
<td style="text-align: center;"><code>palegoldenrod</code></td>
<td><code>#eee8aa</code></td>
<td style="background: palegoldenrod;">&nbsp;</td>
</tr>
<tr>
<td style="background: #98fb98;">&nbsp;</td>
<td style="text-align: center;"><code>palegreen</code></td>
<td><code>#98fb98</code></td>
<td style="background: palegreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #afeeee;">&nbsp;</td>
<td style="text-align: center;"><code>paleturquoise</code></td>
<td><code>#afeeee</code></td>
<td style="background: paleturquoise;">&nbsp;</td>
</tr>
<tr>
<td style="background: #db7093;">&nbsp;</td>
<td style="text-align: center;"><code>palevioletred</code></td>
<td><code>#db7093</code></td>
<td style="background: palevioletred;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffefd5;">&nbsp;</td>
<td style="text-align: center;"><code>papayawhip</code></td>
<td><code>#ffefd5</code></td>
<td style="background: papayawhip;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffdab9;">&nbsp;</td>
<td style="text-align: center;"><code>peachpuff</code></td>
<td><code>#ffdab9</code></td>
<td style="background: peachpuff;">&nbsp;</td>
</tr>
<tr>
<td style="background: #cd853f;">&nbsp;</td>
<td style="text-align: center;"><code>peru</code></td>
<td><code>#cd853f</code></td>
<td style="background: peru;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ffc0cb;">&nbsp;</td>
<td style="text-align: center;"><code>pink</code></td>
<td><code>#ffc0cb</code></td>
<td style="background: pink;">&nbsp;</td>
</tr>
<tr>
<td style="background: #dda0dd;">&nbsp;</td>
<td style="text-align: center;"><code>plum</code></td>
<td><code>#dda0dd</code></td>
<td style="background: plum;">&nbsp;</td>
</tr>
<tr>
<td style="background: #b0e0e6;">&nbsp;</td>
<td style="text-align: center;"><code>powderblue</code></td>
<td><code>#b0e0e6</code></td>
<td style="background: powderblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #bc8f8f;">&nbsp;</td>
<td style="text-align: center;"><code>rosybrown</code></td>
<td><code>#bc8f8f</code></td>
<td style="background: rosybrown;">&nbsp;</td>
</tr>
<tr>
<td style="background: #4169e1;">&nbsp;</td>
<td style="text-align: center;"><code>royalblue</code></td>
<td><code>#4169e1</code></td>
<td style="background: royalblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #8b4513;">&nbsp;</td>
<td style="text-align: center;"><code>saddlebrown</code></td>
<td><code>#8b4513</code></td>
<td style="background: saddlebrown;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fa8072;">&nbsp;</td>
<td style="text-align: center;"><code>salmon</code></td>
<td><code>#fa8072</code></td>
<td style="background: salmon;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f4a460;">&nbsp;</td>
<td style="text-align: center;"><code>sandybrown</code></td>
<td><code>#f4a460</code></td>
<td style="background: sandybrown;">&nbsp;</td>
</tr>
<tr>
<td style="background: #2e8b57;">&nbsp;</td>
<td style="text-align: center;"><code>seagreen</code></td>
<td><code>#2e8b57</code></td>
<td style="background: seagreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fff5ee;">&nbsp;</td>
<td style="text-align: center;"><code>seashell</code></td>
<td><code>#fff5ee</code></td>
<td style="background: seashell;">&nbsp;</td>
</tr>
<tr>
<td style="background: #a0522d;">&nbsp;</td>
<td style="text-align: center;"><code>sienna</code></td>
<td><code>#a0522d</code></td>
<td style="background: sienna;">&nbsp;</td>
</tr>
<tr>
<td style="background: #87ceeb;">&nbsp;</td>
<td style="text-align: center;"><code>skyblue</code></td>
<td><code>#87ceeb</code></td>
<td style="background: skyblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #6a5acd;">&nbsp;</td>
<td style="text-align: center;"><code>slateblue</code></td>
<td><code>#6a5acd</code></td>
<td style="background: slateblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #708090;">&nbsp;</td>
<td style="text-align: center;"><code>slategray</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#708090</code></td>
<td style="background: slategray;">&nbsp;</td>
</tr>
<tr>
<td style="background: #708090;">&nbsp;</td>
<td style="text-align: center;"><code>slategrey</code><sup><a href="#1" title="color_value#1">[*]</a></sup></td>
<td><code>#708090</code></td>
<td style="background: slategrey;">&nbsp;</td>
</tr>
<tr>
<td style="background: #fffafa;">&nbsp;</td>
<td style="text-align: center;"><code>snow</code></td>
<td><code>#fffafa</code></td>
<td style="background: snow;">&nbsp;</td>
</tr>
<tr>
<td style="background: #00ff7f;">&nbsp;</td>
<td style="text-align: center;"><code>springgreen</code></td>
<td><code>#00ff7f</code></td>
<td style="background: springgreen;">&nbsp;</td>
</tr>
<tr>
<td style="background: #4682b4;">&nbsp;</td>
<td style="text-align: center;"><code>steelblue</code></td>
<td><code>#4682b4</code></td>
<td style="background: steelblue;">&nbsp;</td>
</tr>
<tr>
<td style="background: #d2b48c;">&nbsp;</td>
<td style="text-align: center;"><code>tan</code></td>
<td><code>#d2b48c</code></td>
<td style="background: tan;">&nbsp;</td>
</tr>
<tr>
<td style="background: #d8bfd8;">&nbsp;</td>
<td style="text-align: center;"><code>thistle</code></td>
<td><code>#d8bfd8</code></td>
<td style="background: thistle;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ff6347;">&nbsp;</td>
<td style="text-align: center;"><code>tomato</code></td>
<td><code>#ff6347</code></td>
<td style="background: tomato;">&nbsp;</td>
</tr>
<tr>
<td style="background: #40e0d0;">&nbsp;</td>
<td style="text-align: center;"><code>turquoise</code></td>
<td><code>#40e0d0</code></td>
<td style="background: turquoise;">&nbsp;</td>
</tr>
<tr>
<td style="background: #ee82ee;">&nbsp;</td>
<td style="text-align: center;"><code>violet</code></td>
<td><code>#ee82ee</code></td>
<td style="background: violet;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f5deb3;">&nbsp;</td>
<td style="text-align: center;"><code>wheat</code></td>
<td><code>#f5deb3</code></td>
<td style="background: wheat;">&nbsp;</td>
</tr>
<tr>
<td style="background: #f5f5f5;">&nbsp;</td>
<td style="text-align: center;"><code>whitesmoke</code></td>
<td><code>#f5f5f5</code></td>
<td style="background: whitesmoke;">&nbsp;</td>
</tr>
<tr>
<td style="background: #9acd32;">&nbsp;</td>
<td style="text-align: center;"><code>yellowgreen</code></td>
<td><code>#9acd32</code></td>
<td style="background: yellowgreen;">&nbsp;</td>
</tr>
<tr>
<td><a href="http://dev.w3.org/csswg/css-color/" class="external external-icon" lang="en" title="The 'CSS Color Module Level&nbsp;4' specification" hreflang="en">CSS Color Module Level&nbsp;4</a></td>
<td style="background: #639;">&nbsp;</td>
<td style="text-align: center;"><code>rebeccapurple</code></td>
<td><code>#663399</code></td>
<td style="background: rebeccapurple;">&nbsp;</td>
</tr>
</tbody>
</table>
<p>OK，事情还没有结束，我们在使用这些颜色关键名称的时候，可能需要注意下以下一些知识点：</p>
<ul>
<li>如果浏览器无法识别颜色关键字，则HTML中对颜色关键字的解析和CSS中的不一样。这里有必要好好解释下。<br />
大家应该都知道，传统HTML, 部分属性可以直接支持<code>color</code>属性，例如：
<div class="zxx_code">
<pre>&lt;font color="pink">少女色&lt;/font></pre>
</div>
<p>同时，我们也可以通过<code>style</code>属性，书写<code>color</code>声明，例如：</p>
<div class="zxx_code">
<pre>&lt;font style="color:pink;">少女色&lt;/font></pre>
</div>
<p>假如说浏览器认识这些颜色，则该神马颜色就实现神马颜色；但是，如果浏览器无法识别这些颜色关键字，则，两种书写的最终表现会有差异。</p>
<p>在HTML中，非识别颜色关键字会使用其他算法然后转换成其他一个完全不同的颜色值；而CSS中则是无视，使用默认颜色值。</p>
<p>例如，我们使用上面最后一个CSS4水平的颜色关键字 &#8211; <code>rebeccapurple</code>(IE9-不识别，IE10不确定)做测试，HTML代码如下：</p>
<div class="zxx_code">
<pre>&lt;h1 style="color:rebeccapurple;">CSS色和&lt;font color="rebeccapurple">HTML色&lt;/font>解析差异测试&lt;/h1></pre>
</div>
<p>结果，IE9浏览器下是这样子：<br />
<img src="http://image.zhangxinxu.com/image/blog/201507/2015-07-25_214921.png" width="484" height="85" alt="IE9浏览器下截图" class="alignnone" /></p>
<p>IE11浏览器下则是：<br />
<img src="http://image.zhangxinxu.com/image/blog/201507/2015-07-25_214940.png" width="484" height="70" alt="CSS色和HTML色差异IE11截图" class="alignnone" /></p>
<p>可以发现，IE11下的颜色是正统的颜色，但是，IE9浏览器下，不认识<code>rebeccapurple</code>关键字，结果，中间HTML属性颜色不是黑色，而是转变成了绿色，还是蛮有意思的。
</li>
<li>在CSS中，无法识别的颜色关键字会导致CSS声明无效，被忽略（如上面例子使用了默认的黑色）。</li>
<li>这些颜色关键字，没有哪一个是包含有透明的，都是简单的纯色。</li>
<li>下面这些关键字基友表示的是同一个颜色值：
<ul>
<li><code>darkgray</code> / <code>darkgrey</code></li>
<li><code>darkslategray</code> / <code>darkslategrey</code></li>
<li><code>dimgray</code> / <code>dimgrey</code></li>
<li><code>lightgray</code> / <code>lightgrey</code></li>
<li><code>lightslategray</code> / <code>lightslategrey</code></li>
<li><code>gray</code> / <code>grey</code></li>
<li><code>slategray</code> / <code>slategrey</code></li>
</ul>
</li>
<li>虽然上面这些颜色关键字来自&#8221;X11颜色名&#8221;, 但是呢，具体的颜色表现值可能跟X11操作系统有些不一样，这往往跟制造商的硬件有关。</li>
</ul>
<h3>三、transparent关键字</h3>
<p><code>color:transparent</code>用来表示文字的颜色纯透明，<code>transparent</code>关键字可以近似认为是<code>rgba(0,0,0,0)</code>的缩写。</p>
<p>OK，在不久之前，我对<code>color:transparent</code>的兼容性产生了误解，我一直以为IE7+浏览器都是支持的。</p>
<p>原因在于，IE11向下兼容的IE浏览器版本对颜色的解析跟原生的IE7, IE8浏览器是不一样的，会自动继承部门高级浏览器对颜色关键字的解析，比方说上面的<code>rebeccapurple</code>关键字以及这里的<code>transparent</code>关键字。</p>
<p>另外一点就是，<code>background-color:transparent</code>以及<code>border-color:transparent</code> IE7浏览器都是支持的。</p>
<p>虽然看上去师出同门，但是兼容性却不一样，只能遗憾，要是原生IE7也支持<code>color:transparent</code>, 我们可以弄出不少好玩的东西。</p>
<h3>四、currentColor关键字</h3>
<p><code>currentColor</code>关键字之前专门写文章介绍过：“<a href="http://www.zhangxinxu.com/wordpress/?p=4385">currentColor-CSS3超高校级好用CSS关键字</a>”。</p>
<p>IE9及其以上浏览器支持，在CSS3图形绘制的时候，很管用。然而，这里我要讲点其他tips.</p>
<p>首先，CSS中很多属性值默认就是<code>currentColor</code>的表现，我们一般（部分浏览器animation需要）无需画蛇添足，再声明这个关键字。例如，<code>border</code>, <code>text-shadow</code>, <code>box-shadow</code>等。尤其<code>border</code>, 包括IE7在内的浏览器都是如此特性，因为，我们使用图形生成的时候，尽量使用<code>border</code>属性，hover变色只需要控制<code>color</code>值就可以了。例如：</p>
<div class="zxx_code">
<pre>.test {
    color: red;
    border: 2px solid;
}</pre>
</div>
<p>此时<code>.test</code>元素的边框颜色就是<code>red</code>红色。<code>text-shadow</code>, <code>box-shadow</code>为CSS3属性，其默认阴影颜色也是和文字颜色一样的，例如：</p>
<div class="zxx_code">
<pre>h1 { color: rebeccapurple; box-shadow: 0 0 10px; }</pre>
</div>
<p><img src="http://image.zhangxinxu.com/image/blog/201507/2015-07-25_223432.png" width="540" height="111" alt="盒阴影默认颜色为文字颜色" class="alignnone" /></p>
<p>另外一个就是Chrome浏览器下<code>currentColor</code>有bug，尤其iOS的Safari浏览器下，<code>currentColor</code>bug则更多，印象比较深的就是伪元素的<code>background: currentColor</code>在hover时候背景色不会跟随<code>color</code>变化。在<code>currentColor</code>的表现上，IE浏览器这回是完胜，各种场景使用都无懈可击。</p>
<p>不过，一些基本的使用场景，各个浏览器都是很正常的，仍不失为一个好的关键字。尤其在实现SVG Sprites效果的时候：</p>
<div class="zxx_code">
<pre>svg {
    fill: currentColor;
}</pre>
</div>
<h3>五、16进制颜色、rgb颜色和hsl颜色</h3>
<p>16进制颜色，指的是长得诸如： <code>#000000</code>或<code>#000</code>的颜色，我们在CSS中用得最频繁的就是这种格式的颜色，为什么呢？因为字符数目最少。</p>
<p>rgb颜色实际上和16进制颜色是近亲，只是进制的差异，都归属于rgb颜色。rgb格式从我入行起浏览器就支持了，除了支持数值<code>rgb(255, 0, 51)</code>，还是支持百分比rgb颜色，如：<code>rgb(100%, 0%, 20%)</code>.</p>
<p>rgb数值格式只能是整数，不能是小数，否则，包括各IE以及Chrome在内的浏览器都会打酱油。下面是一些支持以及不支持的示意：</p>
<div class="zxx_code">
<pre><span style="color:green;">/* 下面这些都是同一个 RGB 颜色： */</span>
 #f03
 #F03
 #ff0033
 #FF0033
 rgb(255,0,51)
 rgb(255, 0, 51)
 rgb(255, 0, 51.2) <span style="color:green;">/* 酱油！整数，不能小数 */ </span>
 rgb(100%,0%,20%)
 rgb(100%, 0%, 20%)
 rgb(100%, 0, 20%) <span style="color:green;">/* 酱油兔！整数和百分比不能在一起搞基 */</span></pre>
</div>
<p>hsl颜色，是CSS3才出现的颜色表现格式，因此IE9+浏览器才支持。和rgb分别表示<code>red</code>, <code>green</code>, <code>blue</code>一样，hsl颜色三个字母也有自己的含义，其中，h表示Hue, 是色调的意思，取值懂0~360，大致按照数值红橙黄绿青蓝紫变化的节奏；s表示Saturation, 饱和度的意思，0~100%表示，值越大，饱和度越高，颜色越亮，通常我们评价某设计亮瞎我们的狗眼，就是你这个设计颜色饱和度太高的另一种说法；l表示Lightness，亮度的意思，也是0~100%表示，越亮。100%就是白色，50%则是正常亮度，0%的亮度就是黑色。</p>
<p>在取色器中，hsl颜色非常管用，有助于迅速选取我们想要的颜色值。或者根据现有颜色得到近似色。比方说我们要实现一个hover效果，hover一个色块，然后颜色加深，怎么搞？使用rgb很头疼，而使用hsl则很简单，我们只要把l也就是亮度微调低一点就可以。</p>
<p>16进制颜色、rgb颜色和hsl颜色是可以相互间转化的，具体怎么转呢？可以参见同样5年前的一篇文章：“<a href="http://www.zhangxinxu.com/wordpress/?p=646">javascript HEX十六进制与RGB, HSL颜色的相互转换</a>”。</p>
<p>最后，CSS3中的颜色支持Alpha透明通道，于是就有了rgba颜色和hsla颜色，a表示透明度， 0~1, 0表示完全透明，1表示实色无透明。如果使用小数，前面的0可以省略，节约一个字符大小。</p>
<div class="zxx_code">
<pre>rgba(255,0,0,.7)

hsla(240,100%,50%, .7)</pre>
</div>
<h3>六、系统颜色</h3>
<p>这是个很有意思的主题，我以前在实际项目中就使用过系统颜色。这是什么鬼呢？</p>
<p>我们都知道，window操作系统，不同的主题，其弹框啊，工具栏之类的颜色都是不一样的，OK，这些不一样的颜色就称之为系统颜色，在web中，我们也是可以使用这些颜色，于是，我们可以实现和系统主题风格类似的web组件皮肤效果。</p>
<p>OK，都有哪些系统颜色关键字呢？</p>
<p>下面是一些整理，注意，这些跟着系统走的，不是所有的系统都支持；而且有些值是跟着浏览器走的，Chrome浏览器可能是淡灰色，IE下可能是白色表现等：</p>
<dl style="font: small Tahoma,'Liberation Sans','Nimbus Sans L',sans-serif; border: 2px solid #a0b3d6; padding: 0.5em 0pt 0.5em 0.5em; -moz-column-rule: 1px solid royalblue; -moz-column-width: 15em; background: #eee; -webkit-columns: 15em; -webkit-column-rule: 1px solid royalblue; columns: 17em; column-rule: 2px solid #a0b3d6;">
<dt>ActiveBorder</dt>
<dd>激活态窗体边框。
<div class="eg-bg" style="background:ActiveBorder;"></div>
</dd>
<dt>ActiveCaption</dt>
<dd>激活态窗体标题。&nbsp; 应该使用CaptionText前景色。
<div class="eg-bg" style="background:ActiveCaption;"></div>
</dd>
<dt>AppWorkspace</dt>
<dd>多文档界面背景色。
<div class="eg-bg" style="background:AppWorkspace;"></div>
</dd>
<dt>Background</dt>
<dd>桌面背景。
<div class="eg-bg" style="background:Background;"></div>
</dd>
<dt>ButtonFace</dt>
<dd>三维元素的表面背景色，之所以会呈现3D效果，是由于周围有一层边框。应该使用ButtonText的前景色。
<div class="eg-bg" style="background:ButtonFace;"></div>
</dd>
<dt>ButtonHighlight</dt>
<dd>3D元素面对光源的边框色，之所以会呈现3D效果，是由于周围有一层边框。
<div class="eg-bg" style="background:ButtonHighlight;"></div>
</dd>
<dt>ButtonShadow</dt>
<dd>3D元素背对光源的边框色，之所以会呈现3D效果，是由于周围有一层边框。
<div class="eg-bg" style="background:ButtonShadow;"></div>
</dd>
<dt>ButtonText</dt>
<dd>按钮文本。&nbsp; 需要使用ButtonFace或ThreeDFace背景色。
<div class="eg-bg" style="background:ButtonText;"></div>
</dd>
<dt>CaptionText</dt>
<dd>标题文本， 尺寸盒子, 以及滚动条箭头盒子。&nbsp; 需要使用ActiveCaption背景色。
<div class="eg-bg" style="background:CaptionText;"></div>
</dd>
<dt>GrayText</dt>
<dd>灰色的(disabled)文本。
<div class="eg-bg" style="background:GrayText;"></div>
</dd>
<dt>Highlight</dt>
<dd>控件中被选中的项。&nbsp; 应使用HighlightText前景色。
<div class="eg-bg" style="background:Highlight;"></div>
</dd>
<dt>HighlightText</dt>
<dd>控件中被选中的项的文本。&nbsp; 应使用Highlight背景色。
<div class="eg-bg" style="background:HighlightText;"></div>
</dd>
<dt>InactiveBorder</dt>
<dd>非激活态窗体边框。
<div class="eg-bg" style="background:InactiveBorder;"></div>
</dd>
<dt>InactiveCaption</dt>
<dd>非激活态窗体标题。&nbsp; 应使用InactiveCaptionText前景色。
<div class="eg-bg" style="background:InactiveCaption;"></div>
</dd>
<dt>InactiveCaptionText</dt>
<dd>非激活标题的文本颜色。&nbsp; 应使用InactiveCaption背景色。
<div class="eg-bg" style="background:InactiveCaptionText;"></div>
</dd>
<dt>InfoBackground</dt>
<dd>提示框控件背景色。&nbsp; 应使用InfoText前景色。
<div class="eg-bg" style="background:InfoBackground;"></div>
</dd>
<dt>InfoText</dt>
<dd>提示框控件文本色。&nbsp; 应使用InfoBackground背景色。
<div class="eg-bg" style="background:InfoText;"></div>
</dd>
<dt>Menu</dt>
<dd>菜单背景。&nbsp; 应使用MenuText前景色。
<div class="eg-bg" style="background:Menu;"></div>
</dd>
<dt>MenuText</dt>
<dd>菜单中的文本。&nbsp; 应使用Menu背景色。
<div class="eg-bg" style="background:MenuText;"></div>
</dd>
<dt>Scrollbar</dt>
<dd>滚动条灰色区域。
<div class="eg-bg" style="background:Scrollbar;"></div>
</dd>
<dt>ThreeDDarkShadow</dt>
<dd>远离3D元素光源的两个边框中比较暗（通常外面）的那个颜色。
<div class="eg-bg" style="background:ThreeDDarkShadow;"></div>
</dd>
<dt>ThreeDFace</dt>
<dd>3D元素的表面被背景色。&nbsp; 应使用ButtonText前景色。
<div class="eg-bg" style="background:ThreeDFace;"></div>
</dd>
<dt>ThreeDHighlight</dt>
<dd>面对3D元素光源两个边框亮（通常外面）的那一个。
<div class="eg-bg" style="background:ThreeDHighlight;"></div>
</dd>
<dt>ThreeDLightShadow</dt>
<dd>面对3D元素光源的两个边框中比较暗（通常里面）的那个颜色。
<div class="eg-bg" style="background:ThreeDLightShadow;"></div>
</dd>
<dt>ThreeDShadow</dt>
<dd>远离3D元素光源的两个边框中比较亮（通常里面）的那个颜色。
<div class="eg-bg" style="background:ThreeDShadow;"></div>
</dd>
<dt>Window</dt>
<dd>窗体背景。&nbsp; 应使用WindowText前景色。
<div class="eg-bg" style="background:Window;"></div>
</dd>
<dt>WindowFrame</dt>
<dd>窗体框架。
<div class="eg-bg" style="background:WindowFrame;"></div>
</dd>
<dt>WindowText</dt>
<dd>窗体中的文本。&nbsp; 应使用Window背景色。
<div class="eg-bg" style="background:WindowText;"></div>
</dd>
</dl>
<h3>七、结束语</h3>
<p>&lt;color&gt;还有很多其他知识点，要么鸡犬不闻，要么耳熟能详，我就不多介绍了。</p>
<p>最后，感谢阅读！</p>
<p>行文仓促，错误难免，欢迎指正，也欢迎提供其他认为不错的相关的知识点，我会补充。</p>
<p>本文大多数内容翻译参考自MDN的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value" target="_blank">color_value</a></p>
<p><img src="http://ww3.sinaimg.cn/thumb180/6412a4a2jw1eueuye95cpj2050050weq.jpg" width="180" height="180" alt="沙县大餐" class="alignnone" /></p>
<p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4859">http://www.zhangxinxu.com/wordpress/?p=4859</a></p>
<p>（本篇完）</p>
";s:14:"date_timestamp";i:1437841453;}i:7;a:14:{s:5:"title";s:46:"字母’x’在CSS世界中的角色和故事";s:4:"link";s:66:"http://www.zhangxinxu.com/wordpress/2015/06/about-letter-x-of-css/";s:8:"comments";s:75:"http://www.zhangxinxu.com/wordpress/2015/06/about-letter-x-of-css/#comments";s:7:"pubdate";s:31:"Sun, 28 Jun 2015 07:01:54 +0000";s:2:"dc";a:1:{s:7:"creator";s:10:"张 鑫旭";}s:8:"category";s:62:"css相关baselineexvertical-alignvertical-align:middlex-height";s:4:"guid";s:43:"http://www.zhangxinxu.com/wordpress/?p=4848";s:11:"description";s:572:"首先，我们这里的字母<code>'x'</code>就是26个英文字母<code>a</code>,<code>b</code>,<code>c</code>,<code>...</code>中的<code>x</code>.

由于自身形态的一些特殊性，因此，这个小小的不起眼的字母担当大任，在CSS世界中扮演了一个重要的角色。

有人可能的第一反应是：“我知道，可以模拟关闭按钮的那个叉叉效果！”

这位同学思维很活跃，但是呢，本文所要介绍的字母<code>'x'</code>和CSS的关系不是奇巧淫技，而是正统的术语上的紧密联系……";s:7:"content";a:1:{s:7:"encoded";s:9624:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4848">http://www.zhangxinxu.com/wordpress/?p=4848</a></p>
<h3>一、不起眼的字母&#8217;x&#8217;</h3>
<p>首先，我们这里的字母<code>'x'</code>就是26个英文字母<code>a</code>,<code>b</code>,<code>c</code>,<code>...</code>中的<code>x</code>.</p>
<p>由于自身形态的一些特殊性，因此，这个小小的不起眼的字母担当大任，在CSS世界中扮演了一个重要的角色。</p>
<p>有人可能的第一反应是：“我知道，可以模拟关闭按钮的那个叉叉效果！”</p>
<p>这位同学思维很活跃，但是呢，本文所要介绍的字母<code>'x'</code>和CSS的关系不是奇巧淫技，而是正统的术语上的紧密联系。</p>
<h3>二、字母&#8217;x&#8217;与CSS中的基线</h3>
<p>在各种内联相关模型中，凡是涉及到垂直方向的排版或者对齐的，都离不开最最基本的基线(<code>baseline</code>)。例如，<code>line-height</code>行高的定义就是两基线的间距；<code>vertical-align</code>的默认值就是基线；其他中线顶线一类的定义也离不开基线；基线甚至衍生出了：</p>
<ol>
<li>&#8220;alphabetic&#8221; baseline: “字母”基线 &#8211; 英文</li>
<li>&#8220;hanging&#8221; baseline: “悬挂”基线 &#8211; 印度文</li>
<li>&#8220;ideographic&#8221; baseline: “表意”基线 &#8211; 中文</li>
</ol>
<p><img src="http://image.zhangxinxu.com/image/blog/201506/baselines.png" width="457" height="89" alt="衍生的基线概念" class="alignnone" /></p>
<p>那大家知道基线又是如何定义的吗？</p>
<p>哈，基线的定义就离不开本文的男主角<code>'x'</code>.</p>
<p><strong>字母x的下边缘(线)就是我们的基线。</strong></p>
<p>对，是字母<code>x</code>, 不是字母<code>s</code>之类下面有尾巴的字母。</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-28_105734.png" width="506" height="234" alt="基线与字母x" class="alignnone" /></p>
<h3>三、字母&#8217;x&#8217;与CSS中的x-height</h3>
<p>字母<code>'x'</code>与CSS的故事远不止基线这么简单。CSS中有一个概念叫做<code>"x-height"</code>, 指的是字母<code>'x'</code>的高度。</p>
<p>有人可能会疑问了，“一个字母的高度跟我CSS布局排版有半毛钱关系啊？”</p>
<p>实际上关系可大了。</p>
<p>首先，需要了解下<code>"x-height"</code>的含义，通俗讲，<code>"x-height"</code>就是指的小写字母<code>'x'</code>的高度；术语描述就是基线和等分线[mean line](也称作中线[midline])之间的距离。</p>
<p>维基上有这么个示意图：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/410px-Typography_Line_Terms.svg.png" width="410" height="110" alt="维基百科x-height示意图" class="alignnone" /></p>
<p><code>"x-height"</code>的示意范围一目了然，了然于心，于心不忍，不忍直视。</p>
<p>上面图中还出现了其他的名词，这里简单说下我的理解：</p>
<ul>
<li>ascender height: 上下线高度</li>
<li>cap height: 大写字母高度</li>
<li>median: 中线</li>
<li>descender height: 下行线高度</li>
</ul>
<p>然后，CSS中有些属性值的定义就和这个<code>"x-height"</code>的有关，最典型的代表就是：<code>vertical-align: middle</code>.</p>
<p>这里的<code>middle</code>是中间的意思，注意，跟上面的<code>median</code>中线不是一个意思。规范中对垂直对齐的<code>middle</code>这么解释的：</p>
<blockquote><p><strong>middle:</strong> This identifies a baseline that is offset from the alphabetic baseline in the shift-direction by 1/2 the value of the x-height font characteristic. The position of this baseline may be obtained from the font data or, for fonts that have a font characteristic for &#8220;x-height&#8221;, it may be computed using 1/2 the &#8220;x-height&#8221;. Lacking either of these pieces of information, the position of this baseline may be approximated by the &#8220;central&#8221; baseline.</p></blockquote>
<p>大意就是：<code>middle</code>指的是基线往上1/2 <code>"x-height"</code>高度。我们可以近似脑补成字母<code>x</code>交叉点那个位置。</p>
<p>有此可见，<code>vertical-align: middle</code>并不是绝对的垂直居中对齐，我们平常看到的<code>middle</code>效果只是一种近似的效果。原因很简单，因为不同的字体，其在行内盒子中的位置是不一样的，比方说&#8217;微软雅黑&#8217;就是一个字符下沉比较明显的字体，所有字符的位置相比其他字体要偏下一点。要是<code>vertical-align: middle</code>是相对容器中分线对齐，呵呵，你会发现图标和文字不在一条线上，而相对于字符<code>x</code>的中心位置对齐，我们肉眼看上去就好像和文字居中对齐了。</p>
<h3>四、字母&#8217;x&#8217;与CSS中ex</h3>
<p>字母<code>'x'</code>衍生出了<code>"x-height"</code>概念，并在这个基础上深耕细作，进一步衍生出了<code>ex</code>, 注意，这里的<code>ex</code>不是前任的意思，而是地地道道CSS中的一个尺寸单位。</p>
<p>大家可能都听过用过<code>em</code>, <code>px</code>甚至用过<code>rem</code>, 说不定对连IE6都老早支持的<code>ex</code>单位却很陌生。</p>
<p><code>ex</code>是CSS中的一个相对单位，指的的是小写字母<code>x</code>的高度，没错，就是指<code>"x-height"</code>.</p>
<p>那这个单位有什么实际用途呢？我只能呵呵，貌似没啥实际用途，否则也不会这么不为人所知。</p>
<p>是这样吗？</p>
<h3>五、单位ex的价值与实用性</h3>
<p>存在必有价值。我们细细思考字母<code>"x"</code>在CSS世界中扮演的角色，就会发现<code>ex</code>的价值所在。</p>
<p>首先，需要明确一点，虽然说尺寸单位的作用是限定元素的尺寸，但是，由于字母<code>"x"</code>受字体和环境影响大，参考性太低，因此<code>ex</code>显然不太适合做这个。那问题来了，<code>ex</code>连自己的本职工作都做不好，难道还指望其副业开挂？</p>
<p>没错，<code>ex</code>的价值就在其副业上——不受字体字号影响的内联元素的垂直居中对齐效果。</p>
<p>我们都知道，内联元素默认是基线对齐的，而基线就是<code>x</code>的底部，而<code>1ex</code>就是一个<code>x</code>的高度。设想下，假如我们图标高度就是<code>1ex</code>, 同时背景图片居中，岂不是图标和文字天然垂直居中，而且，完全不受字体和字号的影响。因为<code>ex</code>就是一个相对于字体字号的单位。</p>
<p>文字表述苍白，我们看个例子，下图所示的文字后面跟个小三角图标的效果是非常常见的：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-28_143139.png" width="125" height="50" alt="文字和小三角效果" class="alignnone" /></p>
<p>现在，要让该图标和文字中间位置排整齐，你是如何实现？</p>
<p>尺寸啪啪，然后<code>vertical-align: middle</code>?</p>
<p>这样虽然也有效果，但是，实际上啰嗦了，借助<code>ex</code>单位，我们直接借助默认的<code>baseline</code>对齐就可以实现我们的效果！</p>
<p>如下CSS代码：</p>
<div class="zxx_code">
<pre>.icon-arrow {
    display: inline-block;
    width: 20px;
    height: <mark>1ex</mark>;
    background: url(arrow.png) no-repeat center;
}</pre>
</div>
<p>然后就华丽丽地对齐了，完全没有<code>vertical-align</code>出场的机会。</p>
<p>您可以狠狠地点击这里：<a href="http://www.zhangxinxu.com/study/201506/ex-vertical-align.html" class="a_link" target="_blank">ex高度图标和字符天然对齐Demo</a></p>
<p>会发现，字体，文字大小全变化，对齐依旧良好：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-28_144726.png" width="411" height="273" alt="文字和小图标对齐效果截图" class="alignnone" /></p>
<p>虽然使用<code>ex</code>做高度实现天然垂直对齐看上去很巧妙，但是，也是有局限的，就是如果图标背景的高度超过<code>1ex</code>，我们就只能再请<code>vertical-align</code>出马了……</p>
<p>对了，还有一点。由于IE6-IE7对内联模型的解释有问题，因此，各类<code>vertical-align</code>在这些浏览器下都是有问题，包括这里的<code>ex</code>天然基线对齐，需要特别处理下。</p>
<h3>六、结束语</h3>
<p>外面的雨哗啦啦的下了一整天，我的钓鱼大计啊，就此泡汤。</p>
<p>要是现在在老家就好了，沟沟渠渠里一定都是从鱼塘跑出来的鱼，下水摸鱼捕鱼不知有多快活。</p>
<p>不过话说，这阴雨天适合钓鲶鱼，要不待会儿冒雨出去碰碰运气？</p>
<p>话说本文的<code>id</code>是4848, 有些不吉利啊。不过反而来讲，可能是对鱼儿说的！</p>
<p>有道理，写完就去钓会儿鱼，我有大头，下雨不愁！</p>
<p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4848">http://www.zhangxinxu.com/wordpress/?p=4848</a></p>
<p>（本篇完）</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:71:"http://www.zhangxinxu.com/wordpress/2015/06/about-letter-x-of-css/feed/";}s:5:"slash";a:1:{s:8:"comments";s:2:"17";}s:7:"summary";s:572:"首先，我们这里的字母<code>'x'</code>就是26个英文字母<code>a</code>,<code>b</code>,<code>c</code>,<code>...</code>中的<code>x</code>.

由于自身形态的一些特殊性，因此，这个小小的不起眼的字母担当大任，在CSS世界中扮演了一个重要的角色。

有人可能的第一反应是：“我知道，可以模拟关闭按钮的那个叉叉效果！”

这位同学思维很活跃，但是呢，本文所要介绍的字母<code>'x'</code>和CSS的关系不是奇巧淫技，而是正统的术语上的紧密联系……";s:12:"atom_content";s:9624:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4848">http://www.zhangxinxu.com/wordpress/?p=4848</a></p>
<h3>一、不起眼的字母&#8217;x&#8217;</h3>
<p>首先，我们这里的字母<code>'x'</code>就是26个英文字母<code>a</code>,<code>b</code>,<code>c</code>,<code>...</code>中的<code>x</code>.</p>
<p>由于自身形态的一些特殊性，因此，这个小小的不起眼的字母担当大任，在CSS世界中扮演了一个重要的角色。</p>
<p>有人可能的第一反应是：“我知道，可以模拟关闭按钮的那个叉叉效果！”</p>
<p>这位同学思维很活跃，但是呢，本文所要介绍的字母<code>'x'</code>和CSS的关系不是奇巧淫技，而是正统的术语上的紧密联系。</p>
<h3>二、字母&#8217;x&#8217;与CSS中的基线</h3>
<p>在各种内联相关模型中，凡是涉及到垂直方向的排版或者对齐的，都离不开最最基本的基线(<code>baseline</code>)。例如，<code>line-height</code>行高的定义就是两基线的间距；<code>vertical-align</code>的默认值就是基线；其他中线顶线一类的定义也离不开基线；基线甚至衍生出了：</p>
<ol>
<li>&#8220;alphabetic&#8221; baseline: “字母”基线 &#8211; 英文</li>
<li>&#8220;hanging&#8221; baseline: “悬挂”基线 &#8211; 印度文</li>
<li>&#8220;ideographic&#8221; baseline: “表意”基线 &#8211; 中文</li>
</ol>
<p><img src="http://image.zhangxinxu.com/image/blog/201506/baselines.png" width="457" height="89" alt="衍生的基线概念" class="alignnone" /></p>
<p>那大家知道基线又是如何定义的吗？</p>
<p>哈，基线的定义就离不开本文的男主角<code>'x'</code>.</p>
<p><strong>字母x的下边缘(线)就是我们的基线。</strong></p>
<p>对，是字母<code>x</code>, 不是字母<code>s</code>之类下面有尾巴的字母。</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-28_105734.png" width="506" height="234" alt="基线与字母x" class="alignnone" /></p>
<h3>三、字母&#8217;x&#8217;与CSS中的x-height</h3>
<p>字母<code>'x'</code>与CSS的故事远不止基线这么简单。CSS中有一个概念叫做<code>"x-height"</code>, 指的是字母<code>'x'</code>的高度。</p>
<p>有人可能会疑问了，“一个字母的高度跟我CSS布局排版有半毛钱关系啊？”</p>
<p>实际上关系可大了。</p>
<p>首先，需要了解下<code>"x-height"</code>的含义，通俗讲，<code>"x-height"</code>就是指的小写字母<code>'x'</code>的高度；术语描述就是基线和等分线[mean line](也称作中线[midline])之间的距离。</p>
<p>维基上有这么个示意图：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/410px-Typography_Line_Terms.svg.png" width="410" height="110" alt="维基百科x-height示意图" class="alignnone" /></p>
<p><code>"x-height"</code>的示意范围一目了然，了然于心，于心不忍，不忍直视。</p>
<p>上面图中还出现了其他的名词，这里简单说下我的理解：</p>
<ul>
<li>ascender height: 上下线高度</li>
<li>cap height: 大写字母高度</li>
<li>median: 中线</li>
<li>descender height: 下行线高度</li>
</ul>
<p>然后，CSS中有些属性值的定义就和这个<code>"x-height"</code>的有关，最典型的代表就是：<code>vertical-align: middle</code>.</p>
<p>这里的<code>middle</code>是中间的意思，注意，跟上面的<code>median</code>中线不是一个意思。规范中对垂直对齐的<code>middle</code>这么解释的：</p>
<blockquote><p><strong>middle:</strong> This identifies a baseline that is offset from the alphabetic baseline in the shift-direction by 1/2 the value of the x-height font characteristic. The position of this baseline may be obtained from the font data or, for fonts that have a font characteristic for &#8220;x-height&#8221;, it may be computed using 1/2 the &#8220;x-height&#8221;. Lacking either of these pieces of information, the position of this baseline may be approximated by the &#8220;central&#8221; baseline.</p></blockquote>
<p>大意就是：<code>middle</code>指的是基线往上1/2 <code>"x-height"</code>高度。我们可以近似脑补成字母<code>x</code>交叉点那个位置。</p>
<p>有此可见，<code>vertical-align: middle</code>并不是绝对的垂直居中对齐，我们平常看到的<code>middle</code>效果只是一种近似的效果。原因很简单，因为不同的字体，其在行内盒子中的位置是不一样的，比方说&#8217;微软雅黑&#8217;就是一个字符下沉比较明显的字体，所有字符的位置相比其他字体要偏下一点。要是<code>vertical-align: middle</code>是相对容器中分线对齐，呵呵，你会发现图标和文字不在一条线上，而相对于字符<code>x</code>的中心位置对齐，我们肉眼看上去就好像和文字居中对齐了。</p>
<h3>四、字母&#8217;x&#8217;与CSS中ex</h3>
<p>字母<code>'x'</code>衍生出了<code>"x-height"</code>概念，并在这个基础上深耕细作，进一步衍生出了<code>ex</code>, 注意，这里的<code>ex</code>不是前任的意思，而是地地道道CSS中的一个尺寸单位。</p>
<p>大家可能都听过用过<code>em</code>, <code>px</code>甚至用过<code>rem</code>, 说不定对连IE6都老早支持的<code>ex</code>单位却很陌生。</p>
<p><code>ex</code>是CSS中的一个相对单位，指的的是小写字母<code>x</code>的高度，没错，就是指<code>"x-height"</code>.</p>
<p>那这个单位有什么实际用途呢？我只能呵呵，貌似没啥实际用途，否则也不会这么不为人所知。</p>
<p>是这样吗？</p>
<h3>五、单位ex的价值与实用性</h3>
<p>存在必有价值。我们细细思考字母<code>"x"</code>在CSS世界中扮演的角色，就会发现<code>ex</code>的价值所在。</p>
<p>首先，需要明确一点，虽然说尺寸单位的作用是限定元素的尺寸，但是，由于字母<code>"x"</code>受字体和环境影响大，参考性太低，因此<code>ex</code>显然不太适合做这个。那问题来了，<code>ex</code>连自己的本职工作都做不好，难道还指望其副业开挂？</p>
<p>没错，<code>ex</code>的价值就在其副业上——不受字体字号影响的内联元素的垂直居中对齐效果。</p>
<p>我们都知道，内联元素默认是基线对齐的，而基线就是<code>x</code>的底部，而<code>1ex</code>就是一个<code>x</code>的高度。设想下，假如我们图标高度就是<code>1ex</code>, 同时背景图片居中，岂不是图标和文字天然垂直居中，而且，完全不受字体和字号的影响。因为<code>ex</code>就是一个相对于字体字号的单位。</p>
<p>文字表述苍白，我们看个例子，下图所示的文字后面跟个小三角图标的效果是非常常见的：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-28_143139.png" width="125" height="50" alt="文字和小三角效果" class="alignnone" /></p>
<p>现在，要让该图标和文字中间位置排整齐，你是如何实现？</p>
<p>尺寸啪啪，然后<code>vertical-align: middle</code>?</p>
<p>这样虽然也有效果，但是，实际上啰嗦了，借助<code>ex</code>单位，我们直接借助默认的<code>baseline</code>对齐就可以实现我们的效果！</p>
<p>如下CSS代码：</p>
<div class="zxx_code">
<pre>.icon-arrow {
    display: inline-block;
    width: 20px;
    height: <mark>1ex</mark>;
    background: url(arrow.png) no-repeat center;
}</pre>
</div>
<p>然后就华丽丽地对齐了，完全没有<code>vertical-align</code>出场的机会。</p>
<p>您可以狠狠地点击这里：<a href="http://www.zhangxinxu.com/study/201506/ex-vertical-align.html" class="a_link" target="_blank">ex高度图标和字符天然对齐Demo</a></p>
<p>会发现，字体，文字大小全变化，对齐依旧良好：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-28_144726.png" width="411" height="273" alt="文字和小图标对齐效果截图" class="alignnone" /></p>
<p>虽然使用<code>ex</code>做高度实现天然垂直对齐看上去很巧妙，但是，也是有局限的，就是如果图标背景的高度超过<code>1ex</code>，我们就只能再请<code>vertical-align</code>出马了……</p>
<p>对了，还有一点。由于IE6-IE7对内联模型的解释有问题，因此，各类<code>vertical-align</code>在这些浏览器下都是有问题，包括这里的<code>ex</code>天然基线对齐，需要特别处理下。</p>
<h3>六、结束语</h3>
<p>外面的雨哗啦啦的下了一整天，我的钓鱼大计啊，就此泡汤。</p>
<p>要是现在在老家就好了，沟沟渠渠里一定都是从鱼塘跑出来的鱼，下水摸鱼捕鱼不知有多快活。</p>
<p>不过话说，这阴雨天适合钓鲶鱼，要不待会儿冒雨出去碰碰运气？</p>
<p>话说本文的<code>id</code>是4848, 有些不吉利啊。不过反而来讲，可能是对鱼儿说的！</p>
<p>有道理，写完就去钓会儿鱼，我有大头，下雨不愁！</p>
<p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4848">http://www.zhangxinxu.com/wordpress/?p=4848</a></p>
<p>（本篇完）</p>
";s:14:"date_timestamp";i:1435474914;}i:8;a:14:{s:5:"title";s:42:"IE7浏览器下CSS属性选择器二三事";s:4:"link";s:71:"http://www.zhangxinxu.com/wordpress/2015/06/ie7-attribute-css-selector/";s:8:"comments";s:80:"http://www.zhangxinxu.com/wordpress/2015/06/ie7-attribute-css-selector/#comments";s:7:"pubdate";s:31:"Fri, 19 Jun 2015 17:05:41 +0000";s:2:"dc";a:1:{s:7:"creator";s:10:"张 鑫旭";}s:8:"category";s:57:"css相关:checkeddefaultCheckeddisabledIE7属性选择器";s:4:"guid";s:43:"http://www.zhangxinxu.com/wordpress/?p=4843";s:11:"description";s:271:"虽然属性选择器是CSS3选择器的范畴，但是IE7浏览器很给力地支持，但是，嘴上说支持，实际上还有很多有意思的特性表现，这里，就以实例的形式给大家分享下，希望能对大家实际的工作有所帮助或启迪。";s:7:"content";a:1:{s:7:"encoded";s:11632:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4843">http://www.zhangxinxu.com/wordpress/?p=4843</a></p>
<h3>一、为何专门说起IE7</h3>
<p>以前，或者说数年前，我们从事桌面端网页开发的时候，基本上都还要兼顾IE6浏览器, 即使有些特性，IE7支持，我们也会忽略之。于是，我们会不自然地把IE6和IE7浏览器归为一路货色，研究的多半是两个浏览器共性的东西，比方说haslayout之类的。</p>
<p>但是，最近1~2年，至少我个人所从事的桌面PC项目都不需要管IE6浏览器(0.3%)了，但是，还是要关心IE7浏览器(3%+)的。虽然，我们有丰富的处理IE6浏览器的经验，但是，当我们不要管IE6浏览器的时候，我们前端技术的选型上就不能停留在数年前的那个套路上，我们应该与时俱进，大力挖掘IE7浏览器的潜力。</p>
<p>根据我的一些研究与实践，IE7浏览器的一些特性和潜力还是很惊人的，但就选择器这一块，我们就能玩很多事情，如相邻父子选择器，相邻和不相邻兄弟选择器，以及本文要专门细说的属性选择器。</p>
<p>OK，为何要专门讲IE7浏览器下的CSS属性选择器呢？哈哈，那是因为有趣的事情还真不少！</p>
<h3>二、CSS属性选择器简介</h3>
<p>什么是属性选择器呢？就是根据DOM元素的属性选择对应的元素。大致有下面的用法：</p>
<div class="zxx_code">
<pre>[attr]
[attr=val]
[attr^=val]
[attr$=val]
[attr*=val]
</pre>
</div>
<p>以上选择器，实际上是归属于CSS3选择器的，范畴。嘿，令人惊奇的是，IE8浏览器甚至IE7浏览器也支持以上这些选择器，没错，包括属性正则判断，也是支持的。</p>
<p>哟，你还不信？</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201506/dushushao.png" width="160" height="102" alt="你别骗我" class="alignnone" /></p>
<p>那我们实例走起，您可以狠狠地点击这里：<a class="a_link" href="http://www.zhangxinxu.com/study/201506/ie7-attribute-basic-support.html" target="_blank">IE7与CSS属性选择器测试Demo</a></p>
<p>如下CSS和HTML:</p>
<div class="zxx_code">
<pre>span[id=aaa] { color: #cd0000; }
span[id^=b] { color: #cd0000; }
span[id*=c] { color: #cd0000; }
span[id$=d] { color: #cd0000; }</pre>
</div>
<div class="zxx_code">
<pre>&lt;span id="aaa">颜色是红色支持[id=val]&lt;/span>
&lt;span id="bbb">颜色是红色支持[id^=val]&lt;/span>
&lt;span id="ccc">颜色是红色支持[id*=val]&lt;/span>
&lt;span id="ddd">颜色是红色支持[id$=val]&lt;/span></pre>
</div>
<p>结果逆市上扬，全线飘红：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-19_234212.png" width="445" height="258" alt="属性选择器IE7浏览器支持情况截图" class="alignnone" /></p>
<p>“我去？”有人会疑问了，“既然IE7这回咸鱼翻身、光宗耀祖了，那还有什么好吐槽的呢”！</p>
<p>所谓“人算不如IE算”，天真的我们天真的认为事情就这么happy ending了！实际上，精彩的故事才刚刚开始。上面Demo之所以支持，因为我们使用了一个非常常用的属性<code>id</code>做示意的，DOM元素的原生属性何其多，你能保证IE7都照顾得来？</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201506/huaixiao.jpg" width="96" height="77" alt="坏笑" class="alignnone" /></p>
<h3>三、IE7浏览器不认识原生的[checked]属性</h3>
<p><code>[checked]</code>属性大家应该都知道，对吧，一般平常我们用在单选框/复选框上，表示是否选中，例如：</p>
<div class="zxx_code">
<pre><&lt;input type="radio" checked>/pre></div>

然而，就是这个其貌不扬的<code>[checked]</code>属性，在IE7那里确是不支持的，哦，抱歉，说话要严谨，是：<strong>IE7浏览器下，单复选框的[checked]作为属性选择器不支持</strong>。注意，一定是单选框(type=radio)或者复选框(type=checkbox)元素才这样。比方说<code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>元素上挂一个<code>[checked]</code>属性选择器，依然是能识别的。

如下CSS和HTML代码：
<div class="zxx_code"><pre>[checked] { color: #cd0000; }
[checked] + span { color: #cd0000; }</pre>
</div>
<div class="zxx_code">
<pre>
&lt;span checked>颜色是红色则支持&lt;/span>
&lt;input type="radio" checked>&lt;span>颜色是红色则支持&lt;/span></pre>
</div>
<p>结果呢，现代浏览器们自然不用说，就说IE8浏览器下，也都是全线飘红，<code>[checked]</code>属性选择器全支持：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-20_000526.png" width="368" height="197" alt="IE8浏览器下认识单选框的[checked]属性选择器" class="alignnone" /></p>
<p>但是，本文的男主角，IE7浏览器则 <img src="http://mat1.gtimg.com/www/mb/images/face/1.gif" align="absmiddle" height="24">, 似乎不支持单选框[checked]属性选择器：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-20_000756.png" width="391" height="225" alt="IE浏览器不支持单选框[checked]属性选择器截图" class="alignnone" /></p>
<p>不完美了，生活不美丽了。</p>
<p>IE7啊，IE7，枉我对你抱有期望，没想到，期望越大，失望越大。你说，你这么搞，我想根据<code>[checked]</code>属性模拟自定义的单复选框效果，就实现不了了啊，你怎么就不争气呢！！</p>
<p>很多时候，父母怪孩子不听话，其实没有发现孩子那与众不同之处，没有因材施教。</p>
<p>我们一窥IE7浏览器下对<code>checked</code>属性的HTML渲染，会发现，完全大写化了，和<code>&lt;span&gt;</code>元素上非原生的小写<code>checked</code>属性完全不一样：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-20_001550.png" width="618" height="127" alt="checked属性的不同解析" class="alignnone" /></p>
<p>而高版本IE浏览器下则没有这样的区分。也就是IE7浏览器似乎对单选框的<code>checked</code>属性特殊对待了，究竟背后藏了怎样的故事呢？</p>
<p>或许，我们可以等待后人来解答！………………你以为是这样的故事套路吗？错！我现在就要告诉你背后的故事。</p>
<p>如果我们窥探jQuery <code>prop()</code>方法的源码，会发现，有个关键字非常抢眼，什么关键字呢？当当当当……就是<code>defaultChecked</code>.</p>
<p>也就是，虽然，IE7浏览器表面上，我们看到的是<code>checked</code>属性，实际上，背后运作的是<code>defaultChecked</code>属性，因此，对于单复选框，对于IE7浏览器，就不要指望<code>[checked]</code>选择器了，试试<code>[defaultChecked]</code>属性选择器？</p>
<div class="zxx_code">
<pre>[defaultChecked] + span { color: #cd0000; }</pre>
</div>
<p>结果，IE7浏览器又开始放光彩了，百闻不如一见，您可以狠狠地点击这里：<a class="a_link" href="http://www.zhangxinxu.com/study/201506/ie7-checked-attribute-unknown.html" target="_blank">IE7浏览器[checked]/[defaultChecked]属性选择器Demo</a></p>
<p>结果，IE7浏览器东边不亮西边亮：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-20_002558.png" width="523" height="280" alt="IE7 defaultChecked属性选择器作用截图" class="alignnone" /></p>
<p>OK, 所以，这下大家应该知道，遇到IE7表单元素不认识<code>[checked]</code>属性选择器问题时候改怎么办了吧~~</p>
<h3>四、IE7浏览器认识原生的[disabled]属性吗？</h3>
<p>同样是表单元素的原生属性，既然IE7不识<code>[checked]</code>属性选择器，那是否也不认识<code>[disabled]</code>属性选择器呢？</p>
<p>很好的问题！</p>
<p>究竟认不认识呢？哈，大家放心，对于<code>[disabled]</code>属性选择器，IE7浏览器没有那么多花头，支持很纯正，大家放心使用。</p>
<p>不放心的话，您可以狠狠地点击这里看个究竟：<a class="a_link" href="http://www.zhangxinxu.com/study/201506/ie7-disabled-attribute-known.html" target="_blank">IE7浏览器支持[disabled]属性选择器Demo</a></p>
<p>结果IE7浏览器下，顺利飘红：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-20_003505.png" width="339" height="153" alt="IE7浏览器支持disabled属性选择器" class="alignnone" /></p>
<h3>五、IE7浏览器矫情之没有标签等不认爹</h3>
<p>本来，对吧，我们差不多认为，IE7关于属性选择器的故事就这么尾声了，但是，有句话怎么说来着？“贱人就是矫情！” </p>
<p>关于属性选择器，IE7还有一个矫情的地方，就是部分<code>[attr=val]</code>的选择器，如果前面没有标签选择器或类名选择器等选择器的时候，属性选择器就没有作用。</p>
<p>例如，这样一个CSS代码：</p>
<div class="zxx_code">
<pre>[type=checkbox] { opacity: 0.5; filter: alpha(opacity=50); }</pre>
</div>
<p>所有复选框透明度50%, 没错吧。</p>
<p>但是，IE7浏览器下，不认识。</p>
<p>但是，我们稍作修改</p>
<div class="zxx_code">
<pre>input[type=checkbox] { opacity: 0.5; filter: alpha(opacity=50); }</pre>
</div>
<p>IE7浏览器都认爹认得麻溜的很！</p>
<p>我们直接看例子吧，您可以狠狠地点击这里：<a class="a_link" href="http://www.zhangxinxu.com/study/201506/ie7-attribute-known-need-tag-selector.html" target="_blank">IE7浏览器没有标签不认爹Demo</a></p>
<p><img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-20_005501.png" width="551" height="187" alt="属性选择器辅助标签选择器示意" class="alignnone" /></p>
<p>从上面截图可以看出，纯粹的<code>[type=checkbox]</code>在IE7浏览器下，并没有改变复选框的透明度；而加了<code>input</code>标签选择器的单选框却半透明了。这里，不仅是<code>input</code>标签选择器，使用类似<code>.class</code>类名选择器也是可以生效的。</p>
<p>而且，并不是所有的属性是这样，<code>type</code>属性就是其中一个，例如<code>id</code>属性，则是正常的，<code>[id=xxx]</code>IE7浏览器是能识别的。为何有些属性可以，有些不可以，究竟背后藏了怎样的故事呢？</p>
<p>或许，我们可以等待后人来解答！………………你以为是这样的故事套路吗？没错！就是这样的套路，此现象我还没深究。</p>
<h3>六、hold不住了，结束语</h3>
<p>明天端午节，就是屈原跳水的日子，然后今天大盘很应景，也跳水了，呵呵呵！</p>
<p>我靠，我怎么又在废话了。上了年纪了，完全扛不住了，以前松松忙到2-3点的状态是一去不复返了。</p>
<p>我要去睡觉觉了，感谢阅读，行为仓促，错误在所难免，欢迎指正，不甚感激！</p>
<p>也欢迎补充IE7浏览器关于属性选择器的其他精彩现象！</p>
<p>更多吐槽，等哪天时间充足的时候。</p>
<p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4843">http://www.zhangxinxu.com/wordpress/?p=4843</a></p>
<p>（本篇完）</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:76:"http://www.zhangxinxu.com/wordpress/2015/06/ie7-attribute-css-selector/feed/";}s:5:"slash";a:1:{s:8:"comments";s:1:"9";}s:7:"summary";s:271:"虽然属性选择器是CSS3选择器的范畴，但是IE7浏览器很给力地支持，但是，嘴上说支持，实际上还有很多有意思的特性表现，这里，就以实例的形式给大家分享下，希望能对大家实际的工作有所帮助或启迪。";s:12:"atom_content";s:11632:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4843">http://www.zhangxinxu.com/wordpress/?p=4843</a></p>
<h3>一、为何专门说起IE7</h3>
<p>以前，或者说数年前，我们从事桌面端网页开发的时候，基本上都还要兼顾IE6浏览器, 即使有些特性，IE7支持，我们也会忽略之。于是，我们会不自然地把IE6和IE7浏览器归为一路货色，研究的多半是两个浏览器共性的东西，比方说haslayout之类的。</p>
<p>但是，最近1~2年，至少我个人所从事的桌面PC项目都不需要管IE6浏览器(0.3%)了，但是，还是要关心IE7浏览器(3%+)的。虽然，我们有丰富的处理IE6浏览器的经验，但是，当我们不要管IE6浏览器的时候，我们前端技术的选型上就不能停留在数年前的那个套路上，我们应该与时俱进，大力挖掘IE7浏览器的潜力。</p>
<p>根据我的一些研究与实践，IE7浏览器的一些特性和潜力还是很惊人的，但就选择器这一块，我们就能玩很多事情，如相邻父子选择器，相邻和不相邻兄弟选择器，以及本文要专门细说的属性选择器。</p>
<p>OK，为何要专门讲IE7浏览器下的CSS属性选择器呢？哈哈，那是因为有趣的事情还真不少！</p>
<h3>二、CSS属性选择器简介</h3>
<p>什么是属性选择器呢？就是根据DOM元素的属性选择对应的元素。大致有下面的用法：</p>
<div class="zxx_code">
<pre>[attr]
[attr=val]
[attr^=val]
[attr$=val]
[attr*=val]
</pre>
</div>
<p>以上选择器，实际上是归属于CSS3选择器的，范畴。嘿，令人惊奇的是，IE8浏览器甚至IE7浏览器也支持以上这些选择器，没错，包括属性正则判断，也是支持的。</p>
<p>哟，你还不信？</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201506/dushushao.png" width="160" height="102" alt="你别骗我" class="alignnone" /></p>
<p>那我们实例走起，您可以狠狠地点击这里：<a class="a_link" href="http://www.zhangxinxu.com/study/201506/ie7-attribute-basic-support.html" target="_blank">IE7与CSS属性选择器测试Demo</a></p>
<p>如下CSS和HTML:</p>
<div class="zxx_code">
<pre>span[id=aaa] { color: #cd0000; }
span[id^=b] { color: #cd0000; }
span[id*=c] { color: #cd0000; }
span[id$=d] { color: #cd0000; }</pre>
</div>
<div class="zxx_code">
<pre>&lt;span id="aaa">颜色是红色支持[id=val]&lt;/span>
&lt;span id="bbb">颜色是红色支持[id^=val]&lt;/span>
&lt;span id="ccc">颜色是红色支持[id*=val]&lt;/span>
&lt;span id="ddd">颜色是红色支持[id$=val]&lt;/span></pre>
</div>
<p>结果逆市上扬，全线飘红：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-19_234212.png" width="445" height="258" alt="属性选择器IE7浏览器支持情况截图" class="alignnone" /></p>
<p>“我去？”有人会疑问了，“既然IE7这回咸鱼翻身、光宗耀祖了，那还有什么好吐槽的呢”！</p>
<p>所谓“人算不如IE算”，天真的我们天真的认为事情就这么happy ending了！实际上，精彩的故事才刚刚开始。上面Demo之所以支持，因为我们使用了一个非常常用的属性<code>id</code>做示意的，DOM元素的原生属性何其多，你能保证IE7都照顾得来？</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201506/huaixiao.jpg" width="96" height="77" alt="坏笑" class="alignnone" /></p>
<h3>三、IE7浏览器不认识原生的[checked]属性</h3>
<p><code>[checked]</code>属性大家应该都知道，对吧，一般平常我们用在单选框/复选框上，表示是否选中，例如：</p>
<div class="zxx_code">
<pre><&lt;input type="radio" checked>/pre></div>

然而，就是这个其貌不扬的<code>[checked]</code>属性，在IE7那里确是不支持的，哦，抱歉，说话要严谨，是：<strong>IE7浏览器下，单复选框的[checked]作为属性选择器不支持</strong>。注意，一定是单选框(type=radio)或者复选框(type=checkbox)元素才这样。比方说<code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>元素上挂一个<code>[checked]</code>属性选择器，依然是能识别的。

如下CSS和HTML代码：
<div class="zxx_code"><pre>[checked] { color: #cd0000; }
[checked] + span { color: #cd0000; }</pre>
</div>
<div class="zxx_code">
<pre>
&lt;span checked>颜色是红色则支持&lt;/span>
&lt;input type="radio" checked>&lt;span>颜色是红色则支持&lt;/span></pre>
</div>
<p>结果呢，现代浏览器们自然不用说，就说IE8浏览器下，也都是全线飘红，<code>[checked]</code>属性选择器全支持：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-20_000526.png" width="368" height="197" alt="IE8浏览器下认识单选框的[checked]属性选择器" class="alignnone" /></p>
<p>但是，本文的男主角，IE7浏览器则 <img src="http://mat1.gtimg.com/www/mb/images/face/1.gif" align="absmiddle" height="24">, 似乎不支持单选框[checked]属性选择器：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-20_000756.png" width="391" height="225" alt="IE浏览器不支持单选框[checked]属性选择器截图" class="alignnone" /></p>
<p>不完美了，生活不美丽了。</p>
<p>IE7啊，IE7，枉我对你抱有期望，没想到，期望越大，失望越大。你说，你这么搞，我想根据<code>[checked]</code>属性模拟自定义的单复选框效果，就实现不了了啊，你怎么就不争气呢！！</p>
<p>很多时候，父母怪孩子不听话，其实没有发现孩子那与众不同之处，没有因材施教。</p>
<p>我们一窥IE7浏览器下对<code>checked</code>属性的HTML渲染，会发现，完全大写化了，和<code>&lt;span&gt;</code>元素上非原生的小写<code>checked</code>属性完全不一样：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-20_001550.png" width="618" height="127" alt="checked属性的不同解析" class="alignnone" /></p>
<p>而高版本IE浏览器下则没有这样的区分。也就是IE7浏览器似乎对单选框的<code>checked</code>属性特殊对待了，究竟背后藏了怎样的故事呢？</p>
<p>或许，我们可以等待后人来解答！………………你以为是这样的故事套路吗？错！我现在就要告诉你背后的故事。</p>
<p>如果我们窥探jQuery <code>prop()</code>方法的源码，会发现，有个关键字非常抢眼，什么关键字呢？当当当当……就是<code>defaultChecked</code>.</p>
<p>也就是，虽然，IE7浏览器表面上，我们看到的是<code>checked</code>属性，实际上，背后运作的是<code>defaultChecked</code>属性，因此，对于单复选框，对于IE7浏览器，就不要指望<code>[checked]</code>选择器了，试试<code>[defaultChecked]</code>属性选择器？</p>
<div class="zxx_code">
<pre>[defaultChecked] + span { color: #cd0000; }</pre>
</div>
<p>结果，IE7浏览器又开始放光彩了，百闻不如一见，您可以狠狠地点击这里：<a class="a_link" href="http://www.zhangxinxu.com/study/201506/ie7-checked-attribute-unknown.html" target="_blank">IE7浏览器[checked]/[defaultChecked]属性选择器Demo</a></p>
<p>结果，IE7浏览器东边不亮西边亮：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-20_002558.png" width="523" height="280" alt="IE7 defaultChecked属性选择器作用截图" class="alignnone" /></p>
<p>OK, 所以，这下大家应该知道，遇到IE7表单元素不认识<code>[checked]</code>属性选择器问题时候改怎么办了吧~~</p>
<h3>四、IE7浏览器认识原生的[disabled]属性吗？</h3>
<p>同样是表单元素的原生属性，既然IE7不识<code>[checked]</code>属性选择器，那是否也不认识<code>[disabled]</code>属性选择器呢？</p>
<p>很好的问题！</p>
<p>究竟认不认识呢？哈，大家放心，对于<code>[disabled]</code>属性选择器，IE7浏览器没有那么多花头，支持很纯正，大家放心使用。</p>
<p>不放心的话，您可以狠狠地点击这里看个究竟：<a class="a_link" href="http://www.zhangxinxu.com/study/201506/ie7-disabled-attribute-known.html" target="_blank">IE7浏览器支持[disabled]属性选择器Demo</a></p>
<p>结果IE7浏览器下，顺利飘红：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-20_003505.png" width="339" height="153" alt="IE7浏览器支持disabled属性选择器" class="alignnone" /></p>
<h3>五、IE7浏览器矫情之没有标签等不认爹</h3>
<p>本来，对吧，我们差不多认为，IE7关于属性选择器的故事就这么尾声了，但是，有句话怎么说来着？“贱人就是矫情！” </p>
<p>关于属性选择器，IE7还有一个矫情的地方，就是部分<code>[attr=val]</code>的选择器，如果前面没有标签选择器或类名选择器等选择器的时候，属性选择器就没有作用。</p>
<p>例如，这样一个CSS代码：</p>
<div class="zxx_code">
<pre>[type=checkbox] { opacity: 0.5; filter: alpha(opacity=50); }</pre>
</div>
<p>所有复选框透明度50%, 没错吧。</p>
<p>但是，IE7浏览器下，不认识。</p>
<p>但是，我们稍作修改</p>
<div class="zxx_code">
<pre>input[type=checkbox] { opacity: 0.5; filter: alpha(opacity=50); }</pre>
</div>
<p>IE7浏览器都认爹认得麻溜的很！</p>
<p>我们直接看例子吧，您可以狠狠地点击这里：<a class="a_link" href="http://www.zhangxinxu.com/study/201506/ie7-attribute-known-need-tag-selector.html" target="_blank">IE7浏览器没有标签不认爹Demo</a></p>
<p><img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-20_005501.png" width="551" height="187" alt="属性选择器辅助标签选择器示意" class="alignnone" /></p>
<p>从上面截图可以看出，纯粹的<code>[type=checkbox]</code>在IE7浏览器下，并没有改变复选框的透明度；而加了<code>input</code>标签选择器的单选框却半透明了。这里，不仅是<code>input</code>标签选择器，使用类似<code>.class</code>类名选择器也是可以生效的。</p>
<p>而且，并不是所有的属性是这样，<code>type</code>属性就是其中一个，例如<code>id</code>属性，则是正常的，<code>[id=xxx]</code>IE7浏览器是能识别的。为何有些属性可以，有些不可以，究竟背后藏了怎样的故事呢？</p>
<p>或许，我们可以等待后人来解答！………………你以为是这样的故事套路吗？没错！就是这样的套路，此现象我还没深究。</p>
<h3>六、hold不住了，结束语</h3>
<p>明天端午节，就是屈原跳水的日子，然后今天大盘很应景，也跳水了，呵呵呵！</p>
<p>我靠，我怎么又在废话了。上了年纪了，完全扛不住了，以前松松忙到2-3点的状态是一去不复返了。</p>
<p>我要去睡觉觉了，感谢阅读，行为仓促，错误在所难免，欢迎指正，不甚感激！</p>
<p>也欢迎补充IE7浏览器关于属性选择器的其他精彩现象！</p>
<p>更多吐槽，等哪天时间充足的时候。</p>
<p>本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4843">http://www.zhangxinxu.com/wordpress/?p=4843</a></p>
<p>（本篇完）</p>
";s:14:"date_timestamp";i:1434733541;}i:9;a:14:{s:5:"title";s:51:"小tip: 了解CSS text-decoration新特性新表现";s:4:"link";s:86:"http://www.zhangxinxu.com/wordpress/2015/06/know-css-text-decoration-style-color-ship/";s:8:"comments";s:95:"http://www.zhangxinxu.com/wordpress/2015/06/know-css-text-decoration-style-color-ship/#comments";s:7:"pubdate";s:31:"Wed, 03 Jun 2015 17:51:12 +0000";s:2:"dc";a:1:{s:7:"creator";s:10:"张 鑫旭";}s:8:"category";s:118:"css相关letter-spacingtext-decorationtext-decoration-colortext-decoration-skiptext-decoration-styleword-spacing空格";s:4:"guid";s:43:"http://www.zhangxinxu.com/wordpress/?p=4831";s:11:"description";s:596:"如题所示，了解CSS text-decoration新特性新表现，欢迎围观~ 下面是摘要：
然后，还有一个blink, 就是text-decoration:blink, 看名字似乎很霸气，不过我们好像很少见到，更明说使用了，为啥子？
首先，这个text-decoration的装饰效果是，闪烁。由于鄙人没见过，也不好描述具体是个什么效果。为什么我没有见过呢！我查了下资料，原来虽然此属性值躺在规范里，但是，木有浏览器支持这个效果。哦，抱歉，FireFox曾经是支持的，后来可能破坏了府里的规矩……";s:7:"content";a:1:{s:7:"encoded";s:9599:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4831">http://www.zhangxinxu.com/wordpress/?p=4831</a></p>
<h3>一、支持良久的text-decoration-line</h3>
<p><code>text-decoration</code>顾名思意就是“文字装饰”的意思，我们平常使用多的就是链接无划线或者hover下划线，也就是：</p>
<div class="zxx_code">
<pre>a { text-decoration: none; }
a:hover { text-decoration: underline; }</pre>
</div>
<p>或者就是团购网站里面，原价¥100, 这个<del datetime="2015-06-03T15:18:12+00:00">¥100</del>需要被删掉状，于是，就直接使用<code>&lt;del&gt;</code>标签，或者使用span标签，然后如下<code>text-decoration</code>值：</p>
<div class="zxx_code">
<pre>span { text-decoration: line-through }</pre>
</div>
<p>当然，<code>text-decoration</code>在CSS2.1时代，支持的属性值不仅仅上面出现的这几个，还有与<code>underline</code>对应的<code>overline</code>, 表示上划线，虽然兼容性不错，但是似乎没有什么卵用，鄙人不才，写CSS这么多年一次都没有在实际项目中使用过<code>overline</code>.</p>
<p>然后，还有一个<code>blink</code>, 就是<code>text-decoration:blink</code>, 看名字似乎很霸气，不过我们好像很少见到，更别说使用了，为啥子？</p>
<p>首先，这个<code>text-decoration</code>的装饰效果是，闪烁。由于鄙人没见过，也不好描述具体是个什么效果。为什么我没有见过呢！我查了下资料，原来虽然此属性值躺在规范里，但是，木有浏览器支持这个效果。哦，抱歉，FireFox曾经是支持的，后来可能破坏了府里的规矩，也就乖乖不支持了。于是，现在，大家很难见到<code>text-decoration:blink</code>究竟是个什么效果了。</p>
<p><code>text-decoration</code>是支持多值的。比方说：</p>
<div class="zxx_code">
<pre>.multiple { text-decoration: underline overline; }</pre>
</div>
<p>上横线和下划线同时出现了。</p>
<p>但是，今天我一测试才发现，原来<code>text-decoration</code>的多值特性连IE7浏览器也支持，真是学习了！</p>
<p>然后，我就突发奇想，这文字上面一条线，下面一条线，要是再和<code>border</code>上面一条线下面一条线搞在一起，会有什么怎样的表现呢？</p>
<p>于是，整了个测试Demo, 您可以狠狠地点击这里：<a class="a_link" href="http://www.zhangxinxu.com/study/201506/text-decoration-border.html" target="_blank">text-decoration和border和outline关系</a></p>
<p>结果在宋体下，FireFox/Chrome浏览器下，<code>text-decoration</code>线和<code>border</code>线和<code>outline</code>线，正好密不可分缠绵在一起，1像素也不侵占，如下：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-04_004716.png" width="395" height="203" alt="各种线排排站效果" class="alignnone" /></p>
<p>但是在IE浏览器下，IE7~IE11, 或者所有浏览器的微软雅黑字体下，下划线和边框线是有距离的，如下：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-04_004920.png" width="434" height="235" alt="IE11下宋体间距" class="alignnone" /></p>
<p>但是，无论什么字体，什么浏览器，inline元素的上横行和上边框和上外框都是紧密连接在一起的。有人可能会疑问，有个卵用？嘿，你还别说，说不定什么时候想实现某图形生成效果的时候，会有奇用。</p>
<p>OK, 本节的<code>underline/overline</code>等，实际上在新的<code>text-decoraction</code>仅仅是其中text-decoration-line属性值，只是<code>text-decoraction</code>的一部分。</p>
<h3>二、新的text-decoration-style类型</h3>
<p>上一节讲的都是老CSS的故事，在CSS3时代，<code>text-decoration</code>也发生了一些进化，首先就是文字装饰的类别变多了。以前就是线啊线的，要么上边线，要么中间横个线，或者下划线。现在牛大了，不仅可以是虚线、点线、双线、甚至是波浪线。</p>
<div class="zxx_code">
<pre>text-decoration-style: solid;
text-decoration-style: double;
text-decoration-style: dotted;
text-decoration-style: dashed;
text-decoration-style: wavy;

text-decoration-style: inherit;</pre>
</div>
<h3>三、text-decoration-color定义装饰线的颜色</h3>
<p>以前<code>text-decoration</code>的颜色是跟着color走的，我们是不能修改的。但是，现在，新出来了个<code>text-decoration-color</code>, 我们可以愉快地定义装饰线的颜色……这样的场景，需要等到浏览器足够兼容才行。</p>
<p>目前最近几个版本的FireFox浏览器无压力支持<code>text-decoration-color</code>, 但是Chrome浏览器还需要去<code>chrome://flags</code>手动开启“启用实验性网络平台功能”才可以支持。</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-04_010217.png" width="479" height="191" alt="启用实验性网络平台功能截图示意" class="alignnone" /></p>
<p><iframe width="100%" height="380" src="http://caniuse.com/text-decoration/embed" frameborder="0"></iframe></p>
<h3>三、文字和线的覆盖关系text-decoration-skip</h3>
<p><code>text-decoration-skip</code>表示，当字符和装饰线发生重叠关系的时候，例如，删除线，或者一些英文字符(g, q)和下划线，我们的装饰线是跳过文字字符，还是直接连在一起穿过去。举个例子吧，如下CSS：</p>
<div class="zxx_code">
<pre>a { text-decoration-skip: ink; }</pre>
</div>
<p>可能最后的表现会是这样：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/ink.png" width="536" height="100" alt="skip:ink的效果截图示意" class="alignnone" /></p>
<p><code>text-decoration-skip</code>支持的一些值以及含义如下：</p>
<ul>
<li><code>objects</code>: 默认值。 装饰线跳过内联对象，比方说图片啊或者<code>inline-block</code>元素。</li>
<li><code>none</code>: 装饰线穿过一切，包括本应跳过的内联对象。</li>
<li><code>spaces</code>: 装饰线跳过空格或字符间分隔，以及<code>letter-spacing</code>或<code>word-spacing</code>形成的间距。</li>
<li><code>ink</code>: 装饰线跳过符号或下沉字母。</li>
<li><code>edges</code>: 装饰性起始于内容起始边缘后面，结束语内容结束边缘的前面。这个属性值的目的是为了让两个搞在一起的下划线元素看上去公用一条下划线。这对于中文字体很有用，因为会使用下划线作为标点符号。</li>
<li><code>box-decoration</code>: 装饰线跳过继承的<code>margin</code>, <code>border</code>, 以及<code>padding</code>. </li>
<li><code>trailing-spaces</code>: 装饰线跳过<code>pre</code>或<code>white-space: pre-wrap</code>里面前后空格。</li>
</ul>
<p>效果如下图示意：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/t-d-s.png" width="539" height="458" alt="text-decoration-skip一些效果示意" class="alignnone" /></p>
<p>这个属性看上去很牛很强很有用，不过有个不幸地消息要告诉大家，目前还没有什么浏览器支持这个属性。</p>
<p>不过，目前，存在一种有人问津的情况。在最新的OSX和iOS下，Safari浏览器默认对装饰线的穿越规则进行了修改，默认就是类似<code>text-decoration-skip: ink;</code>的效果，我们可以使用下面这行CSS进行重置：</p>
<div class="zxx_code">
<pre>-webkit-text-decoration-skip: none;</pre>
</div>
<p>这就是目前唯一的与<code>text-decoration-skip</code>有响应的使用场景，不过，估计很快，大家就能愉快地玩耍了。</p>
<h3>四、text-decoration的缩写</h3>
<p>我们目前使用的<code>text-decoration</code>实际上是种缩写，完整的，应该包括：<code>text-decoration-line</code>, <code>text-decoration-style</code>, <code>text-decoration-color</code>等。例如：</p>
<div class="zxx_code">
<pre>text-decoration: underline wavy red;</pre>
</div>
<p>至于浏览器支不支持，则是另外一回事了。</p>
<p>最后，当下搬运工，大家可以同下面这个例子，感受<code>text-decoration</code>的一些新特性和新表现。</p>
<p><iframe id="cp_embed_emxpmJ" src="//codepen.io/css-tricks/embed/emxpmJ?height=508&amp;theme-id=1&amp;slug-hash=emxpmJ&amp;default-tab=result&amp;user=css-tricks" scrolling="no" frameborder="0" height="508" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p>
<h3>五、想不出标题的结束语</h3>
<p>因为太晚了，我已经没有什么想吐槽的了。</p>
<p>明天发工资了，happy~  </p>
<p>明天还有看电影的活动，happy~</p>
<p>还有个摊子要收拾……恩……紧上眉头……</p>
<p>明天是地铁上班呢还是其他交通工具？</p>
<p>鱼缸里的河蚌记得提醒老婆明天放生~~</p>
<p>……</p>
<p>本文部分图片以及demo参考自&#8221;<a href="https://css-tricks.com/more-control-over-text-decoration/">More Control over Text Decoration</a>&#8220;，转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4831">http://www.zhangxinxu.com/wordpress/?p=4831</a></p>
<p>（本篇完）</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:91:"http://www.zhangxinxu.com/wordpress/2015/06/know-css-text-decoration-style-color-ship/feed/";}s:5:"slash";a:1:{s:8:"comments";s:1:"8";}s:7:"summary";s:596:"如题所示，了解CSS text-decoration新特性新表现，欢迎围观~ 下面是摘要：
然后，还有一个blink, 就是text-decoration:blink, 看名字似乎很霸气，不过我们好像很少见到，更明说使用了，为啥子？
首先，这个text-decoration的装饰效果是，闪烁。由于鄙人没见过，也不好描述具体是个什么效果。为什么我没有见过呢！我查了下资料，原来虽然此属性值躺在规范里，但是，木有浏览器支持这个效果。哦，抱歉，FireFox曾经是支持的，后来可能破坏了府里的规矩……";s:12:"atom_content";s:9599:"<p>by <a href="http://www.zhangxinxu.com/">zhangxinxu</a> from <a href="http://www.zhangxinxu.com/">http://www.zhangxinxu.com</a><br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4831">http://www.zhangxinxu.com/wordpress/?p=4831</a></p>
<h3>一、支持良久的text-decoration-line</h3>
<p><code>text-decoration</code>顾名思意就是“文字装饰”的意思，我们平常使用多的就是链接无划线或者hover下划线，也就是：</p>
<div class="zxx_code">
<pre>a { text-decoration: none; }
a:hover { text-decoration: underline; }</pre>
</div>
<p>或者就是团购网站里面，原价¥100, 这个<del datetime="2015-06-03T15:18:12+00:00">¥100</del>需要被删掉状，于是，就直接使用<code>&lt;del&gt;</code>标签，或者使用span标签，然后如下<code>text-decoration</code>值：</p>
<div class="zxx_code">
<pre>span { text-decoration: line-through }</pre>
</div>
<p>当然，<code>text-decoration</code>在CSS2.1时代，支持的属性值不仅仅上面出现的这几个，还有与<code>underline</code>对应的<code>overline</code>, 表示上划线，虽然兼容性不错，但是似乎没有什么卵用，鄙人不才，写CSS这么多年一次都没有在实际项目中使用过<code>overline</code>.</p>
<p>然后，还有一个<code>blink</code>, 就是<code>text-decoration:blink</code>, 看名字似乎很霸气，不过我们好像很少见到，更别说使用了，为啥子？</p>
<p>首先，这个<code>text-decoration</code>的装饰效果是，闪烁。由于鄙人没见过，也不好描述具体是个什么效果。为什么我没有见过呢！我查了下资料，原来虽然此属性值躺在规范里，但是，木有浏览器支持这个效果。哦，抱歉，FireFox曾经是支持的，后来可能破坏了府里的规矩，也就乖乖不支持了。于是，现在，大家很难见到<code>text-decoration:blink</code>究竟是个什么效果了。</p>
<p><code>text-decoration</code>是支持多值的。比方说：</p>
<div class="zxx_code">
<pre>.multiple { text-decoration: underline overline; }</pre>
</div>
<p>上横线和下划线同时出现了。</p>
<p>但是，今天我一测试才发现，原来<code>text-decoration</code>的多值特性连IE7浏览器也支持，真是学习了！</p>
<p>然后，我就突发奇想，这文字上面一条线，下面一条线，要是再和<code>border</code>上面一条线下面一条线搞在一起，会有什么怎样的表现呢？</p>
<p>于是，整了个测试Demo, 您可以狠狠地点击这里：<a class="a_link" href="http://www.zhangxinxu.com/study/201506/text-decoration-border.html" target="_blank">text-decoration和border和outline关系</a></p>
<p>结果在宋体下，FireFox/Chrome浏览器下，<code>text-decoration</code>线和<code>border</code>线和<code>outline</code>线，正好密不可分缠绵在一起，1像素也不侵占，如下：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-04_004716.png" width="395" height="203" alt="各种线排排站效果" class="alignnone" /></p>
<p>但是在IE浏览器下，IE7~IE11, 或者所有浏览器的微软雅黑字体下，下划线和边框线是有距离的，如下：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-04_004920.png" width="434" height="235" alt="IE11下宋体间距" class="alignnone" /></p>
<p>但是，无论什么字体，什么浏览器，inline元素的上横行和上边框和上外框都是紧密连接在一起的。有人可能会疑问，有个卵用？嘿，你还别说，说不定什么时候想实现某图形生成效果的时候，会有奇用。</p>
<p>OK, 本节的<code>underline/overline</code>等，实际上在新的<code>text-decoraction</code>仅仅是其中text-decoration-line属性值，只是<code>text-decoraction</code>的一部分。</p>
<h3>二、新的text-decoration-style类型</h3>
<p>上一节讲的都是老CSS的故事，在CSS3时代，<code>text-decoration</code>也发生了一些进化，首先就是文字装饰的类别变多了。以前就是线啊线的，要么上边线，要么中间横个线，或者下划线。现在牛大了，不仅可以是虚线、点线、双线、甚至是波浪线。</p>
<div class="zxx_code">
<pre>text-decoration-style: solid;
text-decoration-style: double;
text-decoration-style: dotted;
text-decoration-style: dashed;
text-decoration-style: wavy;

text-decoration-style: inherit;</pre>
</div>
<h3>三、text-decoration-color定义装饰线的颜色</h3>
<p>以前<code>text-decoration</code>的颜色是跟着color走的，我们是不能修改的。但是，现在，新出来了个<code>text-decoration-color</code>, 我们可以愉快地定义装饰线的颜色……这样的场景，需要等到浏览器足够兼容才行。</p>
<p>目前最近几个版本的FireFox浏览器无压力支持<code>text-decoration-color</code>, 但是Chrome浏览器还需要去<code>chrome://flags</code>手动开启“启用实验性网络平台功能”才可以支持。</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201506/2015-06-04_010217.png" width="479" height="191" alt="启用实验性网络平台功能截图示意" class="alignnone" /></p>
<p><iframe width="100%" height="380" src="http://caniuse.com/text-decoration/embed" frameborder="0"></iframe></p>
<h3>三、文字和线的覆盖关系text-decoration-skip</h3>
<p><code>text-decoration-skip</code>表示，当字符和装饰线发生重叠关系的时候，例如，删除线，或者一些英文字符(g, q)和下划线，我们的装饰线是跳过文字字符，还是直接连在一起穿过去。举个例子吧，如下CSS：</p>
<div class="zxx_code">
<pre>a { text-decoration-skip: ink; }</pre>
</div>
<p>可能最后的表现会是这样：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/ink.png" width="536" height="100" alt="skip:ink的效果截图示意" class="alignnone" /></p>
<p><code>text-decoration-skip</code>支持的一些值以及含义如下：</p>
<ul>
<li><code>objects</code>: 默认值。 装饰线跳过内联对象，比方说图片啊或者<code>inline-block</code>元素。</li>
<li><code>none</code>: 装饰线穿过一切，包括本应跳过的内联对象。</li>
<li><code>spaces</code>: 装饰线跳过空格或字符间分隔，以及<code>letter-spacing</code>或<code>word-spacing</code>形成的间距。</li>
<li><code>ink</code>: 装饰线跳过符号或下沉字母。</li>
<li><code>edges</code>: 装饰性起始于内容起始边缘后面，结束语内容结束边缘的前面。这个属性值的目的是为了让两个搞在一起的下划线元素看上去公用一条下划线。这对于中文字体很有用，因为会使用下划线作为标点符号。</li>
<li><code>box-decoration</code>: 装饰线跳过继承的<code>margin</code>, <code>border</code>, 以及<code>padding</code>. </li>
<li><code>trailing-spaces</code>: 装饰线跳过<code>pre</code>或<code>white-space: pre-wrap</code>里面前后空格。</li>
</ul>
<p>效果如下图示意：<br />
<img src="http://image.zhangxinxu.com/image/blog/201506/t-d-s.png" width="539" height="458" alt="text-decoration-skip一些效果示意" class="alignnone" /></p>
<p>这个属性看上去很牛很强很有用，不过有个不幸地消息要告诉大家，目前还没有什么浏览器支持这个属性。</p>
<p>不过，目前，存在一种有人问津的情况。在最新的OSX和iOS下，Safari浏览器默认对装饰线的穿越规则进行了修改，默认就是类似<code>text-decoration-skip: ink;</code>的效果，我们可以使用下面这行CSS进行重置：</p>
<div class="zxx_code">
<pre>-webkit-text-decoration-skip: none;</pre>
</div>
<p>这就是目前唯一的与<code>text-decoration-skip</code>有响应的使用场景，不过，估计很快，大家就能愉快地玩耍了。</p>
<h3>四、text-decoration的缩写</h3>
<p>我们目前使用的<code>text-decoration</code>实际上是种缩写，完整的，应该包括：<code>text-decoration-line</code>, <code>text-decoration-style</code>, <code>text-decoration-color</code>等。例如：</p>
<div class="zxx_code">
<pre>text-decoration: underline wavy red;</pre>
</div>
<p>至于浏览器支不支持，则是另外一回事了。</p>
<p>最后，当下搬运工，大家可以同下面这个例子，感受<code>text-decoration</code>的一些新特性和新表现。</p>
<p><iframe id="cp_embed_emxpmJ" src="//codepen.io/css-tricks/embed/emxpmJ?height=508&amp;theme-id=1&amp;slug-hash=emxpmJ&amp;default-tab=result&amp;user=css-tricks" scrolling="no" frameborder="0" height="508" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p>
<h3>五、想不出标题的结束语</h3>
<p>因为太晚了，我已经没有什么想吐槽的了。</p>
<p>明天发工资了，happy~  </p>
<p>明天还有看电影的活动，happy~</p>
<p>还有个摊子要收拾……恩……紧上眉头……</p>
<p>明天是地铁上班呢还是其他交通工具？</p>
<p>鱼缸里的河蚌记得提醒老婆明天放生~~</p>
<p>……</p>
<p>本文部分图片以及demo参考自&#8221;<a href="https://css-tricks.com/more-control-over-text-decoration/">More Control over Text Decoration</a>&#8220;，转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br />
本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=4831">http://www.zhangxinxu.com/wordpress/?p=4831</a></p>
<p>（本篇完）</p>
";s:14:"date_timestamp";i:1433353872;}}s:7:"channel";a:8:{s:5:"title";s:29:"张鑫旭-鑫空间-鑫生活";s:4:"link";s:35:"http://www.zhangxinxu.com/wordpress";s:11:"description";s:19:"it's my whole life!";s:13:"lastbuilddate";s:31:"Mon, 31 Aug 2015 05:14:22 +0000";s:8:"language";s:5:"zh-CN";s:2:"sy";a:2:{s:12:"updateperiod";s:6:"hourly";s:15:"updatefrequency";s:1:"1";}s:9:"generator";s:29:"http://wordpress.org/?v=4.1.7";s:7:"tagline";s:19:"it's my whole life!";}s:9:"textinput";a:0:{}s:5:"image";a:0:{}s:9:"feed_type";s:3:"RSS";s:12:"feed_version";s:3:"2.0";s:8:"encoding";s:5:"UTF-8";s:16:"_source_encoding";s:0:"";s:5:"ERROR";s:0:"";s:7:"WARNING";s:0:"";s:19:"_CONTENT_CONSTRUCTS";a:6:{i:0;s:7:"content";i:1;s:7:"summary";i:2;s:4:"info";i:3;s:5:"title";i:4;s:7:"tagline";i:5;s:9:"copyright";}s:16:"_KNOWN_ENCODINGS";a:3:{i:0;s:5:"UTF-8";i:1;s:8:"US-ASCII";i:2;s:10:"ISO-8859-1";}s:5:"stack";a:0:{}s:9:"inchannel";b:0;s:6:"initem";b:0;s:9:"incontent";b:0;s:11:"intextinput";b:0;s:7:"inimage";b:0;s:17:"current_namespace";b:0;s:4:"etag";s:36:""5d8da0f2504f0bc66166e3b654505a65"
";s:13:"last_modified";s:31:"Mon, 31 Aug 2015 05:14:22 GMT
";}